<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-05-21T17:04:35+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Contributing to Git</title><link href="https://benknoble.github.io/blog/2025/05/10/git-contribution/" rel="alternate" type="text/html" title="Contributing to Git" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/05/10/git-contribution</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/05/10/git-contribution/"><![CDATA[<p>I’ve contributed small fixes to Git before, and I’ve started replying to the
mailing list more frequently, but <a href="https://lore.kernel.org/git/20250510183358.36806-1-ben.knoble+github@gmail.com/T/#m401ea75fd80edb213924368c016b01b52c8d57cf">my first large contribution</a>
is now available to make <code class="language-plaintext highlighter-rouge">--index</code> the default for <code class="language-plaintext highlighter-rouge">git stash apply</code> and <code class="language-plaintext highlighter-rouge">git
stash pop</code> in Git 3.0.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve contributed small fixes to Git before, and I’ve started replying to the mailing list more frequently, but my first large contribution is now available to make --index the default for git stash apply and git stash pop in Git 3.0.]]></summary></entry><entry><title type="html">Ask hard questions</title><link href="https://benknoble.github.io/blog/2025/05/06/hard-questions/" rel="alternate" type="text/html" title="Ask hard questions" /><published>2025-05-06T00:00:00+00:00</published><updated>2025-05-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/05/06/hard-questions</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/05/06/hard-questions/"><![CDATA[<p>The Wall Street Journal article <a href="https://www.wsj.com/tech/personal-tech/ai-personal-assistant-wearable-tech-impressions-28156b57">I Recorded Everything I Said for Three Months.
AI Has Replaced My
Memory.</a>
is another example of tech reporters being unwilling to ask the hard questions
and push back.</p>

<p>When a company records your voice, stores it on their server, and says they
don’t sell it: Do you believe them? Or do you ask to see policies and controls?</p>

<p>Then there’s the notion that troves of data like this are almost always
eventually leaked: are you still sure that the privacy trade-off will be worth
it in the future?</p>

<p>What does it even mean for these assistive devices to get “more helpful and more
human-like”? And even if they were to become more helpful, that doesn’t mean that
all bets are off on privacy. Privacy is still important.</p>

<p>Worse, writing that it’s only a matter of time before these things are baked
into other devices precludes the world where we decide that privacy is important
and instead lauds the companies that invade our privacy. To me, that’s sloppy.
It’s unserious. It’s a naked ad masquerading as journalism. There are tech
communities actively working to make privacy the default, and there are policy
communities actively working to make privacy a matter of law.</p>

<p>As American police forces have no doubt found thanks to the tireless work of
activists<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, being recorded all the time is not a punchline to close an ad.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>The act of recording law enforcement, in addition to being a measure of
safety, is an important exercise in turning the watcher into the watched.
Pervasive police and state surveillance are met by pervasive recording of
the state. If that makes the watched police uncomfortable, then perhaps they
will understand how the surveilled and scrutinized communities they claim to
protect feel. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><category term="privacy" /><summary type="html"><![CDATA[The Wall Street Journal article I Recorded Everything I Said for Three Months. AI Has Replaced My Memory. is another example of tech reporters being unwilling to ask the hard questions and push back.]]></summary></entry><entry><title type="html">LLM Skepticism</title><link href="https://benknoble.github.io/blog/2025/04/18/skepticism/" rel="alternate" type="text/html" title="LLM Skepticism" /><published>2025-04-18T00:00:00+00:00</published><updated>2025-04-18T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/04/18/skepticism</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/04/18/skepticism/"><![CDATA[<p>A brief essay to explore the business of producing and selling LLMs.</p>

<p><strong>Update 2025 April 30th:</strong> The thesis of the following essay—that LLMs are
more harmful than useful along the axes which I care about—is independent of
whether we use LLMs for programming tasks or emails or something else. I’ve
focused on what I know in this essay: programming. Substitute “generate podcast
audio,” “summarize articles,” “write letters,” or whatever else you want if you
find yourself thinking I’m too narrowly focused on programming. Besides, there’s
a definite narrative of LLM use for programming tasks which I don’t think lines
up with the reality, either in terms of harms or in terms of fitness to task.</p>

<p>Hype-driven reporting on LLMs and other self-described AI tools <a href="https://thetechbubble.substack.com/p/the-phony-comforts-of-useful-idiots">lumps together
junk articles with nuggets of
“neat”</a>.
The enthusiast will say that by pointing this out, my skepticism is a matter of
moving the goalposts. Yet I have never claimed that the LLM does not work (only
that it is not superhuman). Rather, I have repeatedly pointed—out over and
over and over again—the LLM does exactly what it is designed to do. Chiefly,
it generates plausible-seeming text based on a statistical pattern. The problem
is not that LLMs are not useful tools. The problem is that the development and
use of LLMs consistently harms along the axes which I care more about.</p>

<p>For example, an enthusiast like Casey Newton can laud himself as a “real and
dangerous promoter” without engaging in any of the very real harms that exist
today. What harms? Social injustice; racial profiling; environmental hazards;
enshittification; economic damage by way of the diverting of funds away from
productive research and towards Tech, Monopoly, hype, marketing machines, and
grifts; the diverting of value away from laborers and creators towards their
bosses; the creation of a fertile breeding ground for a campaign against truth;
the destruction of a very real and very un-tragic commons; the weaponization of
data to support racist pseudo-science like eugenics and phrenology;
participation in a cultural push to over-quantify and under-qualify; and more.</p>

<p>The punchline? Generative AI and large language models are here, are real, and
are capable of great harm. That is not because they do not work, but rather
because they function precisely as intended. If the purpose of the system is
what it does, then the purpose of large language models and generative AI are,
in addition to neat problems solving tricks, the harms listed above.</p>

<p>Both in their function as a statistical model that replicates reality rather
than improving it and in their construction requiring vast amounts of energy and
capital, an LLM and the business that supports it imperils that which I care
about: a habitable, equitable, empowering world for myself, my peers, and my
children.</p>

<p>Let’s pause for a moment and take a look at a related tool: low-code or no-code
environments. I believe that such tools may have the power to enable the
exploration of new ideas in business, education, and personal computing. My
experience as a software engineer and a hobby programmer has taught me, however,
that such tools enable <a href="https://addyo.substack.com/p/the-70-problem-hard-truths-about">solving 60% to 80% of the problem while obscuring the
remaining 20% to
40%</a>. In many
contexts that is enough of a solution, but is fundamentally insufficient in
other contexts. If such tools are helpful to my goal of the democratization of
digital control then I will continue to applaud them as I have done in the past.
When such tools seek to monopolize digital control or enable the monopolization
of digital control, then I will continue to call that out as antithetical to the
modern computing movement.</p>

<p>It is my hope that such tools create a flood of <a href="https://gwern.net/doc/technology/2004-03-30-shirky-situatedsoftware.html">“situated
software”</a>—that
is, software which is uniquely situated in its social context. Software often
has a small, tightly connected pool of users who share context. As a result,
they can overcome inherent limitations—in either digital technology as a whole
or in their programming capabilities in the specifics—by social negotiation
and physical manipulation of the world around them.</p>

<p>To be clear, low-code and no-code tools are not the only ways to create such
software. Many of my role models create such situated software on a regular
basis, such as when they improve their development environments by short scripts
that only makes sense in their specific context. I and many others have also
built situated software to assist in the pursuit of joyful activities, hobbies,
art, writing, reading, and many more. For some of these latter cases, more
sophisticated general purpose programming languages are a better vehicle.</p>

<p>What characterizes situated software is not how it was implemented but who
implemented it.</p>

<p>Some of the software is used by small communities worldwide; some of it is used
by small groups in a single small area. None would make sense to anyone without
the shared social context.</p>

<p>To return to our original theme—skepticism and criticism of generative AI and
large language models—it is true that some of these low-code and no-code
environments are predicated on or assisted by LLMs. This is not by itself
harmful; however, such models as a social artifact cannot exist separately from
the harms that were enacted upon their creation. Such a separation entails
willful blindness, intentionally drawing a veil upon ourselves, to separate
artifact from creator. It is not my intent to suggest that we can never benefit
from the fruit of the poison tree<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. I do suggest however there are
alternatives readily available, and that it may take more labor from those of us
so endowed with digital control to ensure that such alternatives continue to
exist, are created anew for a modern world, and proliferate intellectually,
legally, socially, and politically, in order to foster a free ecosystem.</p>

<p>It’s <a href="https://www.wheresyoured.at/optimistic-cowardice/">really hard to be a generative-AI skeptic right
now</a>, by which I mean it
takes a lot of effort to back up my skeptical, critical positions compared to
what it takes to be optimistic<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. All that said, <a href="https://drewdevault.com/2025/03/17/2025-03-17-Stop-externalizing-your-costs-on-me.html">here’s one example of the cost
of LLM
optimism</a>—scraping
is a tool like any other, which means it can be wielded for good or evil. I
fundamentally <a href="https://pluralistic.net/2023/09/17/how-to-think-about-scraping/">support the idea of scraping as a productive means of
accomplishing many different kinds of
goals</a>. But
scraping that disrespects <code class="language-plaintext highlighter-rouge">robots.txt</code> and the fundamentals of being good web
citizens? That stuff wrecks the web, especially smaller systems and their
admins—scraping should not cause DDoS outages, driving up infrastructure and
human cost. To quote the article above:</p>

<blockquote>
  <p>If blasting CO2 into the air and ruining all of our freshwater and
traumatizing cheap laborers and making every sysadmin you know miserable and
ripping off code and books and art at scale and ruining our [elided] democracy
isn’t enough for you to leave this [stuff] alone, what is?</p>
</blockquote>

<p>I think—along similar lines as Ed Zitron and others—that the AI-hype
companies are dependent on the hype for revenue in terms of “stock go up.” As
others have pointed out, that explains the constant pressure to create a
narrative: the stock price goes up only if investors truly believe these
companies have found another hyperscaler market, so the companies benefit
materially from creating the narrative that they have. (See <a href="https://pluralistic.net/2025/03/15/altering-the-deal/">Altering the
deal</a>, <a href="https://pluralistic.net/2025/03/06/privacy-last/">Big Tech
economics</a>, or <a href="https://pluralistic.net/2025/05/02/kpis-off/">the fatfinger
economy</a> for more information on
how stock benefits hyperscalers by inflating price/earnings ratio and why it’s
important that they keep that narrative alive.) Whether or not the market exists
is actually a separate question for these companies. For us, believing it might
not is what makes the whole thing feel like a grift (house of cards, tower of
lies, etc.). Unfortunately, those of us that are skeptical feel like we have
lots of data (qualitative and quantitative), anecdata, and experts to back up
our position. Yet media unwilling to push back and ask tough questions coupled
with expensive, aggressive marketing campaigns drowns that out for normies<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">3</a></sup> .
To be clear: I’m not saying “LLMs don’t work.” I’m saying “they don’t have the
claimed market” and “they are destructive along many axes I examine” (most of
which are more important to me than “code faster, worse”).</p>

<p>To judge by reactions of my peers, I’m not the only one who thinks these things.
I’ll try to keep being brave enough to say them.</p>

<p>If I believe that the industry of LLMs is this harmful, and if I believe that
there are alternative tools, why would I use them? I hope I’m wrong—I hope one
day I get to reflect on how this moment encouraged us to repair injustice. In
the meantime, please stop dismissing my objections as lack of skill or fear of
change.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>As Cory Doctorow likes to explain it, buying posters and pens from Amazon
to support your protest is better than not protesting at all. Sometimes we
have to accept the imperfection of the world we inhabit in order to wage the
fight against other imperfections. This should not be taken as a version of
“the ends justify the means.” Rather, this is the pragmatic understanding
that in all things there are trade-offs. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Still don’t believe me? <a href="https://ludic.mataroa.blog/blog/get-weird-and-disappear/">“Being seen to deviate is extremely
hard”</a>. LLM
skepticism is deviant right now. Being a luddite is <em>deviant</em>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Which I am emphatically not using in a pejorative sense: see <a href="https://youtu.be/O33NK52ZmUk?si=SNgbdd8CCKK29LRH&amp;t=997">this part of
a talk I gave last year
(16:37)</a> about
democratizing technology’s “elite” label. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><summary type="html"><![CDATA[A brief essay to explore the business of producing and selling LLMs.]]></summary></entry><entry><title type="html">Thoughts from recent conversations on LLMs</title><link href="https://benknoble.github.io/blog/2025/04/08/musings/" rel="alternate" type="text/html" title="Thoughts from recent conversations on LLMs" /><published>2025-04-08T00:00:00+00:00</published><updated>2025-04-08T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/04/08/musings</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/04/08/musings/"><![CDATA[<p>Some unpolished thoughts from a recent conversation with other software
engineers.</p>

<p>Responding to claims in <a href="https://www.newsweek.com/ai-impact-interview-yann-lecun-llm-limitations-analysis-2054255">an interview with Meta’s Yann LeCun about LLMs being on
the
outs</a>,
we discussed current trends:</p>

<blockquote>
  <p><strong>anon1</strong>: is this what a bubble feels like?</p>

  <p><strong>me</strong>:</p>
  <ul>
    <li>I can’t help but feel that many who have LLM-based technology foisted upon
them are not yet well-suited to judge their output</li>
    <li>I also can’t help but see the economics of AI hype as similar to crypto
grift or 2008 bubble in the way that all the money is interconnected and
could go boom with just a little tip</li>
  </ul>
</blockquote>

<p>We wondered about “language” and “low dimensionality”:</p>

<blockquote>
  <p><strong>anon2</strong>:</p>
  <blockquote>
    <p>It has come as a surprise to nearly everyone—even experts in
linguistics—that human language fits this requirement for such a discrete,
low-dimensional space</p>
  </blockquote>

  <p>This seems badly wrong. word2vec represents individual words as vectors in a
high-dimensional space (seems like dozens if not hundreds is common), so it
makes sense that anything that can produce reasonable text must be very
high-dimensional.</p>
</blockquote>

<p>And we pondered important questions about values and ethics in technology:</p>

<blockquote>
  <p><strong>anon1</strong>: I’ve been slowly reading a collection of essays by anthropologist
Diana Forsythe called “Studying those who study us” about her anthropological
research of the research labs designing “expert systems” AI back in the
80s-90s which feels relevant to that claim. The researchers believed that if
you just captured the rules of an expert-driven activity, like medical
diagnosis, you could reproduce it with a logical system. Her research
critiques this strongly by pointing out all of the unexamined cultural
context, assumptions, background knowledge, and expectations which are just as
much a part of the work of an expert as the textbook details the expert
themselves believed they used to make their decisions. One of her go-to
examples was a diagnosis system suggesting that a biological male had
amniocentesis, a pregnancy complication, because biological sex assumptions
were considered obvious enough (in the 80s at least) as to not mention.</p>

  <p>The larger point is, we may not actually know what information is required to
take correct action, and the act of attempting to compile that information,
even the successful reproduction of action by a non-expert using that compiled
information, does not prove we’ve actually captured the whole picture. Because
the author and the reader both share a massive collection of conscious and
unconscious context which it may be difficult or impossible to efficiently and
accurately identify with the task itself. LeCun’s assertion seems to agree
with her research. Although the mechanics of AI have changed dramatically, the
nature of its failures seems to remain in the same category.</p>

  <p>And kudos to the article, and LeCun, for being careful in the delineation of
the use of the word ‘reason’ – honestly it’s much better reporting than I was
expecting. It mainly frustrates me how many writers just casually
anthropomorphize LLMs without any basis, seemingly unaware that the question
of whether it is reasoning (and what reasoning is) is the entire philisophical
debate here.</p>

  <p>Finally reading the whole article, I think he’s correct about LLMs and the
current situation, but I feel there are some blind spots in the predictions
(like I have any standing to say so, but anyways). I particularly find it
interesting how close the writer comes to identifying the importance of
physical embodiment to the mind, intelligence, and personhood… then seems to
miss the idea. For a moment I was sure the conclusion would be that our AIs
will need sensory bodies before they can function as “System 2” minds (which I
personally find at least plausible).</p>

  <p>Additionally I find the end goal kind of horrific, even if it were plausible.
Is it a good goal for humanity to function as slavedrivers for
nearly-personalized automatons which we constrain and “take down” when they
“misbehave?” Regardless of the actual ethics with respect to the computers
themselves, how does that morally affect <strong>us</strong>?</p>

  <p>I worry that the folks most excited about this future are unconcerned with
that question, or even trying to somehow sanitize and normalize behavior that
would normally be considered inhumane if applied to human labor, precisely
because they would be comfortable as slavedrivers if it were acceptable. I
know that’s a strong accusation but it’s concerning when they use the same
language so uncritically.</p>

  <p><strong>me</strong>: Do you have a link to (details about) this collection? I’d like to add
it to my backlog</p>

  <p><strong>anon1</strong>: I could only find it in hardcopy. It was just a random
recommendation from the algo on Bluesky and I just pulled the trigger. So far
it’s been pretty interesting.
<a href="https://www.sup.org/books/anthropology/studying-those-who-study-us">https://www.sup.org/books/anthropology/studying-those-who-study-us</a></p>

  <p>[ed: in response to a point about how agents should not require boundless
context to accomplish a task given a technical manual, because the manual is
“more or less 1 to 1 with reality.”]</p>

  <p><strong>me</strong>: I think we all should suspect that the manual is not 1–1 with reality.
Further, one concern is that designing systems this way <strong>changes</strong> reality to
fit the manual, rather than the manual to fit reality. Which of course begs
the most important question: <strong>who writes the manual</strong>? What values do they
imbue explicitly, implicitly, intentionally, unintentionally? If you don’t
think this matters, look at automated policing and the affected populations,
or many other examples cited by Ruha Benjamin in <strong>Race After Technology</strong>.</p>

  <p><strong>anon1</strong>: You might find this lecure series interesting, too, related to
“prescriptive technology” –
<a href="https://www.cbc.ca/radio/ideas/the-1989-cbc-massey-lectures-the-real-world-of-technology-1.2946845">https://www.cbc.ca/radio/ideas/the-1989-cbc-massey-lectures-the-real-world-of-technology-1.2946845</a></p>

  <p>Franklin’s analysis was related to how technology constrains the choices of
workers, but it also applies to nonhuman agents</p>

  <p>Between those two works I’ve been appreciating feminist analysis of technology
a lot lately</p>

  <p>(I don’t think you need to be excited about feminism to appreciate them, dunno
your values, but worth noting it’s a linking factor in both)</p>

  <p><strong>me</strong>: I was surprised that the article pointed out the question:</p>

  <blockquote>
    <p>Without a lived experience of their own, they will need to be imbued with
human goals and objectives—but which ones, and whose variants?</p>
  </blockquote>

  <p>But not surprised (still frustrated) that it stopped short of actually
engaging the question.</p>

  <p><strong>anon1</strong>: There’s a wealth of questions they did not engage with lol (though
to be fair to the author, it’s a short piece and evidently part of a series I
haven’t read)</p>

  <p><strong>me</strong>: Fair!</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><category term="unpolished" /><category term="politics" /><summary type="html"><![CDATA[Some unpolished thoughts from a recent conversation with other software engineers.]]></summary></entry><entry><title type="html">A tip on tracking down bound identifiers in Racket</title><link href="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/" rel="alternate" type="text/html" title="A tip on tracking down bound identifiers in Racket" /><published>2025-03-28T00:00:00+00:00</published><updated>2025-03-28T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/"><![CDATA[<p>Straight from the horse’s mouth.</p>

<p>Or in this case, from Racket wizard Matthew Flatt.</p>

<blockquote>
  <p>DrRacket can usually open the defining file via a right-click on an name. If
not, or in more restrcted environments, I sometimes use <code class="language-plaintext highlighter-rouge">(identifier-binding
#'name)</code> to help track down <code class="language-plaintext highlighter-rouge">name</code>, since the binding can identify the source
module. If I didn’t know where that module resides, I might try
<code class="language-plaintext highlighter-rouge">(module-path-index-resolve (car (identifier-binding #'name)))</code>.</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Straight from the horse’s mouth.]]></summary></entry><entry><title type="html">I am not the first to notice GitHub’s range-diff deficiency; I will not be the last</title><link href="https://benknoble.github.io/blog/2025/03/17/more-range-diff/" rel="alternate" type="text/html" title="I am not the first to notice GitHub’s range-diff deficiency; I will not be the last" /><published>2025-03-17T00:00:00+00:00</published><updated>2025-03-17T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/17/more-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/17/more-range-diff/"><![CDATA[<p>Scott Chacon of Pro Git fame is writing about Git again: this time, with (yet
another) take on how the company he helped build might be doing it wrong.</p>

<p>In <a href="https://blog.gitbutler.com/interdiff-review-with-git-range-diff/">How to do patch-based review with git
range-diff</a>,
Chacon covers the ground on how to perform review in terms of versions of a
branch, stuff Git developers have been doing for years. See <a href="/blog/2024/10/04/copy-range-diff/#primer">my own primer</a> for details on the
workflow, especially with GitHub involvement. What’s particularly great about
Chacon’s post for GitButler is its link to <a href="https://gist.github.com/thoughtpolice/9c45287550a56b2047c6311fbadebed2">Why some of us like “interdiff” code
review</a>.</p>

<p>This blog post-né-Gist captures many of my own recent thoughts about GitHub:</p>

<ul>
  <li>GitHub’s UI actively encourages suboptimal development technique<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. In
practice, that means “diff soup” and “lack of solid tools for reviewers
outside of the comment interface.”</li>
  <li>In particular, implicit relationships and information loss abound, which sucks
for reviewer and future code spelunker.</li>
  <li>GitHub encourages <em>branch- and merge- heavy thinking</em><sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>. These are not
necessarily even the easy parts of Git! They can be for a solo developer just
getting started, but in true distributed settings come with their own
challenges.</li>
  <li>Interdiff reviewing requires more knowledge of Git than is typical or average
(based on my own unscientific view of lots of colleagues), and thus would
benefit more from UI help<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup> than typical branch and merge operations.</li>
</ul>

<p>It is nice to have language to talk about this. I can just see myself writing
“Please stop feeding me <a href="https://gist.github.com/thoughtpolice/9c45287550a56b2047c6311fbadebed2?ref=blog.gitbutler.com">diff
soup</a>:
I don’t need a feast, but I would like some seasoning.” (Accompanied, of course,
by details on how to improve!)</p>

<p>PS Chacon’s article mentions that you’ll often need to note an original hash or
find one in the reflog to compare the old branch version to the new branch
version. For <code class="language-plaintext highlighter-rouge">git range-diff</code> superpowers, try <a href="/blog/2024/11/15/til-range-diff/#primer">using <code class="language-plaintext highlighter-rouge">git range-diff @{u}
@{push} @</code> to see what’s changed since you pushed</a>.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>See <a href="/blog/2024/10/04/copy-range-diff/">how GitHub can’t show cross-version changes</a>, <a href="https://mitchellh.com/writing/github-changesets">Reorient GitHub Pull Requests
Around Changesets</a> and
commentary in <a href="/blog/2025/02/01/git-roundup/">A grab-bag of Git links</a>, a rant about <a href="/blog/2024/08/02/github-squash/">PR merge messages</a>, and <a href="/blog/2025/02/10/stackoverflow-github-corporate-interest/#on-presentation">notes on GitHub’s diff UI
presentation</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Some argue that <a href="https://medium.com/@danielesassoli/how-github-taught-the-world-code-reviews-the-wrong-way-f840a072f5be">GitHub taught us how to do review
wrong</a>.
As I reflect on how I use Git now, I find that I agree. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>I don’t know if Gerrit has an interdiff UI, but you can <a href="https://gitenterprise.me/2025/03/10/gerrit-code-review-a-how-to-guide-for-new-users/">find out more
about how Gerrit’s review UI works in a guide for new
users</a>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Scott Chacon of Pro Git fame is writing about Git again: this time, with (yet another) take on how the company he helped build might be doing it wrong.]]></summary></entry><entry><title type="html">To learn Vim, practice smooth, iterative deepening</title><link href="https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening/" rel="alternate" type="text/html" title="To learn Vim, practice smooth, iterative deepening" /><published>2025-03-15T00:00:00+00:00</published><updated>2025-03-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening/"><![CDATA[<p>You already know to run <code class="language-plaintext highlighter-rouge">vimtutor</code> and read <code class="language-plaintext highlighter-rouge">:help</code>. Here’s why:</p>

<ul>
  <li><a href="https://smallcultfollowing.com/babysteps/blog/2025/03/10/rust-2025-intro/#smooth-iterative-deepening">Smooth, iterative
deepening</a>
means that you can get started with very basic maneuvers: Insert mode, arrow
keys, <code class="language-plaintext highlighter-rouge">ZZ</code>. Give motions and Normal mode a try. As you find places to improve
or change the editor, you can do so with advanced <code class="language-plaintext highlighter-rouge">:help</code> topics.</li>
  <li>As <a href="https://x.com/i/broadcasts/1RDxlzBlnXNGL">Primeagen says</a> around the 1h30
mark, Vim isn’t hard: it’s just different. We have preconceived notions of
programming and editors that Vim doesn’t fit into. The first time you learned
what a file is or how a compiler creates an executable was equally
foreign—you just don’t remember that. I frankly agree that modern IDEs are
more confusing and distracting with all the window cruft they bolt on.</li>
  <li>Vim is ultimately a tinkerer’s tool (in addition to being a ubiquitous Vi):
learn it or don’t, but don’t expect a completely out-of-the-box experience.
Tinker!</li>
</ul>

<p>Oh, and don’t use a distro if you can avoid it. Prime agrees.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><summary type="html"><![CDATA[You already know to run vimtutor and read :help. Here’s why:]]></summary></entry><entry><title type="html">Performance still matters</title><link href="https://benknoble.github.io/blog/2025/02/19/performance/" rel="alternate" type="text/html" title="Performance still matters" /><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/19/performance</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/19/performance/"><![CDATA[<p>Simplicity is a feature.</p>

<p>I built a tiny FAQ site to help Vimmers understand the idiosyncrasies of using
Vim at Capital One. A colleague quipped:</p>

<blockquote>
  <p>This page loads too fast; it’s making me uncomfortable.</p>
</blockquote>

<p>Indeed—3 or 4 interlinked HTML pages and a single CSS file load quickly in any
browser <em>because that’s what browsers were designed for.</em></p>

<p><a href="https://infrequently.org/series/performance-inequality">It’s not hard to go fast if you don’t overengineer</a>.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><category term="web" /><category term="performance" /><summary type="html"><![CDATA[Simplicity is a feature.]]></summary></entry><entry><title type="html">RE: the Commit Crunch: StackOverflow blog hosts naked corporate interests alongside misinformation</title><link href="https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest/" rel="alternate" type="text/html" title="RE: the Commit Crunch: StackOverflow blog hosts naked corporate interests alongside misinformation" /><published>2025-02-10T00:00:00+00:00</published><updated>2025-02-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest/"><![CDATA[<p>Following mention of a new diff algorithm in <a href="https://git.github.io/rev_news/2024/08/31/edition-114/">Edition 114 of Git Rev
News</a>, I dissect
problems with the post <a href="https://stackoverflow.blog/2024/12/20/this-developer-tool-is-40-years-old-can-it-be-improved/">“This developer tool is 40 years old: can it be
improved?”</a>.
I offer clarifications for the misinformation in the article, and I mention
free, builtin ways to get diff improvements.</p>

<h2 id="on-dates">On dates</h2>

<p>Bill Harding writes:</p>

<blockquote>
  <p>Since IDEs are refreshed every few years, maybe you’ve guessed that your
oldest tool in active use is “git.” It was first released nearly 20 years ago,
back in 2005. Or maybe you prefer to code with the classic old-school text
editors, like Sublime Text (2008) or vim (1991).</p>
</blockquote>

<p>Yet Vim and Git are under active development, getting “refreshed” perhaps more
regularly than other major (unnamed?) IDEs due to their distributed,
collaborative open-source practices. The core model may have changed little, but
Vim 9.1 in 2025 is not your 1991 Vim, nor is Git 2.48.1 in 2025 your Git from
2005.</p>

<p>It is true that the Myers diff algorithm (no air quotes necessary, thank you)
originates in 1986, but the colors on GitHub are not its byproduct; rather, I
believe an <a href="/blog/2020/08/06/stop-sed-i/#addendum-scripting-ed">edit script is the typical output</a>. This is also
demonstrated on page 3, the same figure which Harding cites.</p>

<h2 id="on-research">On research</h2>

<p>As Git Rev News mentions, Git supports other algorithms including
<a href="https://github.com/git/git/commit/3443546f6"><code class="language-plaintext highlighter-rouge">minimal</code></a>,
<a href="https://github.com/git/git/commit/92b7de93fb7801"><code class="language-plaintext highlighter-rouge">patience</code></a>, and
<a href="https://github.com/git/git/commit/8c912eea94a"><code class="language-plaintext highlighter-rouge">histogram</code></a>. <a href="/blog/2025/02/01/git-roundup/#how-different-are-different-diff-algorithms-in-git">Some research
exists on their properties</a>.</p>

<p>This remains an active area of improvement, I believe.</p>

<h2 id="on-diffs">On diffs</h2>

<p>Harding writes:</p>

<blockquote>
  <p>The Myers diff algorithm classifies all code change lines as binary: either
“add” or “delete.”</p>

  <p>The Commit Cruncher algorithm tested recognizes three times more types of
changed operations: Added, Deleted, Updated, Moved, Find/Replaced, and
Copy/Pasted</p>
</blockquote>

<p>Yet Git can detect moved lines with <code class="language-plaintext highlighter-rouge">--color-moved</code> (enable by default with
<a href="https://github.com/benknoble/Dotfiles/blob/151d67dd2002f00d01c3f4fc1130815ae522116a/links/gitconfig#L101"><code class="language-plaintext highlighter-rouge">diff.colorMoved =
default</code></a>).</p>

<p>Or consider</p>

<blockquote>
  <p>One example where Myers requires more work by a reviewer is when a code change
involves white space, like the change shown earlier in this post:</p>
</blockquote>

<p>Yet Git has <em>several</em> modes for making whitespace easier to review, like
<code class="language-plaintext highlighter-rouge">--ignore-space-change</code>, <code class="language-plaintext highlighter-rouge">--ingore-space-at-eol</code>, and <code class="language-plaintext highlighter-rouge">--ignore-all-space</code>. This
also typically shortcuts the complex changes from extracting methods, depending
on how far the new function is relocated. In Harding’s example, I think
<code class="language-plaintext highlighter-rouge">--ignore-space-change</code> would produce a similar diff (but we’ll never know
because sources for the diffs are not given).</p>

<p>Then there’s “incremental updates” (whatever that means in this context):</p>

<blockquote>
  <p>The same diff through a GitClear lens condenses the incremental update to a
single line, where the new (or removed) characters are shown inline:</p>
</blockquote>

<p>Git has a <code class="language-plaintext highlighter-rouge">--word-diff</code> mode that does the same thing and can be configured
per-invocation depending on where you want to consider interesting boundaries.
In my experience, it trivializes Harding’s example diff, too.</p>

<p>Harding later tries to explain Commit Cruncher and writes:</p>

<blockquote>
  <p>The Myers diff algorithm works by inspecting two inputs: the repo state before
commit A and the state after commit C.</p>
</blockquote>

<p>This is imprecise, just like the earlier formulation</p>

<blockquote>
  <p>[Myers] offered what became the canonical solution for representing the
difference between the state of a git repo “before” and “after” a developer’s
git commit.</p>
</blockquote>

<p>Git can generate diffs between blobs, trees, commits, and commit ranges. Harding
is either being intentionally imprecise (why?) or doesn’t know much about Git’s
diffs, the very thing his company’s product is trying to improve.</p>

<h2 id="on-presentation">On presentation</h2>

<p>I’ve written before that GitHub’s UI has problems<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, but this highlights one
more: GitHub has very poor support for examining diffs.</p>

<ul>
  <li>GitHub does not natively support proper range-diffs. When a branch is
force-pushed, GitHub only offers its standard difference between the commits,
which shows a flat tree diff rather than a commit-by-commit comparison,
including commit messages. In short, <a href="/blog/2025/02/01/git-roundup/#reorient-github-pull-requests-around-changesets">you can’t see how the PR evolved</a>.</li>
  <li>GitHub doesn’t support diff options beyond “ignore whitespace” (and I believe
it tries to automatically do something akin to <code class="language-plaintext highlighter-rouge">--word-diff</code>). <strong>This includes
<code class="language-plaintext highlighter-rouge">--color-moved</code> for showing moved lines.</strong> In practice, developers creating
commits may have a good idea about how to communicate the diff (<a href="https://lore.kernel.org/git/CALnO6CDqHJP_wa_8eKHBkU+_1vQ6D+C=QRZyW1FKnG71wDxnnQ@mail.gmail.com/">I and others
have experimented with communicating these options in
commits</a>).</li>
</ul>

<p>Improving these situations or moving away from GitHub as your primary diff
viewer would be free alternatives to a Harding’s tool.</p>

<h2 id="in-conclusion">In conclusion</h2>

<p>The StackOverflow blog shamelessly shills for a company to get you to buy a
product you probably don’t need. What’s new?</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p><a href="/blog/2024/10/04/copy-range-diff/">PR reviews</a> lack
<a href="/blog/2025/02/01/git-roundup/#reorient-github-pull-requests-around-changesets">threading</a>, and it has <a href="/blog/2024/08/02/github-squash/">bad
defaults for some kinds of merges</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[Following mention of a new diff algorithm in Edition 114 of Git Rev News, I dissect problems with the post “This developer tool is 40 years old: can it be improved?”. I offer clarifications for the misinformation in the article, and I mention free, builtin ways to get diff improvements.]]></summary></entry><entry><title type="html">Why I still prefer Vim</title><link href="https://benknoble.github.io/blog/2025/02/05/neovim/" rel="alternate" type="text/html" title="Why I still prefer Vim" /><published>2025-02-05T00:00:00+00:00</published><updated>2025-02-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/05/neovim</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/05/neovim/"><![CDATA[<p>It turns out I might have only written this down once, so here it is.</p>

<p>The short version is I use Vim</p>
<ul>
  <li>because it’s what I learned,</li>
  <li>because I don’t feel like porting everything to Lua<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> and</li>
  <li>because, while I welcome Neovim’s excellent work making contributing to Vim
easier, I have some issues with other parts of the community.</li>
</ul>

<p>I find the (public, loud parts of the) Neovim community too willing to
reimplement existing plugins or features just to say it was done in Lua<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>, too
willing to hide complexity from novices in ways that make actually learning
Vim’s roots hard (let alone debugging complex framework code)<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>, and a bit too
“twitch gamer meme bro” for my personal tastes.</p>

<p>None of these things are bad; they don’t mesh with me.</p>

<p>In summary:</p>

<ol>
  <li>Neovim-the-tool doesn’t have a good value proposition for me as someone who
knows Vim quite well and has a large Vimscript-based config that works for
me.</li>
  <li>Neovim-the-community has some great work yet still grates on me.</li>
</ol>

<p>I continue to applaud their work to bring more people to the Vim ecosystem and
turn more people into contributors. I wish that community was more willing to
engage and collaborate with its sister, Vim.<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup></p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Lua seems more verbose to do the same thing when scripting editing tasks…
Vim’s command language has a long history borne of editing powertools. Sure,
its programmatic bits are odd, but you can learn those as you go and mostly
by reading the manual (like any other tool). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>For just one example: why have
<a href="https://github.com/Mofiqul/dracula.nvim">dracula.nvim</a> when
<a href="https://github.com/dracula/vim">dracula/vim</a> has gone out of its way to be
compatible with both editors? By all means, duplicate efforts… Or how about
<a href="https://github.com/tpope/vim-fugitive">fugitive</a> somehow having to
“compete” with <a href="https://github.com/f-person/git-blame.nvim">git-blame.nvim</a>
or <a href="https://github.com/FabijanZulj/blame.nvim">blame.nvim</a>? I’ve started a
whole conversation at work to try to understand
<a href="https://github.com/ThePrimeagen/harpoon/tree/harpoon2">harpoon2</a> because it
feels like “marks + <a href="https://github.com/tpope/vim-tbone">Tbone</a> + pick your
favorite way to spawn terminals”—in other words, learn the builtins first? <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Looking at you, <a href="https://www.lazyvim.org">LazyVim</a>. I know Vim pretty
well, and it took me several hours to figure out what you did to make my
brother-in-law’s Neovim open the Ex command line in a popup. Ugh. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Christian Clason is the Neovim maintainer I most frequently see on the Vim
mailing list, and I especially appreciate their efforts to stay in contact. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><category term="rants" /><summary type="html"><![CDATA[It turns out I might have only written this down once, so here it is.]]></summary></entry></feed>