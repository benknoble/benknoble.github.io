<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-01-04T20:08:19+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Day one on a new team</title><link href="https://benknoble.github.io/blog/2025/01/04/day1/" rel="alternate" type="text/html" title="Day one on a new team" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/04/day1</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/04/day1/"><![CDATA[<p>This is my shortlist of “Day 1 questions” for new teams to help me get up to
speed. In no particular order:</p>

<ol>
  <li>Domain &amp; Design</li>
  <li>Performance budget</li>
  <li>Expected scale factors</li>
  <li>Customer success</li>
  <li>Team norms and culture</li>
</ol>

<p>Examples drawn from real work.</p>

<h2 id="domain--design">Domain &amp; Design</h2>

<p>What do we do? How do we accomplish it?</p>

<p>This could be things like “manage case lifecycles via tenant-configured platform
services,” “keep data flowing with automatically managed Kafka instances,” or
“provide cost recommendations to clients by analyzing data ingested from their
systems.”</p>

<p>Ideally this comes with a domain breakdown of key terms. Examples: tokenized
plastic/PAN; drain/kill/rehydrate; Snowflake contract and connection details.</p>

<h2 id="performance-budget">Performance budget</h2>

<p>What is the budget? I want to know the total expectations and by subsystem (we
should have those, right?). How do we know if we are (not) meeting those
budgets? What characteristics do we measure (mean, stddev, IQR, p90, shape of
distribution<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, etc.) and what are they? What are our target specs end-to-end
(our hardware and our clients’ hardware, with a focus on the clients).</p>

<p>See <a href="https://infrequently.org/series/performance-inequality">Performance inequality on the
web</a> for what happens
when we get this right (or wrong).</p>

<h2 id="expected-scale-factors">Expected scale factors</h2>

<p>Scale factors are the things whose increase will be felt across the system.
Examples might be number of customers, objects, transactions, queries, etc.. How
have we designed to meet changing needs with scale? How do we know if we are
(not)?</p>

<p>We may be planning to reimplement and rearchitect if we can’t meet new scale
requirements, and that’s an acceptable answer as long as we understand the cost
and know when (preferably before) we hit those points.</p>

<h2 id="customer-success">Customer success</h2>

<p>How do we know what our customers need? How do we know if those needs are (not)
met? How do we know when something goes wrong and what it is? How do we get
side-by-side feedback? How is customer engagement or success incorporated back
into the product?</p>

<h2 id="team-norms-and-culture">Team norms and culture</h2>

<p>How do we communicate (meetings, chat, email)? How do we track work-to-do, work
done, priorities, and roadblocks?</p>

<p>How do we develop and deploy code or land it in main? This includes</p>

<ul>
  <li>important areas of review focus</li>
  <li>what PRs/pushes look like (and whether we use PRs or something else)</li>
  <li>commit hygiene standards (<a href="https://cbea.ms/git-commit/">an example set of hygiene
standards</a>, though it doesn’t cover scoping
changes or branch/PR hygiene)</li>
  <li>code quality (what’s automated and what’s not)</li>
  <li>local setup and development</li>
  <li>test data</li>
  <li>pairing/mobbing norms</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>We must not commit crimes of statistics, after all. Don’t assume unimodal,
Normal distributions. Please provide a measure of spread with a measure of
central tendency. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="software-engineering" /><summary type="html"><![CDATA[This is my shortlist of “Day 1 questions” for new teams to help me get up to speed. In no particular order:]]></summary></entry><entry><title type="html">Commit subject case in Git history</title><link href="https://benknoble.github.io/blog/2025/01/04/git-subject-case/" rel="alternate" type="text/html" title="Commit subject case in Git history" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/04/git-subject-case</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/04/git-subject-case/"><![CDATA[<p><a href="https://cbea.ms/git-commit/#capitalize">Some insist that commit subjects be
capitalized</a>. Does this actually happen
in practice?</p>

<p>Here’s a quick analysis of the Git source repository (see <a href="/blog/2019/09/11/fields/">my fields script</a> or <a href="/blog/2024/11/15/useful-utilities/#parallel-thoughts">use your own</a>):</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 44019 | 30636</span>
</code></pre></div></div>

<p>Looks roughly even, with a slight preference for lower case words (~59%). But if
we filter out automatic messages from merges and reverts:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="se">\</span>
      <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="nt">-e</span> Merge <span class="nt">-e</span> Revert | <span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 44019 | 11423</span>
</code></pre></div></div>

<p>Well, that’s just above 79% preference for lowercase.</p>

<p>Measurements taken from the branch I happened to be on, which is <a href="https://github.com/benknoble/git/commit/daee7636106ecf9a7eb445038bf87348e0105478">daee763610
(completion: repair config completion for Zsh,
2024-12-29)</a>.</p>

<p>Note that the total from the first report (74655) undercounts the number of
commits by about 1109 according to <code class="language-plaintext highlighter-rouge">git rev-list --count HEAD</code>. This is exactly
the number of commits output by</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 | <span class="nb">grep</span> <span class="nt">-cv</span> <span class="nt">-e</span> <span class="s1">'^[[:lower:]]'</span> <span class="nt">-e</span> <span class="s1">'^[[:upper:]]'</span>
</code></pre></div></div>

<p>Here’s a histogram of the starts that got omitted by my simple measure (remove
<code class="language-plaintext highlighter-rouge">-c</code> on the previous <code class="language-plaintext highlighter-rouge">grep</code> and pipe to <code class="language-plaintext highlighter-rouge">sort | uniq -c | sort -rn</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 892 [PATCH]
  36 .mailmap:
  19 [PATCH
  14 "git
  12 .gitignore:
   9 .gitattributes:
   4 __attribute__:
   4 2.36
   4 *:
   3 [patch]
   3 .mailmap
   3 --walk-reflogs:
   3 --pretty=format:
   3 *.sh:
   3 *.h:
   3 *.c
   3 *.[ch]:
   3 'git
   3 "log
   3 "Assume
   2 {fetch,upload}-pack:
   2 0th
   2 -u
   2 --dirstat:
   2 *.[ch]
   2 (trivial)
   2 $EMAIL
   2 "remote
   2 "rebase
   2 "make
   1 {upload,receive}-pack
   1 {reset,merge}:
   1 {lock,commit,rollback}_packed_refs():
   1 {cvs,svn}import:
   1 {builtin/*,repository}.c:
   1 `git
   1 _XOPEN_SOURCE
   1 _GIT_INDEX_OUTPUT:
   1 \n
   1 [fr]
   1 ?alloc:
   1 3%
   1 2.3.2
   1 .gitignore
   1 .github/workflows/main.yml:
   1 .github/PULL_REQUEST_TEMPLATE.md:
   1 ./configure.ac:
   1 -Wuninitialized:
   1 -Wold-style-definition
   1 --utf8
   1 --summary
   1 --prune
   1 --name-only,
   1 --format=pretty:
   1 --dirstat-by-file:
   1 --base-path-relaxed
   1 *config.txt:
   1 *.h
   1 (various):
   1 (squash)
   1 (short)
   1 (revert
   1 (encode_85,
   1 (cvs|svn)import:
   1 (Hopefully)
   1 'make
   1 'git-merge':
   1 'build'
   1 $GIT_COMMON_DIR:
   1 "test"
   1 "reset
   1 "needs
   1 "lib-diff"
   1 "init-db"
   1 "git-tag
   1 "git-push
   1 "git-merge":
   1 "git-fetch
   1 "git-apply
   1 "git-add
   1 "git"
   1 "format-patch
   1 "diff
   1 "current_exec_path"
   1 "core.sharedrepository
   1 "color.diff
   1 "checkout
   1 "branch
   1 "blame
   1 "assume
   1 "add
   1 
</code></pre></div></div>

<p>Just for kicks, if I try the <em>2nd</em> word of the commit message in those cases:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 3 |
    <span class="nb">grep</span> <span class="nt">-v</span> <span class="nt">-e</span> <span class="s1">'^[[:lower:]]'</span> <span class="nt">-e</span> <span class="s1">'^[[:upper:]]'</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 491 | 567</span>
</code></pre></div></div>

<p>We’re still undercounting by 51, but the above doesn’t modify our results much
(essentially still within the rounding I used). The 51 commits ought to be in
the noise. Even attributing them all as upper case, the rounded percentages
don’t change.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="statistics" /><summary type="html"><![CDATA[Some insist that commit subjects be capitalized. Does this actually happen in practice?]]></summary></entry><entry><title type="html">Roundup of Mother Jones articles from the 2025 January issue</title><link href="https://benknoble.github.io/blog/2025/01/02/mj-roundup/" rel="alternate" type="text/html" title="Roundup of Mother Jones articles from the 2025 January issue" /><published>2025-01-02T00:00:00+00:00</published><updated>2025-01-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/02/mj-roundup</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/02/mj-roundup/"><![CDATA[<p>Here’s my reactions to a few articles from the January 2025 issue of <a href="https://www.motherjones.com"><em>Mother
Jones</em> magazine</a>. The issue doesn’t look linked
online yet; I read it through Apple News.</p>

<h2 id="settling-the-score-by-emi-nietfeld">“Settling the Score” by Emi Nietfeld</h2>

<p>Nietfeld examines the contradictory popularity and flaws of Bessel van der
Kolk’s <em>The Body Keeps the Score</em>. In particular, Nietfeld points out both the
mischaracterization of academic research (a gentle way to say “lies”) and the
shaming of survivors broken bodies which, according to the text, may be
irreparable.</p>

<p>Nietfeld suggests alternative texts, which I want to collect here for my own
future reference:</p>

<ul>
  <li><em>Trauma &amp; Recovery</em> by Judith Herman</li>
  <li><em>What My Bones Know</em> by Stephanie Foo</li>
  <li><em>The End of Trauma</em> by George A. Bonanno</li>
</ul>

<p>My own thoughts: trauma may (and probably does) live in the body, <strong>and</strong> CBT
(Cognitive Behavioral Therapy) is effective, <strong>and</strong> victims are not irreparably
damaged (healing is possible).</p>

<h2 id="hog-wild-by-miranda-lipton">“Hog Wild” by Miranda Lipton</h2>

<p>According to Lipton’s research, meat prices are up not (only) because of
inflation: Agri Stats effectively brokers data-sharing between competitors in a
way that creates price-fixing without the industry leaders’ direct contact. The
DoJ sued in 2023 alleging violation of the Sherman Antitrust Act.</p>

<p>The arrangement is just like the <a href="https://www.justice.gov/opa/pr/justice-department-sues-realpage-algorithmic-pricing-scheme-harms-millions-american-renters">RealPage price-fixing for landlords to rig
rents</a>,
which I think I first learned about from <a href="https://pluralistic.net/2024/07/24/gouging-the-all-seeing-eye/#i-spy">Cory Doctorow’s article on
surveillance
pricing</a>.</p>

<p>Both Doctorow and Lipton connect the dots that centralized data sharing and
price “recommendations,” combined with lax antitrust regulation due to Reagan
and Milton Friedman and with conglomerate mergers (4 companies control 85% of
the meat supply chain), leads inexorably to controlled cartel pricing.</p>

<p>Fortunately, the data sharing guidelines which permitted the old behavior were
rescinded in 2023, writes Lipton: so the DoJ can go after Agri Stats, too.</p>

<p>You might not know that this follows a familiar cycle: the Sherman Antitrust Act
dates to 1890. The Packers and Stockyards Act of 1921 prohibited unfair pricing
in meat-packing as a direct consequence of monopolistic behavior!</p>

<p>It’s time to re-enforce existing laws. Loosening them 4 decades ago led to
predictable consequences.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="news" /><category term="monopoly" /><summary type="html"><![CDATA[Here’s my reactions to a few articles from the January 2025 issue of Mother Jones magazine. The issue doesn’t look linked online yet; I read it through Apple News.]]></summary></entry><entry><title type="html">Scraping XML sitemaps with Racket</title><link href="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/" rel="alternate" type="text/html" title="Scraping XML sitemaps with Racket" /><published>2024-12-02T00:00:00+00:00</published><updated>2024-12-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/12/02/advent-of-racket</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/"><![CDATA[<p>Day 2 of “Advent of Racket”</p>

<h2 id="the-project">The project</h2>

<p>Many of the smartest people I know keep an external cortex or exobrain: notes, a
<a href="https://github.com/benknoble/wiki-md">personal wiki</a>, or even a blog. Inspired
by <a href="https://pluralistic.net/2021/05/09/the-memex-method/">Cory Doctorow’s “memex
method”</a> and a
<a href="https://con.racket-lang.org">RacketCon</a> question, I’m writing again when the
mood strikes—see the uptick in posts since the middle of this year.</p>

<p>The advantage of a memex or external digital cortex is several-fold. The act of
setting my thoughts out for an audience helps me to elucidate what otherwise
might be a 10-word bullet, filed away and forgotten about. For Cory Doctorow, it
keeps information connected in a tangled web that eventually crystallizes or
nucleates into a bigger form. (<a href="/writings/blankboards/">Sound familiar? I’ve written about how my brain
often works that way, too.</a>)</p>

<h3 id="learning-from-the-past-to-look-towards-the-future">Learning from the past to look towards the future</h3>

<p>If you made it this far, you’re probably wandering what this has to do with
scraping sitemaps… as Cory Doctorow writes, “systematically reviewing your older
work” is “hugely beneficial.” Looking at the patterns (wrong and right) is a
“useful process of introspection” to improve our abilities to “spot and avoid”
pitfalls.</p>

<p>Doctorow revisits “this day in history” on the major anniversaries:</p>

<blockquote>
  <p>For more than a decade, I’ve revisited “this day in history” from my own
blogging archive, looking back one year, five years, ten years (and then,
eventually, 15 years and 20 years). Every day, I roll back my blog archives to
this day in years gone past, pull out the most interesting headlines and
publish a quick blog post linking back to them.</p>

  <p>This structured, daily work of looking back on where I’ve been is more
valuable to helping me think about where I’m going than I can say.</p>
</blockquote>

<p>This review idea fascinated me. While I don’t have the online tenure that
Doctorow does, I do have some old writing. So the idea to add a program to my
daily life to show me that writing was born.</p>

<p>The program should take a month and day (defaulting to the current) and show me
<em>every</em> post that I’ve written on that day. URLs are sufficient; I can click
them or pipe them to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code>. I don’t need to worry about the year, at
least not yet. It would be an easy modification to add later though. Since I
publish an XML sitemap on my blog, we’ll scrape that rather than the raw HTML.</p>

<h2 id="the-code">The code</h2>

<p>The most up-to-date version of the script will always be in my <a href="https://github.com/benknoble/Dotfiles">Dotfiles</a>; <a href="https://github.com/benknoble/Dotfiles/blob/4f5f9cde16829914fff1ad43965f2e3e46e52c50/links/bin/blog-posts-on">here’s a permalink to the version at
time of
writing</a>.</p>

<p>We start with a stanza to make this executable by the shell but written in
Racket (and we make sure to let Vim know what to do with it, since my
<a href="https://github.com/benknoble/vim-racket/blob/master/ftdetect/racket.vim">filetype-detection
code</a>
for Racket <a href="https://github.com/benknoble/vim-racket/issues/5">doesn’t work with <code class="language-plaintext highlighter-rouge">#!</code> lines
yet</a>):</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>
</code></pre></div></div>

<p>Now we require a few libraries from the main distribution; that means this
program should work with most non-minimal Racket installations without depending
on other packages being installed:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>
</code></pre></div></div>

<p>We need to know the month and day to use for our scraping; as mentioned, we’ll
default to the current day but optionally parse values out of the command line:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>
</code></pre></div></div>

<p>The duplication is a bit bothersome, but in a ~40-line program I’m not
concerned for the moment. It <em>is</em> important that we pad the dates to match my
site’s URL format, which uses 2-digit months and days everywhere.</p>

<p>Next, we fire off a request to the sitemap. Notice the lack of error handling:
this doesn’t need to be production grade, so we’ll assume the request succeeds.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>
</code></pre></div></div>

<p>Now <code class="language-plaintext highlighter-rouge">response</code> is an <a href="https://docs.racket-lang.org/reference/ports.html#%28tech._input._port%29"><em>input
port</em></a>:
we can read from it, but we haven’t materialized a full (byte)string yet. We
know it contains an XML document, so let’s read it as XML, extract the main
document, and turn that into an
<a href="https://docs.racket-lang.org/xml/index.html#%28def._%28%28lib._xml%2Fprivate%2Fxexpr-core..rkt%29._xexpr~3f%29%29">xexpr</a>:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>
</code></pre></div></div>

<p>Almost done: we can query the document for the URLs (which happen to be <code class="language-plaintext highlighter-rouge">loc</code>
elements) and filter them by our month-day combo:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>
</code></pre></div></div>

<p>Note how useful <code class="language-plaintext highlighter-rouge">filter-map</code> is with <code class="language-plaintext highlighter-rouge">regexp-match</code>: <code class="language-plaintext highlighter-rouge">filter-map</code> discards any
<code class="language-plaintext highlighter-rouge">#f</code> results from the mapping function, while <code class="language-plaintext highlighter-rouge">regexp-match</code> returns <code class="language-plaintext highlighter-rouge">#f</code> for
any inputs that don’t match. Simultaneously it transforms matching inputs to
describe the matches.</p>

<p>Finally, we display all the (newline-separated) results! We use <code class="language-plaintext highlighter-rouge">first</code> to
extract the full original input string because the earlier <code class="language-plaintext highlighter-rouge">regexp-match</code>
produces <code class="language-plaintext highlighter-rouge">(list full-match sub-group ...)</code>; our <code class="language-plaintext highlighter-rouge">full-match</code> is the whole string
because we bracket <code class="language-plaintext highlighter-rouge">month/day</code> with <code class="language-plaintext highlighter-rouge">.*</code> patterns.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>

<p>And that’s a wrap!</p>

<h3 id="use">Use</h3>

<p>In practice, I try to run <code class="language-plaintext highlighter-rouge">blog-posts-on</code> (the name of the script) once a day.
Sometimes I forget, so I build up a range of month/day combinations with
something like (Zsh):</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print <span class="nt">-l</span> <span class="nt">--</span> 11<span class="se">\ </span><span class="o">{</span>17..22<span class="o">}</span> | xargs <span class="nt">-L1</span> blog-posts-on
</code></pre></div></div>

<p>That gets me the posts for November 17th through 22nd, for example. If I want to
open them all immediately, I pipe that to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code> as mentioned
(substitute <code class="language-plaintext highlighter-rouge">xdg-open</code> or equivalent on your operating system).</p>

<h3 id="full-code">Full code</h3>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>

<span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Day 2 of “Advent of Racket”]]></summary></entry><entry><title type="html">Sapling Cage</title><link href="https://benknoble.github.io/blog/2024/11/27/sapling-cage/" rel="alternate" type="text/html" title="Sapling Cage" /><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/27/sapling-cage</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/27/sapling-cage/"><![CDATA[<p>My thoughts on Margaret Killjoy’s <em>Sapling Cage</em>.</p>

<h2 id="balance-in-all-things">Balance in all things</h2>

<p>Reading <em>Sapling Cage</em> took me back to reading fantasy as a preteen. Simply
written for a younger audience, it’s a page-turner for (nominally) grown adults,
too. Killjoy hooked me in to a world in the grips of dynamic power struggles
without complex dialogue, elaborate descriptions, or impossible backdrops. In
fact, except for the violence and a certain caldera, it all feels rather
mundane. This leaves room for the excitement of the coming of age tale, the
making of friends, the fear of discovery.</p>

<h2 id="words-actions-magic">Words, actions, magic</h2>

<p>Each of these has power. A witch must use all three.</p>

<p>Indeed, our main character Lorel observes and experiences violence for what it
is: hard, traumatic, gory, mournful. Yet she also experiences other powerful
actions: tentative allies unite against a threat; witches defend and enfold
someone who is other; a knight speaks for the weak.</p>

<p>Even on the very beginning of a journey into magic, we all learn something about
finding our power.</p>

<h2 id="as-a-cisgender-man">As a cisgender man</h2>

<p>I witnessed through Killjoy’s narrative a story of complexity: growing up as a
boy while being a girl. The main character struggles to figure out what to make
of her body—would it be easier if it matched the expectations of others? Would
such a change make her less attractive to a crush? Is this not her body,
imperfect as it is? <em>Is it ok not to like her body?</em></p>

<p>Moreover, she navigates fear and uncertainty: the fear of being found out, which
might be deadly. The uncertainty of who she can trust. Simultaneously her heart
swells with joy each time she is “girl” or “she.” Like Lorel’s friends (and even
rivals), we can all listen, learn, and love.</p>

<p>Killjoy reminds me that these questions—Lorel’s questions—are worth asking
of ourselves, and that we all experience their answers differently.</p>

<p>I highly recommend <em>Sapling Cage</em> (and my thanks to Cory Doctorow, whose
recommendation put it on my reading list).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="books" /><summary type="html"><![CDATA[My thoughts on Margaret Killjoy’s Sapling Cage.]]></summary></entry><entry><title type="html">Server-sent events with Racket</title><link href="https://benknoble.github.io/blog/2024/11/23/racket-sse/" rel="alternate" type="text/html" title="Server-sent events with Racket" /><published>2024-11-23T00:00:00+00:00</published><updated>2024-11-23T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/23/racket-sse</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/23/racket-sse/"><![CDATA[<p>A small amount of server-side Racket and client-side JavaScript give me a
passable version of a reactive front-end.</p>

<h2 id="background">Background</h2>

<p>In my <a href="/workshops/14th-racket-con/">talk for 14th RacketCon</a> I
mentioned that the Frosthaven Manager can spawn a web-server for my friends and
players to interact with the app on their mobile devices. I run the entire
program on my machine, so all the state is stored in-process in one place. Edits
in the desktop GUI are propagated to my players web pages live, and their
actions translate back to the GUI in turn.</p>

<p>There’s no JavaScript framework on either the back-end or front-end. So how does
it all work?</p>

<p>There are 3 pieces to the puzzle:</p>

<ol>
  <li>The web-server does all the HTML generation: it embeds <code class="language-plaintext highlighter-rouge">fetch</code> calls in
<code class="language-plaintext highlighter-rouge">onclick</code> handlers that send POST requests back to the server, which the
server translates into actions the rest of the program knows how to handle
(but which, as mentioned in the talk, are shunted back to the GUI execution
loop rather than executed in the concurrent web-server handler threads). So
while my players mostly <em>see</em> the rendered HTML content returned by the
servers primary route, it actually supports a limited kind of
<code class="language-plaintext highlighter-rouge">URLSearchParams</code>-backed API. If you know what routes to hit, you could write
your own client to trigger game events. I’ve done so with
<a href="https://hurl.dev"><code class="language-plaintext highlighter-rouge">hurl</code></a> when playing with new features just to try it.</li>
  <li>Because I’m using <a href="https://docs.racket-lang.org/gui-easy/index.html">GUI
Easy</a>, all my game state is
<a href="https://docs.racket-lang.org/gui-easy/index.html#%28part._.Observables%29"><em>observable</em></a>.
This gives me a simple hook to subscribe to all the changes in my game’s
state, <a href="https://github.com/benknoble/frosthaven-manager/commit/7b8b4e7ed558454f373d296ca501c2fc3484776b">though it risks being too
fine-grained</a>
and I’ve been considering other options for generating notifications of
game-level events. Whatever mechanism there is, the web-server knows when
state has changed and it ought to propagate those changes to clients.</li>
  <li>The client and server agree to a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent
event</a>
protocol: this does require JavaScript enabled on the client (as do the click
handlers above). The protocol allows the server to retain a communication
channel to the client, which the client can use to update its view.</li>
</ol>

<p>This post focuses on the server-sent event implementation, or primarily the
latter 2 pieces.</p>

<p><strong>Note</strong>: Rather than embed the full code in those post, I’m going to link to
the implementation as it was at time of writing. Follow the links to get the
full details.</p>

<h2 id="server-sent-events">Server-sent events</h2>

<blockquote>
  <p>With server-sent events, it’s possible for a server to send new data to a web
page at any time, by pushing messages to the web page.
(<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">MDN</a>)</p>
</blockquote>

<p>SSEs are one-way connections from server to client. Clients point a standard
JavaScript API <code class="language-plaintext highlighter-rouge">EventSource</code> at a URL that will produce a SSE-compatible
response and then attach event listeners. These listeners can operate over
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#listening_for_message_events">generic
events</a>
or <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#listening_for_custom_events">named
events</a>.
Messages can have <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#data">arbitrary data
fields</a>
which the client must parse to decide how to use.</p>

<p>The server implements SSEs by responding with the correct MIME type and raw
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format">response
format</a>.</p>

<h3 id="my-sse-protocol-for-the-frosthaven-manager">My SSE protocol for the Frosthaven Manager</h3>

<p>Before we look at implementation details, let’s get a grasp on the fundamentals
of the protocol my web-server uses atop SSEs.</p>

<ul>
  <li>All events use JSON as the interchange format for <code class="language-plaintext highlighter-rouge">data</code> fields. Racket is
capable of emitting standard JSON and JavaScript of parsing it, so this
simplifies communication.</li>
  <li>Events that manipulate the DOM <em>should</em> contain an HTML id pointing to the
node to manipulate. This simplifies the client code for finding the right node
and requires the server to consistently tag modifiable nodes with an
identifier (<code class="language-plaintext highlighter-rouge">id</code> attribute).</li>
  <li>Events that manipulate the DOM <em>should</em> contain strings that encode HTML that
can replace the <code class="language-plaintext highlighter-rouge">innerHTML</code> as needed.</li>
</ul>

<p>The last point is important: it avoids performing duplicate calculations in the
client (when a player’s HP changes, we send the new number, not an event
requesting that the HP be incremented or decremented), which makes keeping the
state in sync more reliable.</p>

<p>The simplest events in my protocol are <code class="language-plaintext highlighter-rouge">number</code> and <code class="language-plaintext highlighter-rouge">text</code>: they send an id and
a number or string that should replace the named node’s <code class="language-plaintext highlighter-rouge">innerHTML</code>. They
actually have nearly identical <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/static/events.js#L64-L73">client
implementations</a>
and <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L890-L899">server
implementations</a>.</p>

<p>Other events are more complicated and outside the scope of this article. As an
example, the <code class="language-plaintext highlighter-rouge">player</code> event is triggered when a player object changes: ignoring
the summon data, it receives an HTML id, a mapping of sub-components to HTML
strings, and a complete HTML node. The complete node is used if the player
doesn’t already exist, allowing it to be inserted wholesale into the display.
Otherwise, we update the sub-nodes based on the mapping of HTML strings. The
<code class="language-plaintext highlighter-rouge">monster-group</code> event is similar.</p>

<h3 id="implementation-details">Implementation Details</h3>

<p>As we said earlier, the <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/static/events.js#L1">client opens a new event
source</a>
and attaches event handlers. We <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L320">include the script on the main
page</a>.
Sending events is the server’s responsibility.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">evtSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EventSource</span><span class="p">(</span><span class="dl">"</span><span class="s2">events</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">evtSource</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</code></pre></div></div>

<p>The server subscribes to the GUI observables<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>: when they change, the subscribers
place structured data in a <a href="https://docs.racket-lang.org/alexis-multicast/index.html">multicast
channel</a>
(<a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L181-L188">example</a>).
We need a multicast channel because we create one per server (usually just one),
but each client request handler needs to be able to be able to read from it
(usually one per event source connection).</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">ch</span> <span class="p">(</span><span class="nf">make-multicast-channel</span><span class="p">))</span>
<span class="p">(</span><span class="nf">obs-observe!</span> <span class="nv">@state</span>
              <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">state</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">multicast-channel-put</span> <span class="nv">ch</span> <span class="p">(</span><span class="nf">state-event</span> <span class="nv">state</span><span class="p">))))</span>
</code></pre></div></div>

<p>Then, the server <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L254">establishes a route which implements the
SSEs</a>.
This is the same path that forms part of the URL that the client will connect
to. The route’s implementation <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L816-L825">responds with appropriate
headers</a>.
It also <a href="https://docs.racket-lang.org/web-server/http.html#%28def._%28%28lib._web-server%2Fhttp%2Fresponse-structs..rkt%29._response%2Foutput%29%29">gets an output
port</a>
it can use to write to the client.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">((</span><span class="nf">event-source</span> <span class="nv">ch</span><span class="p">)</span> <span class="nv">_req</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">receiver</span> <span class="p">(</span><span class="nf">make-multicast-receiver</span> <span class="nv">ch</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">response/output</span>
    <span class="nt">#:headers</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Cache-Control"</span> <span class="o">#</span><span class="s">"no-store"</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Content-Type"</span> <span class="o">#</span><span class="s">"text/event-stream"</span><span class="p">)</span>
                    <span class="c1">;; Don't use Connection in HTTP/2 or HTTP/3, but Racket's</span>
                    <span class="c1">;; web-server is HTTP/1.1 as confirmed by</span>
                    <span class="c1">;; `curl -vso /dev/null --http2 &lt;addr&gt;`.</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Connection"</span> <span class="o">#</span><span class="s">"keep-alive"</span><span class="p">)</span>
                    <span class="c1">;; Pairs with Connection; since our event source sends data</span>
                    <span class="c1">;; every 5 seconds at minimum, this 10s timeout should be</span>
                    <span class="c1">;; sufficient.</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Keep-Alive"</span> <span class="o">#</span><span class="s">"timeout=10"</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">sse-output</span> <span class="nv">receiver</span><span class="p">)))</span>
</code></pre></div></div>

<p>The main loop of the response handler is to wait on the channel to produce data:
when it does, <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L833">a separate
function</a>
transforms that data into SSE format and shoves it through the port. If we don’t
get a response in time, we send a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format">comment to prevent connection
timeout</a>.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">see-output</span> <span class="nv">receiver</span><span class="p">)</span>
  <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">out</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let</span> <span class="nv">loop</span> <span class="p">()</span>
      <span class="p">(</span><span class="k">cond</span>
        <span class="p">[(</span><span class="nb">sync/timeout</span> <span class="mi">5</span> <span class="nv">receiver</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="nf">event-stream</span> <span class="nv">out</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">else</span> <span class="p">(</span><span class="nb">displayln</span> <span class="s">":"</span> <span class="nv">out</span><span class="p">)])</span>
      <span class="p">(</span><span class="nf">loop</span><span class="p">))))</span>
</code></pre></div></div>

<p>That’s all there is to it! I’m hoping to find a way to extract the two pieces
(client-side code and server-side implementation) into a library for other
Racket applications to use to implement server-side events more easily. Ideally
it will handle the basics of SSEs while remaining agnostic to how the
application generates and handles events. We <em>might</em> be able to be
concurrency-agnostic, though: while Racket’s <code class="language-plaintext highlighter-rouge">sync</code> is generic, most
applications probably need a single-producer multi-consumer channel. Still,
allowing any event that produces data a consumer can transform into SSE-data
might work and allow other patterns.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>For performance reasons, some subscribers spawn a thread that sends the
message. Since GUI Easy subscribers execute serially, moving expensive work
out of the main loop quickly can help avoid bottlenecks. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="web" /><summary type="html"><![CDATA[A small amount of server-side Racket and client-side JavaScript give me a passable version of a reactive front-end.]]></summary></entry><entry><title type="html">Tip: use symmetric differences with git-range-diff</title><link href="https://benknoble.github.io/blog/2024/11/15/til-range-diff/" rel="alternate" type="text/html" title="Tip: use symmetric differences with git-range-diff" /><published>2024-11-15T00:00:00+00:00</published><updated>2024-11-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/15/til-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/15/til-range-diff/"><![CDATA[<p>I’ve <a href="/blog/2024/10/04/copy-range-diff/">been using <code class="language-plaintext highlighter-rouge">range-diff</code> for a while now</a>, but I’d been stuck with a long input
method for arguments. Today I learned a shortcut.</p>

<h2 id="primer">Primer</h2>

<p>Recall that <code class="language-plaintext highlighter-rouge">git range-diff</code> looks at the differences between two ranges:
commonly, we pass the two ranges explicitly; or, we can pass a base and two tips
to have the same effect as <code class="language-plaintext highlighter-rouge">&lt;base&gt;..&lt;tip1&gt; &lt;base&gt;..&lt;tip2&gt;</code>. The <a href="https://git-scm.com/docs/git-range-diff#Documentation/git-range-diff.txt-ltbasegtltrev1gtltrev2gt">manual
explaining this notation</a> gives the following example: “after
rebasing a branch <code class="language-plaintext highlighter-rouge">my-topic</code>, <code class="language-plaintext highlighter-rouge">git range-diff my-topic@{u} my-topic@{1}
my-topic</code> would show the differences introduced by the rebase.” So I’ve been
writing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{u} @{1} @
</code></pre></div></div>

<p>and similar variants for several months. I actually recently switched to
<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault"><code class="language-plaintext highlighter-rouge">push.default = current</code></a> where my <code class="language-plaintext highlighter-rouge">@{upstream}</code> is the branch I
want to pull from (often some version of <code class="language-plaintext highlighter-rouge">origin/main</code> or <code class="language-plaintext highlighter-rouge">upstream/main</code>) and
Git provides (after I push) <code class="language-plaintext highlighter-rouge">@{push}</code> as the branch I’m pushing to (<em>e.g.</em>,
<code class="language-plaintext highlighter-rouge">origin/topic</code>). With this layout, I run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{u} @{push} @
</code></pre></div></div>

<p>(There is no abbreviation for <code class="language-plaintext highlighter-rouge">@{push}</code>, sadly.)</p>

<h2 id="symmetric-diff">Symmetric diff</h2>

<p>Now, I knew that <code class="language-plaintext highlighter-rouge">git range-diff</code> also accepts a <a href="https://git-scm.com/docs/git-range-diff#Documentation/git-range-diff.txt-ltrev1gt82308203ltrev2gt">three-dot symmetric difference
notation</a>, so</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff &lt;left&gt;...&lt;right&gt;
    -- becomes --&gt;
g range-diff &lt;right&gt;..&lt;left&gt; &lt;left&gt;..&lt;right&gt;
</code></pre></div></div>
<p>But in the past, especially prior to <code class="language-plaintext highlighter-rouge">push.default = current</code>, I had not found
this terribly useful. I was probably holding it wrong.</p>

<p>Today, I write (before pushing)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{push}... | copy-range-diff
</code></pre></div></div>

<p>and all is well. Use <code class="language-plaintext highlighter-rouge">git log [--oneline] --graph --boundary --left-right --cherry-mark
@{push}...</code> to get a feel for what ranges are being compared.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve been using range-diff for a while now, but I’d been stuck with a long input method for arguments. Today I learned a shortcut.]]></summary></entry><entry><title type="html">Little utilities</title><link href="https://benknoble.github.io/blog/2024/11/15/useful-utilities/" rel="alternate" type="text/html" title="Little utilities" /><published>2024-11-15T00:00:00+00:00</published><updated>2024-11-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/15/useful-utilities</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/15/useful-utilities/"><![CDATA[<p>Like many other full-time shell users, I write small utilities to add to my
toolbox. Let’s compare.</p>

<p><strong>Update 2024 November 17:</strong> Add notes on <code class="language-plaintext highlighter-rouge">git-q</code> and <code class="language-plaintext highlighter-rouge">git-vee</code>.</p>

<h2 id="parallel-thoughts">Parallel thoughts</h2>

<p>I stumbled on <a href="https://blog.plover.com/">MJD’s blog</a> via a <a href="https://git.github.io/rev_news/">Git Rev
News</a> article from last year and found <a href="https://blog.plover.com/prog/runN.html">a post
about little utilities</a>. Clearly great
minds think alike:</p>

<ul>
  <li>MJD explains an <code class="language-plaintext highlighter-rouge">f</code> command to extract a single field. It’s written in Perl. I
have a <a href="/blog/2019/09/11/fields/"><code class="language-plaintext highlighter-rouge">fields</code> script</a> that uses
dynamically-generated AWK to extract as many fields as you want. It’s a longer
name but useful in more situations.</li>
  <li>The post goes on to mention <code class="language-plaintext highlighter-rouge">runN</code>, a (mostly sequential but sometimes
parallel) command runner that replaces some simple loops. But this is a
straightforward variation on <a href="https://joeyh.name/code/moreutils/">moreutils</a>
<code class="language-plaintext highlighter-rouge">parallel</code> command<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, so that’s what I use when I remember to.</li>
</ul>

<h2 id="git">Git</h2>

<p>In <a href="https://blog.plover.com/prog/git-q.html">another post</a>, MJD mentions two Git
utilities:</p>

<ul>
  <li>Using <code class="language-plaintext highlighter-rouge">git vee</code> as a wrapper around <code class="language-plaintext highlighter-rouge">git log</code> over a symmetric difference
shows how branches have diverged. <a href="https://github.com/benknoble/Dotfiles/commit/e0ca3d3402b00edb8ea3580afa1d171d07b6e246">My take, <code class="language-plaintext highlighter-rouge">git
div</code></a>
infers the arguments that I would normally pass (like <code class="language-plaintext highlighter-rouge">base...upstream</code>) and
allows to specify them, but the inference is intentionally unsophisticated. I
consider this a companion to <code class="language-plaintext highlighter-rouge">git sbup</code> (<code class="language-plaintext highlighter-rouge">git show-branch HEAD HEAD@{upstream}
HEAD@{push}</code>).</li>
  <li>Query object information with <code class="language-plaintext highlighter-rouge">git q</code>: <a href="https://github.com/benknoble/Dotfiles/commit/79a27b666323494b0fdcc82dbb1d0b5f73b556e2">my
take</a>
is pure shell and only runs a single subprocess rather than one for each ref.
This collapses equivalent refs but is ~50x more performant (see hyperfine
output in the commit).</li>
</ul>

<p>In the words of moreutils: there’s room for more little unix utilities!</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>The <a href="https://joeyh.name/code/moreutils/">moreutils</a> syntax and manual I
vastly prefer to <a href="https://savannah.gnu.org/projects/parallel/">GNU <code class="language-plaintext highlighter-rouge">parallel</code></a>,
although GNU parallel supports niceties like a job log, retries, output
syndication, etc. For “heavy lifting,” I am forced to use GNU parallel (I
try to write detailed notes on expected uses then), but for short one-liners
I prefer the moreutils version. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="shell" /><summary type="html"><![CDATA[Like many other full-time shell users, I write small utilities to add to my toolbox. Let’s compare.]]></summary></entry><entry><title type="html">Perspective on software development models</title><link href="https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective/" rel="alternate" type="text/html" title="Perspective on software development models" /><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective/"><![CDATA[<p><strong>Update 2024 November 22: I may have some misunderstandings about trunk-based
development, and this article needs a (as-of-yet incomplete) rewrite as a
result.</strong></p>

<p>Pending said rewrites, the <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">main content</a> has been removed as a “draft.”
You can find the <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">original post</a> on <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">GitHub</a>.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Update 2024 November 22: I may have some misunderstandings about trunk-based development, and this article needs a (as-of-yet incomplete) rewrite as a result.]]></summary></entry><entry><title type="html">Copying a git-range-diff to GitHub</title><link href="https://benknoble.github.io/blog/2024/10/04/copy-range-diff/" rel="alternate" type="text/html" title="Copying a git-range-diff to GitHub" /><published>2024-10-04T00:00:00+00:00</published><updated>2024-10-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/10/04/copy-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/10/04/copy-range-diff/"><![CDATA[<p>I’ve been using <code class="language-plaintext highlighter-rouge">git range-diff</code> for the past few months to explain changes
between versions of a patch series, such as different versions of a branch after
responding to review comments on a Pull Request. This post explains how I use
post the output for Markdown-ish consumption on GitHub.</p>

<h2 id="primer">Primer</h2>

<p>If you didn’t know, <code class="language-plaintext highlighter-rouge">git range-diff</code> is the standard way in Git to document
changes between versions of a patch series such as you might find sent to a
development mailing list. For example, <code class="language-plaintext highlighter-rouge">git format-patch</code> can include it
automatically in the email so that, when responding to review comments with a
new version, reviewers understand what’s changed.</p>

<p>This all seems only relevant to email-driven workflows, but I argue that it is
also useful for GitHub- or other web- driven workflows. For example: I work on a
branch and submit a Pull Request on GitHub. After some review comments, I may
create some <code class="language-plaintext highlighter-rouge">--fixup</code> commits and <code class="language-plaintext highlighter-rouge">rebase --autosquash</code> them in, perhaps editing
commit messages, or make any number of other changes. When the time comes to
<code class="language-plaintext highlighter-rouge">push --force-with-lease --force-if-includes</code>, the only recourse my reviewers
have to understand the changes is GitHub’s “View changes” button, which attempts
a textual diff between the files at the old and new branch tip.</p>

<p>Yet a range-diff can capture so much more! Consider, for example, this
range-diff from a Racket PR I submitted:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1:  907d3ea366 = 1:  35c19f1e83 docs: capitalize the noun Git
2:  665e037505 ! 2:  6088cd1567 docs: mention the Vi command to add sections
    @@ pkgs/racket-doc/scribblings/style/textual.scrbl: read code on monitors that acco
     +So, when you create a file, add a line with @litchar{;; } followed by ctrl-U 99
     +and @litchar{-}. @margin-note*{In Vi, the command is 99a- followed by Esc.} When
     +you separate "sections" of code in a file, insert the same line. These lines
    -+help both writers and readers to orient themselves in a file. In scribble use
    ++help both writers and readers to orient themselves in a file. In Scribble use
     +@litchar|{@; }| as the prefix.

      @; -----------------------------------------------------------------------------
3:  808676897e = 3:  1e7b35da0a docs: link fx+ and unsafe-fx+
4:  ca7d2a2a56 = 4:  c3e32a5afa docs: correct Git pull command
5:  1108c95343 = 5:  372bbd4ad5 docs: unquote "merge commit"
6:  1374b3b095 &lt; -:  ---------- docs: italicize "e.g."
7:  8f3f1cd517 = 6:  e48525eeb7 docs: correct macro body
-:  ---------- &gt; 7:  38b3c0a75e docs: make explicit the convention for Latin
</code></pre></div></div>

<p>GitHub won’t show you this difference: I capitalized a word in an old commit
message, removed the commit that italicized Latin abbreviations and added one
that clarified said convention. I prefer to provide my reviewers with this
information to help them understand the changes I’ve made (and to help future
readers who may be curious, though I admit this is unlikely in most cases).</p>

<h2 id="sharing-a-range-diff-in-markdown-format">Sharing a range-diff in Markdown format</h2>

<p>A range-diff can get quite large if there are substantial code
changes—arguably, the patch series should become a new branch/PR at such a
point, but that is not often how things operate in practice. I used to paste
range-diffs in code blocks like you see above, but with length and GitHub’s
comment/review interface they became unwieldy.</p>

<p>Instead, I’ve started pasting them inside an HTML <code class="language-plaintext highlighter-rouge">details</code> block so that they
may be collapsed, summarized, and expanded as desired. I often did this by hand,
but <a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/copy-range-diff">here’s the script I now use called <code class="language-plaintext highlighter-rouge">copy-range-diff</code></a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>

<span class="o">{</span>
  <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s1">'&lt;details&gt;&lt;summary&gt;range-diff:&lt;/summary&gt;'</span> <span class="s1">''</span> <span class="s1">'```'</span>
  <span class="nb">cat
  printf</span> <span class="s1">'%s\n'</span> <span class="s1">'```'</span> <span class="s1">''</span> <span class="s1">'&lt;/details&gt;'</span>
<span class="o">}</span> | pbcopy
</code></pre></div></div>

<p>This script reads standard in and pipes a modified version of it to a clipboard
command (Linux users probably prefer an <code class="language-plaintext highlighter-rouge">xsel</code> variant). Placed on the clipboard
after <code class="language-plaintext highlighter-rouge">git range-diff … | copy-range-diff</code> is an HTML <code class="language-plaintext highlighter-rouge">details</code> block containing
a Markdown code-fence which is easy to paste into GitHub or similar interfaces.
Sometimes I will add a short summary to the summary tag; other times, I leave
just the mention of a range-diff.</p>

<p>A small tweak should work for pure HTML output so that instead of triple-tick
Markdown fences we emit <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> tags.</p>

<details><summary>Here's the earlier range-diff, in a details block</summary>

<!-- For some reason, Jekyll doesn't know how to process Markdown fences here,
     so trick it with HTML. -->

<pre class="highlight">
<code>1:  907d3ea366 = 1:  35c19f1e83 docs: capitalize the noun Git
2:  665e037505 ! 2:  6088cd1567 docs: mention the Vi command to add sections
    @@ pkgs/racket-doc/scribblings/style/textual.scrbl: read code on monitors that acco
     +So, when you create a file, add a line with @litchar{;; } followed by ctrl-U 99
     +and @litchar{-}. @margin-note*{In Vi, the command is 99a- followed by Esc.} When
     +you separate "sections" of code in a file, insert the same line. These lines
    -+help both writers and readers to orient themselves in a file. In scribble use
    ++help both writers and readers to orient themselves in a file. In Scribble use
     +@litchar|{@; }| as the prefix.

      @; -----------------------------------------------------------------------------
3:  808676897e = 3:  1e7b35da0a docs: link fx+ and unsafe-fx+
4:  ca7d2a2a56 = 4:  c3e32a5afa docs: correct Git pull command
5:  1108c95343 = 5:  372bbd4ad5 docs: unquote "merge commit"
6:  1374b3b095 &lt; -:  ---------- docs: italicize "e.g."
7:  8f3f1cd517 = 6:  e48525eeb7 docs: correct macro body
-:  ---------- &gt; 7:  38b3c0a75e docs: make explicit the convention for Latin</code>
</pre>

</details>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve been using git range-diff for the past few months to explain changes between versions of a patch series, such as different versions of a branch after responding to review comments on a Pull Request. This post explains how I use post the output for Markdown-ish consumption on GitHub.]]></summary></entry></feed>