<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-01-20T23:13:44+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Steps to reclaim digital control</title><link href="https://benknoble.github.io/blog/2025/01/18/digital-control/" rel="alternate" type="text/html" title="Steps to reclaim digital control" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-18T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/18/digital-control</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/18/digital-control/"><![CDATA[<p>Here is my short list of steps for digital control.</p>

<h2 id="basics">Basics</h2>

<ul>
  <li>Reject all cookies. Some sites <a href="https://meta.stackexchange.com/q/367370/389795">make this
obnoxious</a>, so I wind up
trying to avoid them if possible. The <a href="https://www.technologylawdispatch.com/2023/11/privacy-data-protection/reject-all-button-in-cookie-consent-banners-an-update-from-the-uk-and-the-eu/">UK’s ICO
agrees</a>.</li>
  <li>Unsubscribe from email you don’t want or need (or recognize!). Some email
clients (like GMail) can do this automatically for you: <a href="https://deadsimpletech.com/blog/abuser_economy">this is especially
handy when unsubscribe links
fail</a>.</li>
  <li>Avoid autoplay and infinite scroll, like YouTube taking you to the next video
automatically. Disable them or avoid the site.</li>
  <li>Disable, deny, or mute unimportant notifications. Ditto for location services
and ads. (On iPhones, that’s usually in “Settings” under each application.)</li>
  <li>Report and delete unsolicited DMs or texts from strangers.</li>
  <li>Silence calls from unknown numbers (use your phone’s settings).</li>
  <li>Practice anti-phishing strategy: check URLs, look for signs of urgency. Here
are several informational sites to hone your strategy:
    <ul>
      <li><a href="https://www.occ.gov/topics/consumers-and-communities/consumer-protection/fraud-resources/phishing-attack-prevention.html">Office of the Comptroller of the Currency: “Phishing Attack Prevention: How to Identify &amp; Avoid Phishing Scams”</a></li>
      <li><a href="https://www.ftc.gov/business-guidance/small-businesses/cybersecurity/phishing">FTC: “Phishing”</a></li>
      <li><a href="https://www.cisa.gov/secure-our-world/recognize-and-report-phishing">America’s Cyber Defense Agency: “Recognize and Report Phishing”</a></li>
    </ul>
  </li>
  <li>Be mindful. Ask yourself: why am I reading, watching, or consuming this? Who
wrote or created it?</li>
</ul>

<h2 id="intermediate">Intermediate</h2>

<ul>
  <li>Try an <a href="https://pluralistic.net/2024/10/16/keep-it-really-simple-stupid/">RSS
Reader</a>:
instead of handing out your email address or social handle to have information
shoved at you, collect a list of links to follow for updates when you want
them. (Sound too good to be true, like the days when Facebook worked? <a href="https://en.wikipedia.org/wiki/RSS">RSS is
almost 26 years old as of this article</a>.)</li>
  <li>Consider alternate browsers and search engines. Recent trends favor engines
like <a href="https://www.ecosia.org">Ecosia</a> and <a href="https://kagi.com">Kagi</a>, as well as
browsers from <a href="https://www.mozilla.org/firefox/">Mozilla</a> (though Firefox has
been <a href="https://www.reuters.com/technology/mozilla-hit-with-privacy-complaint-over-firefox-user-tracking-2024-09-25/">under some fire
lately</a>).</li>
  <li>Claw back privacy from invasive trackers. The <a href="https://www.eff.org/deeplinks/2025/01/mad-meta-dont-let-them-collect-and-monetize-your-personal-data">EFF published a guide on how to
limit what Meta can do with your
data</a>.</li>
  <li>Be aware of how much time you spend on individual sites (esp. the usual social
suspects like Twitter, Instagram, the <a href="https://www.wheresyoured.at/the-slop-society/">cesspit that is
Facebook</a>, YouTube, etc.)</li>
  <li>Practice skepticism. Many people have something to sell you: question
motivations. Study arguments and how and why they are made. Decide for
yourself if they are persuasive.</li>
  <li>Find self-awareness: listen to your emotional state as you consume. Are you
allowing media to exert pathos-directed influence on you? Why? If it’s
genuine, what action does this prompt?</li>
  <li>Use Linux. This is not nearly as hard as it used to be!
<a href="https://ubuntu.com/desktop">Ubuntu</a> is the flagship for “user-friendly”
distributions, but you might be interested in other variants and
distributions<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Get your local techie friends to help (make some if you
have to). According to Iris Meredith of
<a href="https://deadsimpletech.com/">deadSimpleTech</a>, so much surveillance happens
through operating systems today: relying on a system that won’t surveil you
gives you back control.</li>
</ul>

<h2 id="advanced">Advanced</h2>

<ul>
  <li>Invest in digital privacy. Use your local techie friends for these, too. This
usually becomes the costliest step financially, but should lead to the most
control. Remember, you don’t have to use most things you don’t want to, and
there’s often an analog route to what you seek.
    <ul>
      <li>You might <a href="https://tailscale.com/">try a VPN</a> or <a href="https://nextdns.io/">set up a network-level
tracking blocker</a>.</li>
      <li><a href="https://www.citationneeded.news/wind-the-clock/">What do I do now?</a>:
Covers privacy/security, forming community, etc.</li>
      <li><a href="https://www.wired.com/story/the-wired-guide-to-protecting-yourself-from-government-surveillance/">WIRED guide to protecting yourself from government
surveillance</a></li>
    </ul>
  </li>
  <li>Use more open-source software. If it goes in a direction you dislike, you
always have the right to the source to build, modify, and run it yourself!
(This typically comes with an educational cost: you might have to learn to
build, modify, and run programs!) Corollary: avoid proprietary platform
lock-in. See for example <a href="https://sfconservancy.org/GiveUpGitHub/">Give Up
GitHub</a>; I’ve been eyeballing
<a href="https://sr.ht">sourcehut</a> for a while, personally.</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>For resource-constrained devices or older PCs, you may want to try an
alternative, lighter-weight <a href="https://wiki.debian.org/DesktopEnvironment">desktop
environment</a>. Power users might
be interested in projects like <a href="https://archlinux.org">Arch</a> (which powers
SteamDeck OS version 3.0), <a href="https://guix.gnu.org">GNU Guix</a> on <a href="https://guix.gnu.org/manual/en/html_node/System-Installation.html">its own
OS</a> or
any GNU/Linux distribution of your preference, or <a href="https://nixos.org">Nix on
NixOS</a>. If you’re curious about the OS that powers most
embedded devices (including parts of the Nintendo Switch and the PS4), try
<a href="https://www.freebsd.org">FreeBSD</a>. <a href="https://www.debian.org">Debian</a>
underlies the original SteamOS versions 1.0 and 2.0 as well as Ubuntu. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="accessibility" /><category term="internet" /><category term="open-source" /><category term="safety" /><summary type="html"><![CDATA[Here is my short list of steps for digital control.]]></summary></entry><entry><title type="html">Developer Experience, Redux</title><link href="https://benknoble.github.io/blog/2025/01/09/devex-redux/" rel="alternate" type="text/html" title="Developer Experience, Redux" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/09/devex-redux</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/09/devex-redux/"><![CDATA[<p>Another redux of some DevEx-relevant articles.</p>

<h2 id="normalization-of-deviance"><a href="http://danluu.com/wat/">Normalization of Deviance</a></h2>

<p>Many parts of this post are focused on unregulated environments (so not my
workplace, which is tied to banking and credit cards). Still, some things
resonate:</p>

<blockquote>
  <p>Often, they try to fix things, and then leave when they can’t make a dent.</p>
</blockquote>

<blockquote>
  <p>The data are clear that humans are really bad at taking the time to do things
that are well understood to incontrovertibly reduce the risk of rare but
catastrophic events. We will rationalize that taking shortcuts is the right,
reasonable thing to do. There’s a term for this: the normalization of
deviance. It’s well studied in a number of other contexts including
healthcare, aviation, mechanical engineering, aerospace engineering, and civil
engineering, but we don’t see it discussed in the context of software. In
fact, I’ve never seen the term used in the context of software.</p>
</blockquote>

<blockquote>
  <p>Turning off or ignoring notifications because there are too many of them and
they’re too annoying? An erroneous manual operation?</p>
</blockquote>

<blockquote>
  <p>How many technical postmortems start off with “someone skipped some steps
because they’re inefficient”, e.g., “the programmer force pushed a bad config
or bad code because they were sure nothing could go wrong and skipped
staging/testing”?</p>
</blockquote>

<blockquote>
  <p>People don’t automatically know what should be normal, and when new people are
onboarded, they can just as easily learn deviant processes that have become
normalized as reasonable processes.</p>
</blockquote>

<p>And the list of examples goes on! One conclusion seems clear: building reliable
software demands rooting these out mercilessly. That means efficiency (hello,
developer experience!) and guardrails around manual operations that demand
sanity-checks.</p>

<p>Finally, do this:</p>

<blockquote>
  <ul>
    <li>Pay attention to weak signals</li>
    <li>Resist the urge to be unreasonably optimistic</li>
    <li>Teach employees how to conduct emotionally uncomfortable conversations</li>
    <li>System operators need to feel safe in speaking up</li>
    <li>Realize that oversight and monitoring are never-ending</li>
  </ul>
</blockquote>

<p>If I don’t have much to add, it’s because there isn’t, frankly, much else to
say. Go read the original.</p>

<h2 id="the-chilling-effect-versus-attempts-to-fix-things"><a href="https://rachelbythebay.com/w/2021/04/30/speech/">The chilling effect versus attempts to fix things</a></h2>

<p>Building on the previous article: we’ve got to talk about things and then fix
them. When you have “WTF” moments—see above—say something. <em>Create a weak
signal.</em> (And then pay attention to and amplify others.)</p>

<h2 id="the-honest-troubleshooting-code-of-conduct"><a href="https://rachelbythebay.com/w/2021/05/01/code/">The Honest Troubleshooting Code of Conduct</a></h2>

<p>I think Bryan Cantrill would agree with this sentiment: the resounding theme of
the CoC above is “We are here to make things better.” We are here to improve the
customers lives. That comes above all, and treating that as shared vision will
get us much further than bickering about blame or passing off issues on other
folks.</p>

<h2 id="baking-those-potatoes-with-microservices-and-vendors"><a href="https://rachelbythebay.com/w/2020/08/17/potato/">Baking those potatoes with microservices and vendors</a></h2>

<p>Accountability! Rawr!</p>

<p>This is more of the same, actually: own the problem and fix it, even if you
think it comes from another place. Don’t toss the hot potato to the next person.</p>

<p>Don’t create gaps in responsibility. Fill them.</p>

<h2 id="infra-teams-good-bad-or-none-at-all"><a href="https://rachelbythebay.com/w/2020/05/19/abc/">Infra teams: good, bad, or none at all</a></h2>

<p>Strong language makes a point, even if I don’t appreciate the ad hominem
(“pathetic mass of losers”). My workplace feels like it went from C to something
that resembles this part of B:</p>

<blockquote>
  <p>Random product people now have to know about arbitrary crap enforced by
someone else like “kubelets” and “Jenkins”. They burn their cycles and sanity
on terrible systems instead of improving the experience for the company’s end
user.</p>
</blockquote>

<p>We keep making improvements, but getting to A requires more than a series of
band-aids: it requires deep investment that we just aren’t seeing be made.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="developer experience" /><summary type="html"><![CDATA[Another redux of some DevEx-relevant articles.]]></summary></entry><entry><title type="html">2025 Goals</title><link href="https://benknoble.github.io/blog/2025/01/05/goals/" rel="alternate" type="text/html" title="2025 Goals" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/goals</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/goals/"><![CDATA[<p>A short, probably only-sensible-to-me list of goals. Timeboxed.</p>

<p>Guiding principles:</p>
<ul>
  <li>Meet good people. Do good work.</li>
  <li>Think about what kind of parent I want to be.</li>
</ul>

<p>Timeboxed:</p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />January: Onboard to new work team. <a href="https://randsinrepose.com/archives/ninety-days/">Inspiration: 90 days</a>
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Stay late. Show up early.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Accept every lunch invitation you get.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Always ask about acronyms.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Say something really stupid.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Have a drink.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Tell someone what to do.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Have an argument.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Find your inner circle.</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />February: learn to paint blood on minis</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />March: move to Charlotte</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />April: see a specialist about my shoulder</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />May: step down as vi.se moderator</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />June: local political involvement (“active” allyship)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />July: explore digital privacy/control options (VPN, browsers, email, GitHub alternatives, colocated hosting for anything I decide to host?)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: rewrite mosaic program to create gifts</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />September: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />December: <em>Star Wars: Imperial Assault</em> painted. Minimum 1 squad completed/mo.
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />January: Jetpack troopers</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />February: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />March: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />April: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />May: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />June: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />July: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />September: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />December: ???</li>
    </ul>
  </li>
</ul>

<p>Generally:</p>
<ul>
  <li>make time for boardgames</li>
  <li>go to USK 2–3 times/week</li>
  <li>write more (1/week?)
    <ul>
      <li>start my book on GUI applications in Racket</li>
      <li>write about our experience reshaping digital lives</li>
      <li>share our general personal computing expertise/experience</li>
    </ul>
  </li>
  <li>keep writing fun, useful programs.
    <ul>
      <li>think about where to direct open-source energy</li>
      <li>cabin-mixer</li>
    </ul>
  </li>
  <li>turn down the bed for S</li>
  <li>knock down todo list priorities</li>
</ul>

<p>Political ways I can get involved:</p>
<ul>
  <li>book access and general literacy</li>
  <li>digital/mathematical literacy</li>
  <li>LGBTQIA+ support</li>
  <li>local reporting</li>
  <li>digital control/privacy; personal computing</li>
  <li>de-toxifying masculinity</li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="goals" /><summary type="html"><![CDATA[A short, probably only-sensible-to-me list of goals. Timeboxed.]]></summary></entry><entry><title type="html">iMessage contact sync</title><link href="https://benknoble.github.io/blog/2025/01/05/imessage/" rel="alternate" type="text/html" title="iMessage contact sync" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/imessage</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/imessage/"><![CDATA[<p>My wife’s iMessage on her Macbook devices had refused to show names for people
in her contacts for a while. Mine started doing the same thing, and I finally
solved the problem.</p>

<p>If your contacts don’t show names in iMessage, make sure the phone number
associated with the contact has an area-code prefix (that’s <code class="language-plaintext highlighter-rouge">+1</code> in the US).
iMessage seems to recognize that messages are coming from <code class="language-plaintext highlighter-rouge">+1 (XXX) YYY-ZZZZ</code>,
and it can’t match that to a contact with phone number <code class="language-plaintext highlighter-rouge">XXXYYYZZZZ</code> (which is
how Contacts will display phone numbers sans area codes). Adding an area code
in Contacts usually triggers a transformation to the standard format and, more
importantly, allows iMessage to match things.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="macOS" /><summary type="html"><![CDATA[My wife’s iMessage on her Macbook devices had refused to show names for people in her contacts for a while. Mine started doing the same thing, and I finally solved the problem.]]></summary></entry><entry><title type="html">Nospend 2025</title><link href="https://benknoble.github.io/blog/2025/01/05/nospend/" rel="alternate" type="text/html" title="Nospend 2025" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/nospend</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/nospend/"><![CDATA[<p>My wife and I want to be (even more) intentional with our spending this year as
we work through the purchase of a home. Here are our ideas.</p>

<p>The goal is not to keep to these perfectly, but to use them as strong guidelines
when evaluating spending decisions in these categories. This should keep us
conscious of where our money goes (alongside our usual budgeting) without
feeling punitive.</p>

<h2 id="guidelines-this-year">Guidelines this year</h2>

<ol>
  <li>No coffee out unless it is building a relationship (<em>e.g.</em>, friend, family,
coworker).</li>
  <li>No new clothes or shoes unless replacing items that are worn out or do not
fit.</li>
  <li>No books except book of the month or book club books that cannot be found at
the library.</li>
  <li>No new cosmetics or toiletries except replacements.</li>
  <li>No new cleaning or household supplies except replacements.</li>
  <li>Eat out 6 times or fewer per month unless building a relationship.</li>
  <li>Maximum 3 treats per month.</li>
  <li>No new cups, mugs, water bottles, etc.</li>
  <li>No new board games, video games, Lego, etc.</li>
</ol>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="financial" /><summary type="html"><![CDATA[My wife and I want to be (even more) intentional with our spending this year as we work through the purchase of a home. Here are our ideas.]]></summary></entry><entry><title type="html">Day one on a new team</title><link href="https://benknoble.github.io/blog/2025/01/04/day1/" rel="alternate" type="text/html" title="Day one on a new team" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/04/day1</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/04/day1/"><![CDATA[<p>This is my shortlist of “Day 1 questions” for new teams to help me get up to
speed. In no particular order:</p>

<ol>
  <li>Domain &amp; Design</li>
  <li>Performance budget</li>
  <li>Expected scale factors</li>
  <li>Customer success</li>
  <li>Team norms and culture</li>
</ol>

<p>Examples drawn from real work.</p>

<h2 id="domain--design">Domain &amp; Design</h2>

<p>What do we do? How do we accomplish it?</p>

<p>This could be things like “manage case lifecycles via tenant-configured platform
services,” “keep data flowing with automatically managed Kafka instances,” or
“provide cost recommendations to clients by analyzing data ingested from their
systems.”</p>

<p>Ideally this comes with a domain breakdown of key terms. Examples: tokenized
plastic/PAN; drain/kill/rehydrate; Snowflake contract and connection details.</p>

<h2 id="performance-budget">Performance budget</h2>

<p>What is the budget? I want to know the total expectations and by subsystem (we
should have those, right?). How do we know if we are (not) meeting those
budgets? What characteristics do we measure (mean, stddev, IQR, p90, shape of
distribution<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, etc.) and what are they? What are our target specs end-to-end
(our hardware and our clients’ hardware, with a focus on the clients).</p>

<p>See <a href="https://infrequently.org/series/performance-inequality">Performance inequality on the
web</a> for what happens
when we get this right (or wrong).</p>

<h2 id="expected-scale-factors">Expected scale factors</h2>

<p>Scale factors are the things whose increase will be felt across the system.
Examples might be number of customers, objects, transactions, queries, etc.. How
have we designed to meet changing needs with scale? How do we know if we are
(not)?</p>

<p>We may be planning to reimplement and rearchitect if we can’t meet new scale
requirements, and that’s an acceptable answer as long as we understand the cost
and know when (preferably before) we hit those points.</p>

<h2 id="customer-success">Customer success</h2>

<p>How do we know what our customers need? How do we know if those needs are (not)
met? How do we know when something goes wrong and what it is? How do we get
side-by-side feedback? How is customer engagement or success incorporated back
into the product?</p>

<h2 id="team-norms-and-culture">Team norms and culture</h2>

<p>How do we communicate (meetings, chat, email)? How do we track work-to-do, work
done, priorities, and roadblocks?</p>

<p>How do we develop and deploy code or land it in main? This includes</p>

<ul>
  <li>important areas of review focus</li>
  <li>what PRs/pushes look like (and whether we use PRs or something else)</li>
  <li>commit hygiene standards (<a href="https://cbea.ms/git-commit/">an example set of hygiene
standards</a>, though it doesn’t cover scoping
changes or branch/PR hygiene)</li>
  <li>code quality (what’s automated and what’s not)</li>
  <li>local setup and development</li>
  <li>test data</li>
  <li>pairing/mobbing norms</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>We must not commit crimes of statistics, after all. Don’t assume unimodal,
Normal distributions. Please provide a measure of spread with a measure of
central tendency. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="software-engineering" /><summary type="html"><![CDATA[This is my shortlist of “Day 1 questions” for new teams to help me get up to speed. In no particular order:]]></summary></entry><entry><title type="html">Commit subject case in Git history</title><link href="https://benknoble.github.io/blog/2025/01/04/git-subject-case/" rel="alternate" type="text/html" title="Commit subject case in Git history" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/04/git-subject-case</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/04/git-subject-case/"><![CDATA[<p><a href="https://cbea.ms/git-commit/#capitalize">Some insist that commit subjects be
capitalized</a>. Does this actually happen
in practice?</p>

<p>Here’s a quick analysis of the Git source repository (see <a href="/blog/2019/09/11/fields/">my fields script</a> or <a href="/blog/2024/11/15/useful-utilities/#parallel-thoughts">use your own</a>):</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 44019 | 30636</span>
</code></pre></div></div>

<p>Looks roughly even, with a slight preference for lower case words (~59%). But if
we filter out automatic messages from merges and reverts:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="se">\</span>
      <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="nt">-e</span> Merge <span class="nt">-e</span> Revert | <span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 44019 | 11423</span>
</code></pre></div></div>

<p>Well, that’s just above 79% preference for lowercase.</p>

<p>Measurements taken from the branch I happened to be on, which is <a href="https://github.com/benknoble/git/commit/daee7636106ecf9a7eb445038bf87348e0105478">daee763610
(completion: repair config completion for Zsh,
2024-12-29)</a>.</p>

<p>Note that the total from the first report (74655) undercounts the number of
commits by about 1109 according to <code class="language-plaintext highlighter-rouge">git rev-list --count HEAD</code>. This is exactly
the number of commits output by</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 | <span class="nb">grep</span> <span class="nt">-cv</span> <span class="nt">-e</span> <span class="s1">'^[[:lower:]]'</span> <span class="nt">-e</span> <span class="s1">'^[[:upper:]]'</span>
</code></pre></div></div>

<p>Here’s a histogram of the starts that got omitted by my simple measure (remove
<code class="language-plaintext highlighter-rouge">-c</code> on the previous <code class="language-plaintext highlighter-rouge">grep</code> and pipe to <code class="language-plaintext highlighter-rouge">sort | uniq -c | sort -rn</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 892 [PATCH]
  36 .mailmap:
  19 [PATCH
  14 "git
  12 .gitignore:
   9 .gitattributes:
   4 __attribute__:
   4 2.36
   4 *:
   3 [patch]
   3 .mailmap
   3 --walk-reflogs:
   3 --pretty=format:
   3 *.sh:
   3 *.h:
   3 *.c
   3 *.[ch]:
   3 'git
   3 "log
   3 "Assume
   2 {fetch,upload}-pack:
   2 0th
   2 -u
   2 --dirstat:
   2 *.[ch]
   2 (trivial)
   2 $EMAIL
   2 "remote
   2 "rebase
   2 "make
   1 {upload,receive}-pack
   1 {reset,merge}:
   1 {lock,commit,rollback}_packed_refs():
   1 {cvs,svn}import:
   1 {builtin/*,repository}.c:
   1 `git
   1 _XOPEN_SOURCE
   1 _GIT_INDEX_OUTPUT:
   1 \n
   1 [fr]
   1 ?alloc:
   1 3%
   1 2.3.2
   1 .gitignore
   1 .github/workflows/main.yml:
   1 .github/PULL_REQUEST_TEMPLATE.md:
   1 ./configure.ac:
   1 -Wuninitialized:
   1 -Wold-style-definition
   1 --utf8
   1 --summary
   1 --prune
   1 --name-only,
   1 --format=pretty:
   1 --dirstat-by-file:
   1 --base-path-relaxed
   1 *config.txt:
   1 *.h
   1 (various):
   1 (squash)
   1 (short)
   1 (revert
   1 (encode_85,
   1 (cvs|svn)import:
   1 (Hopefully)
   1 'make
   1 'git-merge':
   1 'build'
   1 $GIT_COMMON_DIR:
   1 "test"
   1 "reset
   1 "needs
   1 "lib-diff"
   1 "init-db"
   1 "git-tag
   1 "git-push
   1 "git-merge":
   1 "git-fetch
   1 "git-apply
   1 "git-add
   1 "git"
   1 "format-patch
   1 "diff
   1 "current_exec_path"
   1 "core.sharedrepository
   1 "color.diff
   1 "checkout
   1 "branch
   1 "blame
   1 "assume
   1 "add
   1 
</code></pre></div></div>

<p>Just for kicks, if I try the <em>2nd</em> word of the commit message in those cases:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--no-decorate</span> | fields 2 3 |
    <span class="nb">grep</span> <span class="nt">-v</span> <span class="nt">-e</span> <span class="s1">'^[[:lower:]]'</span> <span class="nt">-e</span> <span class="s1">'^[[:upper:]]'</span> | fields 2 |
    <span class="nb">tee</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:lower:]]'</span> <span class="o">&gt;</span>lower<span class="o">)</span> <span class="o">&gt;(</span><span class="nb">grep</span> <span class="nt">-c</span> <span class="s1">'^[[:upper:]]'</span> <span class="o">&gt;</span>upper<span class="o">)</span> <span class="o">&gt;</span>/dev/null
diff <span class="nt">-y</span> lower upper
<span class="c"># =&gt; 491 | 567</span>
</code></pre></div></div>

<p>We’re still undercounting by 51, but the above doesn’t modify our results much
(essentially still within the rounding I used). The 51 commits ought to be in
the noise. Even attributing them all as upper case, the rounded percentages
don’t change.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="statistics" /><summary type="html"><![CDATA[Some insist that commit subjects be capitalized. Does this actually happen in practice?]]></summary></entry><entry><title type="html">Roundup of Mother Jones articles from the 2025 January issue</title><link href="https://benknoble.github.io/blog/2025/01/02/mj-roundup/" rel="alternate" type="text/html" title="Roundup of Mother Jones articles from the 2025 January issue" /><published>2025-01-02T00:00:00+00:00</published><updated>2025-01-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/02/mj-roundup</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/02/mj-roundup/"><![CDATA[<p>Here’s my reactions to a few articles from the January 2025 issue of <a href="https://www.motherjones.com"><em>Mother
Jones</em> magazine</a>. The issue doesn’t look linked
online yet; I read it through Apple News.</p>

<h2 id="settling-the-score-by-emi-nietfeld">“Settling the Score” by Emi Nietfeld</h2>

<p>Nietfeld examines the contradictory popularity and flaws of Bessel van der
Kolk’s <em>The Body Keeps the Score</em>. In particular, Nietfeld points out both the
mischaracterization of academic research (a gentle way to say “lies”) and the
shaming of survivors broken bodies which, according to the text, may be
irreparable.</p>

<p>Nietfeld suggests alternative texts, which I want to collect here for my own
future reference:</p>

<ul>
  <li><em>Trauma &amp; Recovery</em> by Judith Herman</li>
  <li><em>What My Bones Know</em> by Stephanie Foo</li>
  <li><em>The End of Trauma</em> by George A. Bonanno</li>
</ul>

<p>My own thoughts: trauma may (and probably does) live in the body, <strong>and</strong> CBT
(Cognitive Behavioral Therapy) is effective, <strong>and</strong> victims are not irreparably
damaged (healing is possible).</p>

<h2 id="hog-wild-by-miranda-lipton">“Hog Wild” by Miranda Lipton</h2>

<p>According to Lipton’s research, meat prices are up not (only) because of
inflation: Agri Stats effectively brokers data-sharing between competitors in a
way that creates price-fixing without the industry leaders’ direct contact. The
DoJ sued in 2023 alleging violation of the Sherman Antitrust Act.</p>

<p>The arrangement is just like the <a href="https://www.justice.gov/opa/pr/justice-department-sues-realpage-algorithmic-pricing-scheme-harms-millions-american-renters">RealPage price-fixing for landlords to rig
rents</a>,
which I think I first learned about from <a href="https://pluralistic.net/2024/07/24/gouging-the-all-seeing-eye/#i-spy">Cory Doctorow’s article on
surveillance
pricing</a>.</p>

<p>Both Doctorow and Lipton connect the dots that centralized data sharing and
price “recommendations,” combined with lax antitrust regulation due to Reagan
and Milton Friedman and with conglomerate mergers (4 companies control 85% of
the meat supply chain), leads inexorably to controlled cartel pricing.</p>

<p>Fortunately, the data sharing guidelines which permitted the old behavior were
rescinded in 2023, writes Lipton: so the DoJ can go after Agri Stats, too.</p>

<p>You might not know that this follows a familiar cycle: the Sherman Antitrust Act
dates to 1890. The Packers and Stockyards Act of 1921 prohibited unfair pricing
in meat-packing as a direct consequence of monopolistic behavior!</p>

<p>It’s time to re-enforce existing laws. Loosening them 4 decades ago led to
predictable consequences.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="news" /><category term="monopoly" /><summary type="html"><![CDATA[Here’s my reactions to a few articles from the January 2025 issue of Mother Jones magazine. The issue doesn’t look linked online yet; I read it through Apple News.]]></summary></entry><entry><title type="html">Scraping XML sitemaps with Racket</title><link href="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/" rel="alternate" type="text/html" title="Scraping XML sitemaps with Racket" /><published>2024-12-02T00:00:00+00:00</published><updated>2024-12-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/12/02/advent-of-racket</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/"><![CDATA[<p>Day 2 of “Advent of Racket”</p>

<h2 id="the-project">The project</h2>

<p>Many of the smartest people I know keep an external cortex or exobrain: notes, a
<a href="https://github.com/benknoble/wiki-md">personal wiki</a>, or even a blog. Inspired
by <a href="https://pluralistic.net/2021/05/09/the-memex-method/">Cory Doctorow’s “memex
method”</a> and a
<a href="https://con.racket-lang.org">RacketCon</a> question, I’m writing again when the
mood strikes—see the uptick in posts since the middle of this year.</p>

<p>The advantage of a memex or external digital cortex is several-fold. The act of
setting my thoughts out for an audience helps me to elucidate what otherwise
might be a 10-word bullet, filed away and forgotten about. For Cory Doctorow, it
keeps information connected in a tangled web that eventually crystallizes or
nucleates into a bigger form. (<a href="/writings/blankboards/">Sound familiar? I’ve written about how my brain
often works that way, too.</a>)</p>

<h3 id="learning-from-the-past-to-look-towards-the-future">Learning from the past to look towards the future</h3>

<p>If you made it this far, you’re probably wandering what this has to do with
scraping sitemaps… as Cory Doctorow writes, “systematically reviewing your older
work” is “hugely beneficial.” Looking at the patterns (wrong and right) is a
“useful process of introspection” to improve our abilities to “spot and avoid”
pitfalls.</p>

<p>Doctorow revisits “this day in history” on the major anniversaries:</p>

<blockquote>
  <p>For more than a decade, I’ve revisited “this day in history” from my own
blogging archive, looking back one year, five years, ten years (and then,
eventually, 15 years and 20 years). Every day, I roll back my blog archives to
this day in years gone past, pull out the most interesting headlines and
publish a quick blog post linking back to them.</p>

  <p>This structured, daily work of looking back on where I’ve been is more
valuable to helping me think about where I’m going than I can say.</p>
</blockquote>

<p>This review idea fascinated me. While I don’t have the online tenure that
Doctorow does, I do have some old writing. So the idea to add a program to my
daily life to show me that writing was born.</p>

<p>The program should take a month and day (defaulting to the current) and show me
<em>every</em> post that I’ve written on that day. URLs are sufficient; I can click
them or pipe them to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code>. I don’t need to worry about the year, at
least not yet. It would be an easy modification to add later though. Since I
publish an XML sitemap on my blog, we’ll scrape that rather than the raw HTML.</p>

<h2 id="the-code">The code</h2>

<p>The most up-to-date version of the script will always be in my <a href="https://github.com/benknoble/Dotfiles">Dotfiles</a>; <a href="https://github.com/benknoble/Dotfiles/blob/4f5f9cde16829914fff1ad43965f2e3e46e52c50/links/bin/blog-posts-on">here’s a permalink to the version at
time of
writing</a>.</p>

<p>We start with a stanza to make this executable by the shell but written in
Racket (and we make sure to let Vim know what to do with it, since my
<a href="https://github.com/benknoble/vim-racket/blob/master/ftdetect/racket.vim">filetype-detection
code</a>
for Racket <a href="https://github.com/benknoble/vim-racket/issues/5">doesn’t work with <code class="language-plaintext highlighter-rouge">#!</code> lines
yet</a>):</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>
</code></pre></div></div>

<p>Now we require a few libraries from the main distribution; that means this
program should work with most non-minimal Racket installations without depending
on other packages being installed:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>
</code></pre></div></div>

<p>We need to know the month and day to use for our scraping; as mentioned, we’ll
default to the current day but optionally parse values out of the command line:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>
</code></pre></div></div>

<p>The duplication is a bit bothersome, but in a ~40-line program I’m not
concerned for the moment. It <em>is</em> important that we pad the dates to match my
site’s URL format, which uses 2-digit months and days everywhere.</p>

<p>Next, we fire off a request to the sitemap. Notice the lack of error handling:
this doesn’t need to be production grade, so we’ll assume the request succeeds.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>
</code></pre></div></div>

<p>Now <code class="language-plaintext highlighter-rouge">response</code> is an <a href="https://docs.racket-lang.org/reference/ports.html#%28tech._input._port%29"><em>input
port</em></a>:
we can read from it, but we haven’t materialized a full (byte)string yet. We
know it contains an XML document, so let’s read it as XML, extract the main
document, and turn that into an
<a href="https://docs.racket-lang.org/xml/index.html#%28def._%28%28lib._xml%2Fprivate%2Fxexpr-core..rkt%29._xexpr~3f%29%29">xexpr</a>:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>
</code></pre></div></div>

<p>Almost done: we can query the document for the URLs (which happen to be <code class="language-plaintext highlighter-rouge">loc</code>
elements) and filter them by our month-day combo:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>
</code></pre></div></div>

<p>Note how useful <code class="language-plaintext highlighter-rouge">filter-map</code> is with <code class="language-plaintext highlighter-rouge">regexp-match</code>: <code class="language-plaintext highlighter-rouge">filter-map</code> discards any
<code class="language-plaintext highlighter-rouge">#f</code> results from the mapping function, while <code class="language-plaintext highlighter-rouge">regexp-match</code> returns <code class="language-plaintext highlighter-rouge">#f</code> for
any inputs that don’t match. Simultaneously it transforms matching inputs to
describe the matches.</p>

<p>Finally, we display all the (newline-separated) results! We use <code class="language-plaintext highlighter-rouge">first</code> to
extract the full original input string because the earlier <code class="language-plaintext highlighter-rouge">regexp-match</code>
produces <code class="language-plaintext highlighter-rouge">(list full-match sub-group ...)</code>; our <code class="language-plaintext highlighter-rouge">full-match</code> is the whole string
because we bracket <code class="language-plaintext highlighter-rouge">month/day</code> with <code class="language-plaintext highlighter-rouge">.*</code> patterns.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>

<p>And that’s a wrap!</p>

<h3 id="use">Use</h3>

<p>In practice, I try to run <code class="language-plaintext highlighter-rouge">blog-posts-on</code> (the name of the script) once a day.
Sometimes I forget, so I build up a range of month/day combinations with
something like (Zsh):</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print <span class="nt">-l</span> <span class="nt">--</span> 11<span class="se">\ </span><span class="o">{</span>17..22<span class="o">}</span> | xargs <span class="nt">-L1</span> blog-posts-on
</code></pre></div></div>

<p>That gets me the posts for November 17th through 22nd, for example. If I want to
open them all immediately, I pipe that to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code> as mentioned
(substitute <code class="language-plaintext highlighter-rouge">xdg-open</code> or equivalent on your operating system).</p>

<h3 id="full-code">Full code</h3>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>

<span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Day 2 of “Advent of Racket”]]></summary></entry><entry><title type="html">Sapling Cage</title><link href="https://benknoble.github.io/blog/2024/11/27/sapling-cage/" rel="alternate" type="text/html" title="Sapling Cage" /><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/27/sapling-cage</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/27/sapling-cage/"><![CDATA[<p>My thoughts on Margaret Killjoy’s <em>Sapling Cage</em>.</p>

<h2 id="balance-in-all-things">Balance in all things</h2>

<p>Reading <em>Sapling Cage</em> took me back to reading fantasy as a preteen. Simply
written for a younger audience, it’s a page-turner for (nominally) grown adults,
too. Killjoy hooked me in to a world in the grips of dynamic power struggles
without complex dialogue, elaborate descriptions, or impossible backdrops. In
fact, except for the violence and a certain caldera, it all feels rather
mundane. This leaves room for the excitement of the coming of age tale, the
making of friends, the fear of discovery.</p>

<h2 id="words-actions-magic">Words, actions, magic</h2>

<p>Each of these has power. A witch must use all three.</p>

<p>Indeed, our main character Lorel observes and experiences violence for what it
is: hard, traumatic, gory, mournful. Yet she also experiences other powerful
actions: tentative allies unite against a threat; witches defend and enfold
someone who is other; a knight speaks for the weak.</p>

<p>Even on the very beginning of a journey into magic, we all learn something about
finding our power.</p>

<h2 id="as-a-cisgender-man">As a cisgender man</h2>

<p>I witnessed through Killjoy’s narrative a story of complexity: growing up as a
boy while being a girl. The main character struggles to figure out what to make
of her body—would it be easier if it matched the expectations of others? Would
such a change make her less attractive to a crush? Is this not her body,
imperfect as it is? <em>Is it ok not to like her body?</em></p>

<p>Moreover, she navigates fear and uncertainty: the fear of being found out, which
might be deadly. The uncertainty of who she can trust. Simultaneously her heart
swells with joy each time she is “girl” or “she.” Like Lorel’s friends (and even
rivals), we can all listen, learn, and love.</p>

<p>Killjoy reminds me that these questions—Lorel’s questions—are worth asking
of ourselves, and that we all experience their answers differently.</p>

<p>I highly recommend <em>Sapling Cage</em> (and my thanks to Cory Doctorow, whose
recommendation put it on my reading list).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="books" /><summary type="html"><![CDATA[My thoughts on Margaret Killjoy’s Sapling Cage.]]></summary></entry></feed>