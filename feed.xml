<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-01-04T17:00:01+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Roundup of Mother Jones articles from the 2025 January issue</title><link href="https://benknoble.github.io/blog/2025/01/02/mj-roundup/" rel="alternate" type="text/html" title="Roundup of Mother Jones articles from the 2025 January issue" /><published>2025-01-02T00:00:00+00:00</published><updated>2025-01-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/02/mj-roundup</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/02/mj-roundup/"><![CDATA[<p>Here’s my reactions to a few articles from the January 2025 issue of <a href="https://www.motherjones.com"><em>Mother
Jones</em> magazine</a>. The issue doesn’t look linked
online yet; I read it through Apple News.</p>

<h2 id="settling-the-score-by-emi-nietfeld">“Settling the Score” by Emi Nietfeld</h2>

<p>Nietfeld examines the contradictory popularity and flaws of Bessel van der
Kolk’s <em>The Body Keeps the Score</em>. In particular, Nietfeld points out both the
mischaracterization of academic research (a gentle way to say “lies”) and the
shaming of survivors broken bodies which, according to the text, may be
irreparable.</p>

<p>Nietfeld suggests alternative texts, which I want to collect here for my own
future reference:</p>

<ul>
  <li><em>Trauma &amp; Recovery</em> by Judith Herman</li>
  <li><em>What My Bones Know</em> by Stephanie Foo</li>
  <li><em>The End of Trauma</em> by George A. Bonanno</li>
</ul>

<p>My own thoughts: trauma may (and probably does) live in the body, <strong>and</strong> CBT
(Cognitive Behavioral Therapy) is effective, <strong>and</strong> victims are not irreparably
damaged (healing is possible).</p>

<h2 id="hog-wild-by-miranda-lipton">“Hog Wild” by Miranda Lipton</h2>

<p>According to Lipton’s research, meat prices are up not (only) because of
inflation: Agri Stats effectively brokers data-sharing between competitors in a
way that creates price-fixing without the industry leaders’ direct contact. The
DoJ sued in 2023 alleging violation of the Sherman Antitrust Act.</p>

<p>The arrangement is just like the <a href="https://www.justice.gov/opa/pr/justice-department-sues-realpage-algorithmic-pricing-scheme-harms-millions-american-renters">RealPage price-fixing for landlords to rig
rents</a>,
which I think I first learned about from <a href="https://pluralistic.net/2024/07/24/gouging-the-all-seeing-eye/#i-spy">Cory Doctorow’s article on
surveillance
pricing</a>.</p>

<p>Both Doctorow and Lipton connect the dots that centralized data sharing and
price “recommendations,” combined with lax antitrust regulation due to Reagan
and Milton Friedman and with conglomerate mergers (4 companies control 85% of
the meat supply chain), leads inexorably to controlled cartel pricing.</p>

<p>Fortunately, the data sharing guidelines which permitted the old behavior were
rescinded in 2023, writes Lipton: so the DoJ can go after Agri Stats, too.</p>

<p>You might not know that this follows a familiar cycle: the Sherman Antitrust Act
dates to 1890. The Packers and Stockyards Act of 1921 prohibited unfair pricing
in meat-packing as a direct consequence of monopolistic behavior!</p>

<p>It’s time to re-enforce existing laws. Loosening them 4 decades ago led to
predictable consequences.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="news" /><category term="monopoly" /><summary type="html"><![CDATA[Here’s my reactions to a few articles from the January 2025 issue of Mother Jones magazine. The issue doesn’t look linked online yet; I read it through Apple News.]]></summary></entry><entry><title type="html">Scraping XML sitemaps with Racket</title><link href="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/" rel="alternate" type="text/html" title="Scraping XML sitemaps with Racket" /><published>2024-12-02T00:00:00+00:00</published><updated>2024-12-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/12/02/advent-of-racket</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/12/02/advent-of-racket/"><![CDATA[<p>Day 2 of “Advent of Racket”</p>

<h2 id="the-project">The project</h2>

<p>Many of the smartest people I know keep an external cortex or exobrain: notes, a
<a href="https://github.com/benknoble/wiki-md">personal wiki</a>, or even a blog. Inspired
by <a href="https://pluralistic.net/2021/05/09/the-memex-method/">Cory Doctorow’s “memex
method”</a> and a
<a href="https://con.racket-lang.org">RacketCon</a> question, I’m writing again when the
mood strikes—see the uptick in posts since the middle of this year.</p>

<p>The advantage of a memex or external digital cortex is several-fold. The act of
setting my thoughts out for an audience helps me to elucidate what otherwise
might be a 10-word bullet, filed away and forgotten about. For Cory Doctorow, it
keeps information connected in a tangled web that eventually crystallizes or
nucleates into a bigger form. (<a href="/writings/blankboards/">Sound familiar? I’ve written about how my brain
often works that way, too.</a>)</p>

<h3 id="learning-from-the-past-to-look-towards-the-future">Learning from the past to look towards the future</h3>

<p>If you made it this far, you’re probably wandering what this has to do with
scraping sitemaps… as Cory Doctorow writes, “systematically reviewing your older
work” is “hugely beneficial.” Looking at the patterns (wrong and right) is a
“useful process of introspection” to improve our abilities to “spot and avoid”
pitfalls.</p>

<p>Doctorow revisits “this day in history” on the major anniversaries:</p>

<blockquote>
  <p>For more than a decade, I’ve revisited “this day in history” from my own
blogging archive, looking back one year, five years, ten years (and then,
eventually, 15 years and 20 years). Every day, I roll back my blog archives to
this day in years gone past, pull out the most interesting headlines and
publish a quick blog post linking back to them.</p>

  <p>This structured, daily work of looking back on where I’ve been is more
valuable to helping me think about where I’m going than I can say.</p>
</blockquote>

<p>This review idea fascinated me. While I don’t have the online tenure that
Doctorow does, I do have some old writing. So the idea to add a program to my
daily life to show me that writing was born.</p>

<p>The program should take a month and day (defaulting to the current) and show me
<em>every</em> post that I’ve written on that day. URLs are sufficient; I can click
them or pipe them to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code>. I don’t need to worry about the year, at
least not yet. It would be an easy modification to add later though. Since I
publish an XML sitemap on my blog, we’ll scrape that rather than the raw HTML.</p>

<h2 id="the-code">The code</h2>

<p>The most up-to-date version of the script will always be in my <a href="https://github.com/benknoble/Dotfiles">Dotfiles</a>; <a href="https://github.com/benknoble/Dotfiles/blob/4f5f9cde16829914fff1ad43965f2e3e46e52c50/links/bin/blog-posts-on">here’s a permalink to the version at
time of
writing</a>.</p>

<p>We start with a stanza to make this executable by the shell but written in
Racket (and we make sure to let Vim know what to do with it, since my
<a href="https://github.com/benknoble/vim-racket/blob/master/ftdetect/racket.vim">filetype-detection
code</a>
for Racket <a href="https://github.com/benknoble/vim-racket/issues/5">doesn’t work with <code class="language-plaintext highlighter-rouge">#!</code> lines
yet</a>):</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>
</code></pre></div></div>

<p>Now we require a few libraries from the main distribution; that means this
program should work with most non-minimal Racket installations without depending
on other packages being installed:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>
</code></pre></div></div>

<p>We need to know the month and day to use for our scraping; as mentioned, we’ll
default to the current day but optionally parse values out of the command line:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>
</code></pre></div></div>

<p>The duplication is a bit bothersome, but in a ~40-line program I’m not
concerned for the moment. It <em>is</em> important that we pad the dates to match my
site’s URL format, which uses 2-digit months and days everywhere.</p>

<p>Next, we fire off a request to the sitemap. Notice the lack of error handling:
this doesn’t need to be production grade, so we’ll assume the request succeeds.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>
</code></pre></div></div>

<p>Now <code class="language-plaintext highlighter-rouge">response</code> is an <a href="https://docs.racket-lang.org/reference/ports.html#%28tech._input._port%29"><em>input
port</em></a>:
we can read from it, but we haven’t materialized a full (byte)string yet. We
know it contains an XML document, so let’s read it as XML, extract the main
document, and turn that into an
<a href="https://docs.racket-lang.org/xml/index.html#%28def._%28%28lib._xml%2Fprivate%2Fxexpr-core..rkt%29._xexpr~3f%29%29">xexpr</a>:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>
</code></pre></div></div>

<p>Almost done: we can query the document for the URLs (which happen to be <code class="language-plaintext highlighter-rouge">loc</code>
elements) and filter them by our month-day combo:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>
</code></pre></div></div>

<p>Note how useful <code class="language-plaintext highlighter-rouge">filter-map</code> is with <code class="language-plaintext highlighter-rouge">regexp-match</code>: <code class="language-plaintext highlighter-rouge">filter-map</code> discards any
<code class="language-plaintext highlighter-rouge">#f</code> results from the mapping function, while <code class="language-plaintext highlighter-rouge">regexp-match</code> returns <code class="language-plaintext highlighter-rouge">#f</code> for
any inputs that don’t match. Simultaneously it transforms matching inputs to
describe the matches.</p>

<p>Finally, we display all the (newline-separated) results! We use <code class="language-plaintext highlighter-rouge">first</code> to
extract the full original input string because the earlier <code class="language-plaintext highlighter-rouge">regexp-match</code>
produces <code class="language-plaintext highlighter-rouge">(list full-match sub-group ...)</code>; our <code class="language-plaintext highlighter-rouge">full-match</code> is the whole string
because we bracket <code class="language-plaintext highlighter-rouge">month/day</code> with <code class="language-plaintext highlighter-rouge">.*</code> patterns.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>

<p>And that’s a wrap!</p>

<h3 id="use">Use</h3>

<p>In practice, I try to run <code class="language-plaintext highlighter-rouge">blog-posts-on</code> (the name of the script) once a day.
Sometimes I forget, so I build up a range of month/day combinations with
something like (Zsh):</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print <span class="nt">-l</span> <span class="nt">--</span> 11<span class="se">\ </span><span class="o">{</span>17..22<span class="o">}</span> | xargs <span class="nt">-L1</span> blog-posts-on
</code></pre></div></div>

<p>That gets me the posts for November 17th through 22nd, for example. If I want to
open them all immediately, I pipe that to <code class="language-plaintext highlighter-rouge">xargs -L1 open</code> as mentioned
(substitute <code class="language-plaintext highlighter-rouge">xdg-open</code> or equivalent on your operating system).</p>

<h3 id="full-code">Full code</h3>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>

<span class="p">(</span><span class="k">require</span> <span class="nv">xml</span>
         <span class="nv">xml/path</span>
         <span class="nv">net/http-client</span>
         <span class="nv">racket/date</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">now</span> <span class="p">(</span><span class="nf">current-date</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">month</span> <span class="nv">day</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">([</span><span class="nf">month</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-month</span> <span class="nv">now</span><span class="p">))]</span> <span class="p">[</span><span class="nf">day</span> <span class="p">(</span><span class="nf">~a</span> <span class="p">(</span><span class="nb">date-day</span> <span class="nv">now</span><span class="p">))])</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"month should be numeric: "</span> <span class="nv">month</span><span class="p">))</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">error</span> <span class="s">"day should be numeric: "</span> <span class="nv">day</span><span class="p">))</span>
   <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">month</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">~r</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">day</span><span class="p">)</span> <span class="nt">#:min-width</span> <span class="mi">2</span> <span class="nt">#:pad-string</span> <span class="s">"0"</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">_status</span> <span class="nv">_headers</span> <span class="nv">response</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">http-sendrecv</span> <span class="s">"benknoble.github.io"</span> <span class="s">"/sitemap.xml"</span> <span class="nt">#:ssl?</span> <span class="no">#t</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">doc</span>
  <span class="p">(</span><span class="nf">xml-&gt;xexpr</span> <span class="p">(</span><span class="nf">document-element</span> <span class="p">(</span><span class="nf">read-xml</span> <span class="nv">response</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">locations</span>
  <span class="p">(</span><span class="nf">se-path*/list</span> <span class="o">'</span><span class="p">(</span><span class="nf">loc</span><span class="p">)</span> <span class="nv">doc</span><span class="p">))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">posts</span>
  <span class="p">(</span><span class="nf">filter-map</span>
   <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">loc</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">regexp-match</span> <span class="p">(</span><span class="nb">pregexp</span> <span class="p">(</span><span class="nf">~a</span> <span class="s">".*"</span> <span class="nv">month</span> <span class="s">"/"</span> <span class="nv">day</span> <span class="s">".*"</span><span class="p">))</span> <span class="nv">loc</span><span class="p">))</span>
   <span class="nv">locations</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each</span> <span class="p">(</span><span class="nf">compose1</span> <span class="nv">displayln</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">posts</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Day 2 of “Advent of Racket”]]></summary></entry><entry><title type="html">Sapling Cage</title><link href="https://benknoble.github.io/blog/2024/11/27/sapling-cage/" rel="alternate" type="text/html" title="Sapling Cage" /><published>2024-11-27T00:00:00+00:00</published><updated>2024-11-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/27/sapling-cage</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/27/sapling-cage/"><![CDATA[<p>My thoughts on Margaret Killjoy’s <em>Sapling Cage</em>.</p>

<h2 id="balance-in-all-things">Balance in all things</h2>

<p>Reading <em>Sapling Cage</em> took me back to reading fantasy as a preteen. Simply
written for a younger audience, it’s a page-turner for (nominally) grown adults,
too. Killjoy hooked me in to a world in the grips of dynamic power struggles
without complex dialogue, elaborate descriptions, or impossible backdrops. In
fact, except for the violence and a certain caldera, it all feels rather
mundane. This leaves room for the excitement of the coming of age tale, the
making of friends, the fear of discovery.</p>

<h2 id="words-actions-magic">Words, actions, magic</h2>

<p>Each of these has power. A witch must use all three.</p>

<p>Indeed, our main character Lorel observes and experiences violence for what it
is: hard, traumatic, gory, mournful. Yet she also experiences other powerful
actions: tentative allies unite against a threat; witches defend and enfold
someone who is other; a knight speaks for the weak.</p>

<p>Even on the very beginning of a journey into magic, we all learn something about
finding our power.</p>

<h2 id="as-a-cisgender-man">As a cisgender man</h2>

<p>I witnessed through Killjoy’s narrative a story of complexity: growing up as a
boy while being a girl. The main character struggles to figure out what to make
of her body—would it be easier if it matched the expectations of others? Would
such a change make her less attractive to a crush? Is this not her body,
imperfect as it is? <em>Is it ok not to like her body?</em></p>

<p>Moreover, she navigates fear and uncertainty: the fear of being found out, which
might be deadly. The uncertainty of who she can trust. Simultaneously her heart
swells with joy each time she is “girl” or “she.” Like Lorel’s friends (and even
rivals), we can all listen, learn, and love.</p>

<p>Killjoy reminds me that these questions—Lorel’s questions—are worth asking
of ourselves, and that we all experience their answers differently.</p>

<p>I highly recommend <em>Sapling Cage</em> (and my thanks to Cory Doctorow, whose
recommendation put it on my reading list).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="books" /><summary type="html"><![CDATA[My thoughts on Margaret Killjoy’s Sapling Cage.]]></summary></entry><entry><title type="html">Server-sent events with Racket</title><link href="https://benknoble.github.io/blog/2024/11/23/racket-sse/" rel="alternate" type="text/html" title="Server-sent events with Racket" /><published>2024-11-23T00:00:00+00:00</published><updated>2024-11-23T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/23/racket-sse</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/23/racket-sse/"><![CDATA[<p>A small amount of server-side Racket and client-side JavaScript give me a
passable version of a reactive front-end.</p>

<h2 id="background">Background</h2>

<p>In my <a href="/workshops/14th-racket-con/">talk for 14th RacketCon</a> I
mentioned that the Frosthaven Manager can spawn a web-server for my friends and
players to interact with the app on their mobile devices. I run the entire
program on my machine, so all the state is stored in-process in one place. Edits
in the desktop GUI are propagated to my players web pages live, and their
actions translate back to the GUI in turn.</p>

<p>There’s no JavaScript framework on either the back-end or front-end. So how does
it all work?</p>

<p>There are 3 pieces to the puzzle:</p>

<ol>
  <li>The web-server does all the HTML generation: it embeds <code class="language-plaintext highlighter-rouge">fetch</code> calls in
<code class="language-plaintext highlighter-rouge">onclick</code> handlers that send POST requests back to the server, which the
server translates into actions the rest of the program knows how to handle
(but which, as mentioned in the talk, are shunted back to the GUI execution
loop rather than executed in the concurrent web-server handler threads). So
while my players mostly <em>see</em> the rendered HTML content returned by the
servers primary route, it actually supports a limited kind of
<code class="language-plaintext highlighter-rouge">URLSearchParams</code>-backed API. If you know what routes to hit, you could write
your own client to trigger game events. I’ve done so with
<a href="https://hurl.dev"><code class="language-plaintext highlighter-rouge">hurl</code></a> when playing with new features just to try it.</li>
  <li>Because I’m using <a href="https://docs.racket-lang.org/gui-easy/index.html">GUI
Easy</a>, all my game state is
<a href="https://docs.racket-lang.org/gui-easy/index.html#%28part._.Observables%29"><em>observable</em></a>.
This gives me a simple hook to subscribe to all the changes in my game’s
state, <a href="https://github.com/benknoble/frosthaven-manager/commit/7b8b4e7ed558454f373d296ca501c2fc3484776b">though it risks being too
fine-grained</a>
and I’ve been considering other options for generating notifications of
game-level events. Whatever mechanism there is, the web-server knows when
state has changed and it ought to propagate those changes to clients.</li>
  <li>The client and server agree to a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">server-sent
event</a>
protocol: this does require JavaScript enabled on the client (as do the click
handlers above). The protocol allows the server to retain a communication
channel to the client, which the client can use to update its view.</li>
</ol>

<p>This post focuses on the server-sent event implementation, or primarily the
latter 2 pieces.</p>

<p><strong>Note</strong>: Rather than embed the full code in those post, I’m going to link to
the implementation as it was at time of writing. Follow the links to get the
full details.</p>

<h2 id="server-sent-events">Server-sent events</h2>

<blockquote>
  <p>With server-sent events, it’s possible for a server to send new data to a web
page at any time, by pushing messages to the web page.
(<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events">MDN</a>)</p>
</blockquote>

<p>SSEs are one-way connections from server to client. Clients point a standard
JavaScript API <code class="language-plaintext highlighter-rouge">EventSource</code> at a URL that will produce a SSE-compatible
response and then attach event listeners. These listeners can operate over
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#listening_for_message_events">generic
events</a>
or <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#listening_for_custom_events">named
events</a>.
Messages can have <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#data">arbitrary data
fields</a>
which the client must parse to decide how to use.</p>

<p>The server implements SSEs by responding with the correct MIME type and raw
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format">response
format</a>.</p>

<h3 id="my-sse-protocol-for-the-frosthaven-manager">My SSE protocol for the Frosthaven Manager</h3>

<p>Before we look at implementation details, let’s get a grasp on the fundamentals
of the protocol my web-server uses atop SSEs.</p>

<ul>
  <li>All events use JSON as the interchange format for <code class="language-plaintext highlighter-rouge">data</code> fields. Racket is
capable of emitting standard JSON and JavaScript of parsing it, so this
simplifies communication.</li>
  <li>Events that manipulate the DOM <em>should</em> contain an HTML id pointing to the
node to manipulate. This simplifies the client code for finding the right node
and requires the server to consistently tag modifiable nodes with an
identifier (<code class="language-plaintext highlighter-rouge">id</code> attribute).</li>
  <li>Events that manipulate the DOM <em>should</em> contain strings that encode HTML that
can replace the <code class="language-plaintext highlighter-rouge">innerHTML</code> as needed.</li>
</ul>

<p>The last point is important: it avoids performing duplicate calculations in the
client (when a player’s HP changes, we send the new number, not an event
requesting that the HP be incremented or decremented), which makes keeping the
state in sync more reliable.</p>

<p>The simplest events in my protocol are <code class="language-plaintext highlighter-rouge">number</code> and <code class="language-plaintext highlighter-rouge">text</code>: they send an id and
a number or string that should replace the named node’s <code class="language-plaintext highlighter-rouge">innerHTML</code>. They
actually have nearly identical <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/static/events.js#L64-L73">client
implementations</a>
and <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L890-L899">server
implementations</a>.</p>

<p>Other events are more complicated and outside the scope of this article. As an
example, the <code class="language-plaintext highlighter-rouge">player</code> event is triggered when a player object changes: ignoring
the summon data, it receives an HTML id, a mapping of sub-components to HTML
strings, and a complete HTML node. The complete node is used if the player
doesn’t already exist, allowing it to be inserted wholesale into the display.
Otherwise, we update the sub-nodes based on the mapping of HTML strings. The
<code class="language-plaintext highlighter-rouge">monster-group</code> event is similar.</p>

<h3 id="implementation-details">Implementation Details</h3>

<p>As we said earlier, the <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/static/events.js#L1">client opens a new event
source</a>
and attaches event handlers. We <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L320">include the script on the main
page</a>.
Sending events is the server’s responsibility.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">evtSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EventSource</span><span class="p">(</span><span class="dl">"</span><span class="s2">events</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">evtSource</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</code></pre></div></div>

<p>The server subscribes to the GUI observables<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>: when they change, the subscribers
place structured data in a <a href="https://docs.racket-lang.org/alexis-multicast/index.html">multicast
channel</a>
(<a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L181-L188">example</a>).
We need a multicast channel because we create one per server (usually just one),
but each client request handler needs to be able to be able to read from it
(usually one per event source connection).</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">ch</span> <span class="p">(</span><span class="nf">make-multicast-channel</span><span class="p">))</span>
<span class="p">(</span><span class="nf">obs-observe!</span> <span class="nv">@state</span>
              <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">state</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">multicast-channel-put</span> <span class="nv">ch</span> <span class="p">(</span><span class="nf">state-event</span> <span class="nv">state</span><span class="p">))))</span>
</code></pre></div></div>

<p>Then, the server <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L254">establishes a route which implements the
SSEs</a>.
This is the same path that forms part of the URL that the client will connect
to. The route’s implementation <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L816-L825">responds with appropriate
headers</a>.
It also <a href="https://docs.racket-lang.org/web-server/http.html#%28def._%28%28lib._web-server%2Fhttp%2Fresponse-structs..rkt%29._response%2Foutput%29%29">gets an output
port</a>
it can use to write to the client.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">((</span><span class="nf">event-source</span> <span class="nv">ch</span><span class="p">)</span> <span class="nv">_req</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">receiver</span> <span class="p">(</span><span class="nf">make-multicast-receiver</span> <span class="nv">ch</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">response/output</span>
    <span class="nt">#:headers</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Cache-Control"</span> <span class="o">#</span><span class="s">"no-store"</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Content-Type"</span> <span class="o">#</span><span class="s">"text/event-stream"</span><span class="p">)</span>
                    <span class="c1">;; Don't use Connection in HTTP/2 or HTTP/3, but Racket's</span>
                    <span class="c1">;; web-server is HTTP/1.1 as confirmed by</span>
                    <span class="c1">;; `curl -vso /dev/null --http2 &lt;addr&gt;`.</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Connection"</span> <span class="o">#</span><span class="s">"keep-alive"</span><span class="p">)</span>
                    <span class="c1">;; Pairs with Connection; since our event source sends data</span>
                    <span class="c1">;; every 5 seconds at minimum, this 10s timeout should be</span>
                    <span class="c1">;; sufficient.</span>
                    <span class="p">(</span><span class="nf">header</span> <span class="o">#</span><span class="s">"Keep-Alive"</span> <span class="o">#</span><span class="s">"timeout=10"</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">sse-output</span> <span class="nv">receiver</span><span class="p">)))</span>
</code></pre></div></div>

<p>The main loop of the response handler is to wait on the channel to produce data:
when it does, <a href="https://github.com/benknoble/frosthaven-manager/blob/4fb7ad6d36890478a078ce5efc97fe06cd6c1520/server.rkt#L833">a separate
function</a>
transforms that data into SSE format and shoves it through the port. If we don’t
get a response in time, we send a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#event_stream_format">comment to prevent connection
timeout</a>.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">see-output</span> <span class="nv">receiver</span><span class="p">)</span>
  <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">out</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let</span> <span class="nv">loop</span> <span class="p">()</span>
      <span class="p">(</span><span class="k">cond</span>
        <span class="p">[(</span><span class="nb">sync/timeout</span> <span class="mi">5</span> <span class="nv">receiver</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="nf">event-stream</span> <span class="nv">out</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">else</span> <span class="p">(</span><span class="nb">displayln</span> <span class="s">":"</span> <span class="nv">out</span><span class="p">)])</span>
      <span class="p">(</span><span class="nf">loop</span><span class="p">))))</span>
</code></pre></div></div>

<p>That’s all there is to it! I’m hoping to find a way to extract the two pieces
(client-side code and server-side implementation) into a library for other
Racket applications to use to implement server-side events more easily. Ideally
it will handle the basics of SSEs while remaining agnostic to how the
application generates and handles events. We <em>might</em> be able to be
concurrency-agnostic, though: while Racket’s <code class="language-plaintext highlighter-rouge">sync</code> is generic, most
applications probably need a single-producer multi-consumer channel. Still,
allowing any event that produces data a consumer can transform into SSE-data
might work and allow other patterns.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>For performance reasons, some subscribers spawn a thread that sends the
message. Since GUI Easy subscribers execute serially, moving expensive work
out of the main loop quickly can help avoid bottlenecks. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="web" /><summary type="html"><![CDATA[A small amount of server-side Racket and client-side JavaScript give me a passable version of a reactive front-end.]]></summary></entry><entry><title type="html">Tip: use symmetric differences with git-range-diff</title><link href="https://benknoble.github.io/blog/2024/11/15/til-range-diff/" rel="alternate" type="text/html" title="Tip: use symmetric differences with git-range-diff" /><published>2024-11-15T00:00:00+00:00</published><updated>2024-11-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/15/til-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/15/til-range-diff/"><![CDATA[<p>I’ve <a href="/blog/2024/10/04/copy-range-diff/">been using <code class="language-plaintext highlighter-rouge">range-diff</code> for a while now</a>, but I’d been stuck with a long input
method for arguments. Today I learned a shortcut.</p>

<h2 id="primer">Primer</h2>

<p>Recall that <code class="language-plaintext highlighter-rouge">git range-diff</code> looks at the differences between two ranges:
commonly, we pass the two ranges explicitly; or, we can pass a base and two tips
to have the same effect as <code class="language-plaintext highlighter-rouge">&lt;base&gt;..&lt;tip1&gt; &lt;base&gt;..&lt;tip2&gt;</code>. The <a href="https://git-scm.com/docs/git-range-diff#Documentation/git-range-diff.txt-ltbasegtltrev1gtltrev2gt">manual
explaining this notation</a> gives the following example: “after
rebasing a branch <code class="language-plaintext highlighter-rouge">my-topic</code>, <code class="language-plaintext highlighter-rouge">git range-diff my-topic@{u} my-topic@{1}
my-topic</code> would show the differences introduced by the rebase.” So I’ve been
writing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{u} @{1} @
</code></pre></div></div>

<p>and similar variants for several months. I actually recently switched to
<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault"><code class="language-plaintext highlighter-rouge">push.default = current</code></a> where my <code class="language-plaintext highlighter-rouge">@{upstream}</code> is the branch I
want to pull from (often some version of <code class="language-plaintext highlighter-rouge">origin/main</code> or <code class="language-plaintext highlighter-rouge">upstream/main</code>) and
Git provides (after I push) <code class="language-plaintext highlighter-rouge">@{push}</code> as the branch I’m pushing to (<em>e.g.</em>,
<code class="language-plaintext highlighter-rouge">origin/topic</code>). With this layout, I run</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{u} @{push} @
</code></pre></div></div>

<p>(There is no abbreviation for <code class="language-plaintext highlighter-rouge">@{push}</code>, sadly.)</p>

<h2 id="symmetric-diff">Symmetric diff</h2>

<p>Now, I knew that <code class="language-plaintext highlighter-rouge">git range-diff</code> also accepts a <a href="https://git-scm.com/docs/git-range-diff#Documentation/git-range-diff.txt-ltrev1gt82308203ltrev2gt">three-dot symmetric difference
notation</a>, so</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff &lt;left&gt;...&lt;right&gt;
    -- becomes --&gt;
g range-diff &lt;right&gt;..&lt;left&gt; &lt;left&gt;..&lt;right&gt;
</code></pre></div></div>
<p>But in the past, especially prior to <code class="language-plaintext highlighter-rouge">push.default = current</code>, I had not found
this terribly useful. I was probably holding it wrong.</p>

<p>Today, I write (before pushing)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>g range-diff @{push}... | copy-range-diff
</code></pre></div></div>

<p>and all is well. Use <code class="language-plaintext highlighter-rouge">git log [--oneline] --graph --boundary --left-right --cherry-mark
@{push}...</code> to get a feel for what ranges are being compared.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve been using range-diff for a while now, but I’d been stuck with a long input method for arguments. Today I learned a shortcut.]]></summary></entry><entry><title type="html">Little utilities</title><link href="https://benknoble.github.io/blog/2024/11/15/useful-utilities/" rel="alternate" type="text/html" title="Little utilities" /><published>2024-11-15T00:00:00+00:00</published><updated>2024-11-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/15/useful-utilities</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/15/useful-utilities/"><![CDATA[<p>Like many other full-time shell users, I write small utilities to add to my
toolbox. Let’s compare.</p>

<p><strong>Update 2024 November 17:</strong> Add notes on <code class="language-plaintext highlighter-rouge">git-q</code> and <code class="language-plaintext highlighter-rouge">git-vee</code>.</p>

<h2 id="parallel-thoughts">Parallel thoughts</h2>

<p>I stumbled on <a href="https://blog.plover.com/">MJD’s blog</a> via a <a href="https://git.github.io/rev_news/">Git Rev
News</a> article from last year and found <a href="https://blog.plover.com/prog/runN.html">a post
about little utilities</a>. Clearly great
minds think alike:</p>

<ul>
  <li>MJD explains an <code class="language-plaintext highlighter-rouge">f</code> command to extract a single field. It’s written in Perl. I
have a <a href="/blog/2019/09/11/fields/"><code class="language-plaintext highlighter-rouge">fields</code> script</a> that uses
dynamically-generated AWK to extract as many fields as you want. It’s a longer
name but useful in more situations.</li>
  <li>The post goes on to mention <code class="language-plaintext highlighter-rouge">runN</code>, a (mostly sequential but sometimes
parallel) command runner that replaces some simple loops. But this is a
straightforward variation on <a href="https://joeyh.name/code/moreutils/">moreutils</a>
<code class="language-plaintext highlighter-rouge">parallel</code> command<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, so that’s what I use when I remember to.</li>
</ul>

<h2 id="git">Git</h2>

<p>In <a href="https://blog.plover.com/prog/git-q.html">another post</a>, MJD mentions two Git
utilities:</p>

<ul>
  <li>Using <code class="language-plaintext highlighter-rouge">git vee</code> as a wrapper around <code class="language-plaintext highlighter-rouge">git log</code> over a symmetric difference
shows how branches have diverged. <a href="https://github.com/benknoble/Dotfiles/commit/e0ca3d3402b00edb8ea3580afa1d171d07b6e246">My take, <code class="language-plaintext highlighter-rouge">git
div</code></a>
infers the arguments that I would normally pass (like <code class="language-plaintext highlighter-rouge">base...upstream</code>) and
allows to specify them, but the inference is intentionally unsophisticated. I
consider this a companion to <code class="language-plaintext highlighter-rouge">git sbup</code> (<code class="language-plaintext highlighter-rouge">git show-branch HEAD HEAD@{upstream}
HEAD@{push}</code>).</li>
  <li>Query object information with <code class="language-plaintext highlighter-rouge">git q</code>: <a href="https://github.com/benknoble/Dotfiles/commit/79a27b666323494b0fdcc82dbb1d0b5f73b556e2">my
take</a>
is pure shell and only runs a single subprocess rather than one for each ref.
This collapses equivalent refs but is ~50x more performant (see hyperfine
output in the commit).</li>
</ul>

<p>In the words of moreutils: there’s room for more little unix utilities!</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>The <a href="https://joeyh.name/code/moreutils/">moreutils</a> syntax and manual I
vastly prefer to <a href="https://savannah.gnu.org/projects/parallel/">GNU <code class="language-plaintext highlighter-rouge">parallel</code></a>,
although GNU parallel supports niceties like a job log, retries, output
syndication, etc. For “heavy lifting,” I am forced to use GNU parallel (I
try to write detailed notes on expected uses then), but for short one-liners
I prefer the moreutils version. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="shell" /><summary type="html"><![CDATA[Like many other full-time shell users, I write small utilities to add to my toolbox. Let’s compare.]]></summary></entry><entry><title type="html">Perspective on software development models</title><link href="https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective/" rel="alternate" type="text/html" title="Perspective on software development models" /><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/11/11/git-branch-trunk-perspective/"><![CDATA[<p><strong>Update 2024 November 22: I may have some misunderstandings about trunk-based
development, and this article needs a (as-of-yet incomplete) rewrite as a
result.</strong></p>

<p>Pending said rewrites, the <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">main content</a> has been removed as a “draft.”
You can find the <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">original post</a> on <a href="https://github.com/benknoble/benknoble.github.io/blob/248b8898789f8071a546458604e8f73458d6f7f5/_posts/2024-11-11-git-branch-trunk-perspective.md?plain=1">GitHub</a>.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Update 2024 November 22: I may have some misunderstandings about trunk-based development, and this article needs a (as-of-yet incomplete) rewrite as a result.]]></summary></entry><entry><title type="html">Copying a git-range-diff to GitHub</title><link href="https://benknoble.github.io/blog/2024/10/04/copy-range-diff/" rel="alternate" type="text/html" title="Copying a git-range-diff to GitHub" /><published>2024-10-04T00:00:00+00:00</published><updated>2024-10-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/10/04/copy-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/10/04/copy-range-diff/"><![CDATA[<p>I’ve been using <code class="language-plaintext highlighter-rouge">git range-diff</code> for the past few months to explain changes
between versions of a patch series, such as different versions of a branch after
responding to review comments on a Pull Request. This post explains how I use
post the output for Markdown-ish consumption on GitHub.</p>

<h2 id="primer">Primer</h2>

<p>If you didn’t know, <code class="language-plaintext highlighter-rouge">git range-diff</code> is the standard way in Git to document
changes between versions of a patch series such as you might find sent to a
development mailing list. For example, <code class="language-plaintext highlighter-rouge">git format-patch</code> can include it
automatically in the email so that, when responding to review comments with a
new version, reviewers understand what’s changed.</p>

<p>This all seems only relevant to email-driven workflows, but I argue that it is
also useful for GitHub- or other web- driven workflows. For example: I work on a
branch and submit a Pull Request on GitHub. After some review comments, I may
create some <code class="language-plaintext highlighter-rouge">--fixup</code> commits and <code class="language-plaintext highlighter-rouge">rebase --autosquash</code> them in, perhaps editing
commit messages, or make any number of other changes. When the time comes to
<code class="language-plaintext highlighter-rouge">push --force-with-lease --force-if-includes</code>, the only recourse my reviewers
have to understand the changes is GitHub’s “View changes” button, which attempts
a textual diff between the files at the old and new branch tip.</p>

<p>Yet a range-diff can capture so much more! Consider, for example, this
range-diff from a Racket PR I submitted:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1:  907d3ea366 = 1:  35c19f1e83 docs: capitalize the noun Git
2:  665e037505 ! 2:  6088cd1567 docs: mention the Vi command to add sections
    @@ pkgs/racket-doc/scribblings/style/textual.scrbl: read code on monitors that acco
     +So, when you create a file, add a line with @litchar{;; } followed by ctrl-U 99
     +and @litchar{-}. @margin-note*{In Vi, the command is 99a- followed by Esc.} When
     +you separate "sections" of code in a file, insert the same line. These lines
    -+help both writers and readers to orient themselves in a file. In scribble use
    ++help both writers and readers to orient themselves in a file. In Scribble use
     +@litchar|{@; }| as the prefix.

      @; -----------------------------------------------------------------------------
3:  808676897e = 3:  1e7b35da0a docs: link fx+ and unsafe-fx+
4:  ca7d2a2a56 = 4:  c3e32a5afa docs: correct Git pull command
5:  1108c95343 = 5:  372bbd4ad5 docs: unquote "merge commit"
6:  1374b3b095 &lt; -:  ---------- docs: italicize "e.g."
7:  8f3f1cd517 = 6:  e48525eeb7 docs: correct macro body
-:  ---------- &gt; 7:  38b3c0a75e docs: make explicit the convention for Latin
</code></pre></div></div>

<p>GitHub won’t show you this difference: I capitalized a word in an old commit
message, removed the commit that italicized Latin abbreviations and added one
that clarified said convention. I prefer to provide my reviewers with this
information to help them understand the changes I’ve made (and to help future
readers who may be curious, though I admit this is unlikely in most cases).</p>

<h2 id="sharing-a-range-diff-in-markdown-format">Sharing a range-diff in Markdown format</h2>

<p>A range-diff can get quite large if there are substantial code
changes—arguably, the patch series should become a new branch/PR at such a
point, but that is not often how things operate in practice. I used to paste
range-diffs in code blocks like you see above, but with length and GitHub’s
comment/review interface they became unwieldy.</p>

<p>Instead, I’ve started pasting them inside an HTML <code class="language-plaintext highlighter-rouge">details</code> block so that they
may be collapsed, summarized, and expanded as desired. I often did this by hand,
but <a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/copy-range-diff">here’s the script I now use called <code class="language-plaintext highlighter-rouge">copy-range-diff</code></a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/sh</span>

<span class="o">{</span>
  <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s1">'&lt;details&gt;&lt;summary&gt;range-diff:&lt;/summary&gt;'</span> <span class="s1">''</span> <span class="s1">'```'</span>
  <span class="nb">cat
  printf</span> <span class="s1">'%s\n'</span> <span class="s1">'```'</span> <span class="s1">''</span> <span class="s1">'&lt;/details&gt;'</span>
<span class="o">}</span> | pbcopy
</code></pre></div></div>

<p>This script reads standard in and pipes a modified version of it to a clipboard
command (Linux users probably prefer an <code class="language-plaintext highlighter-rouge">xsel</code> variant). Placed on the clipboard
after <code class="language-plaintext highlighter-rouge">git range-diff … | copy-range-diff</code> is an HTML <code class="language-plaintext highlighter-rouge">details</code> block containing
a Markdown code-fence which is easy to paste into GitHub or similar interfaces.
Sometimes I will add a short summary to the summary tag; other times, I leave
just the mention of a range-diff.</p>

<p>A small tweak should work for pure HTML output so that instead of triple-tick
Markdown fences we emit <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> tags.</p>

<details><summary>Here's the earlier range-diff, in a details block</summary>

<!-- For some reason, Jekyll doesn't know how to process Markdown fences here,
     so trick it with HTML. -->

<pre class="highlight">
<code>1:  907d3ea366 = 1:  35c19f1e83 docs: capitalize the noun Git
2:  665e037505 ! 2:  6088cd1567 docs: mention the Vi command to add sections
    @@ pkgs/racket-doc/scribblings/style/textual.scrbl: read code on monitors that acco
     +So, when you create a file, add a line with @litchar{;; } followed by ctrl-U 99
     +and @litchar{-}. @margin-note*{In Vi, the command is 99a- followed by Esc.} When
     +you separate "sections" of code in a file, insert the same line. These lines
    -+help both writers and readers to orient themselves in a file. In scribble use
    ++help both writers and readers to orient themselves in a file. In Scribble use
     +@litchar|{@; }| as the prefix.

      @; -----------------------------------------------------------------------------
3:  808676897e = 3:  1e7b35da0a docs: link fx+ and unsafe-fx+
4:  ca7d2a2a56 = 4:  c3e32a5afa docs: correct Git pull command
5:  1108c95343 = 5:  372bbd4ad5 docs: unquote "merge commit"
6:  1374b3b095 &lt; -:  ---------- docs: italicize "e.g."
7:  8f3f1cd517 = 6:  e48525eeb7 docs: correct macro body
-:  ---------- &gt; 7:  38b3c0a75e docs: make explicit the convention for Latin</code>
</pre>

</details>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve been using git range-diff for the past few months to explain changes between versions of a patch series, such as different versions of a branch after responding to review comments on a Pull Request. This post explains how I use post the output for Markdown-ish consumption on GitHub.]]></summary></entry><entry><title type="html">Performance of Racket Pict Comparison, Part 2</title><link href="https://benknoble.github.io/blog/2024/09/14/benchmarking-pict-equality-pt-2/" rel="alternate" type="text/html" title="Performance of Racket Pict Comparison, Part 2" /><published>2024-09-14T00:00:00+00:00</published><updated>2024-09-14T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/09/14/benchmarking-pict-equality-pt-2</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/09/14/benchmarking-pict-equality-pt-2/"><![CDATA[<p>I eliminate “eyeball statistics” from <a href="/blog/2024/02/15/benchmarking-pict-equality/">part 1</a>. This post is based on
<a href="https://chelseatroy.com/2021/02/26/data-safety-for-programmers/">Chelsea Troy’s “Data Safety”
series</a>,
especially <a href="https://chelseatroy.com/2021/03/12/quantitative-programming-knife-skills-part-2/">Quantitative Programming Knife Skills, Part
2</a>.</p>

<p>As usual, all code is <a href="https://github.com/benknoble/pict-equal-bench">available on GitHub</a>.</p>

<h2 id="problems">Problems</h2>

<p>In the previous post, I eyeballed distributions from box-and-whisker plots (in
addition to relying on reported timings from hyperfine) to determine which
method of comparing <code class="language-plaintext highlighter-rouge">pict</code>s is faster. Today, we’ll look at addressing two
limitations of that approach:</p>

<ol>
  <li>How confident are we that the true mean of relevant measurements is captured
by the mean of our sample distribution? We’ll compute confidence intervals
for an appropriate distribution.</li>
  <li>How likely is it that the distributions actually differ for a reason other
than random chance? We’ll use statistical tests to measure the probability of
difference being attributable to random chance (the “null hypothesis”).</li>
</ol>

<p>First, though, we’ve got to talk about distributions.</p>

<h2 id="distributions">Distributions</h2>

<p>We have (by computation) a mean and standard deviation for various facets of our
<a href="https://github.com/benknoble/pict-equal-bench">data</a>. We have enough data that assuming a normal distribution is not
unreasonable; let’s take a look. For the time benchmark data, the following code</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">sawzall</span>
         <span class="nv">data-frame</span>
         <span class="nv">threading</span>
         <span class="nv">math/statistics</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">v-μ</span> <span class="nv">xs</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">exact-&gt;inexact</span> <span class="p">(</span><span class="nf">mean</span> <span class="p">(</span><span class="nb">vector-&gt;list</span> <span class="nv">xs</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">v-σ</span> <span class="nv">xs</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">stddev</span> <span class="p">(</span><span class="nb">vector-&gt;list</span> <span class="nv">xs</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">t-short</span> <span class="p">(</span><span class="nf">df-read/csv</span> <span class="s">"time.csv"</span><span class="p">))</span>

<span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">t-short</span>
    <span class="p">(</span><span class="nf">group-with</span> <span class="s">"bench"</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">aggregate</span> <span class="p">[</span><span class="nf">cpu-μ</span> <span class="p">(</span><span class="nf">cpu</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-μ</span> <span class="nv">cpu</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">cpu-σ</span> <span class="p">(</span><span class="nf">cpu</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-σ</span> <span class="nv">cpu</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">real-μ</span> <span class="p">(</span><span class="nf">real</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-μ</span> <span class="nv">real</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">real-σ</span> <span class="p">(</span><span class="nf">real</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-σ</span> <span class="nv">real</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">gc-μ</span> <span class="p">(</span><span class="nf">gc</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-μ</span> <span class="nv">gc</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">gc-σ</span> <span class="p">(</span><span class="nf">gc</span><span class="p">)</span> <span class="p">(</span><span class="nf">v-σ</span> <span class="nv">gc</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">show</span> <span class="nv">everything</span><span class="p">))</span>
</code></pre></div></div>

<p>produces</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data-frame: 2 rows x 7 columns
┌──────────────────┬─────────┬──────────────────┬──────────────────┬─────────────────┬───────────────────┬────────────────────┐
│cpu-σ             │bench    │real-μ            │real-σ            │cpu-μ            │gc-σ               │gc-μ                │
├──────────────────┼─────────┼──────────────────┼──────────────────┼─────────────────┼───────────────────┼────────────────────┤
│1.477002129744432 │bytes    │4.225773195876289 │1.4978411739022484│4.175601374570447│0.15933274204104092│0.006529209621993127│
├──────────────────┼─────────┼──────────────────┼──────────────────┼─────────────────┼───────────────────┼────────────────────┤
│1.1370657205199777│record-dc│2.0853951890034366│1.148475651239016 │2.05893470790378 │0.16564821501258256│0.007216494845360825│
└──────────────────┴─────────┴──────────────────┴──────────────────┴─────────────────┴───────────────────┴────────────────────┘
</code></pre></div></div>

<p>Let’s plot these (<a href="https://github.com/benknoble/pict-equal-bench">code</a>):</p>

<p><img src="/assets/img/pict-time-bench-cpu-normal.svg" alt="CPU time normal distributions" />
<img src="/assets/img/pict-time-bench-real-normal.svg" alt="Real time normal distributions" />
<img src="/assets/img/pict-time-bench-gc-normal.svg" alt="GC time normal distributions" /></p>

<p>By now you might have realized that negative times don’t make sense… this
suggests the normal distribution is not an appropriate distribution for
comparison. <a href="https://stats.stackexchange.com/a/203958">It appears that the exponential or Weibull distributions might
model this process better</a>, but for
now we’ll continue taking timings and memory usage to be normally distributed
for simplification.</p>

<p>Here are the equivalent values and plots for memory (all in MiB):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data-frame: 2 rows x 3 columns
┌───────────────────┬──────────────────┬─────────┐
│memory-σ           │memory-μ          │bench    │
├───────────────────┼──────────────────┼─────────┤
│0.22898033579570978│0.6772037663410619│bytes    │
├───────────────────┼──────────────────┼─────────┤
│0.23704268897914643│0.5486571085821722│record-dc│
└───────────────────┴──────────────────┴─────────┘
</code></pre></div></div>

<p><img src="/assets/img/pict-time-bench-memory-normal.svg" alt="Memory normal distributions in MiB" /></p>

<h2 id="confidence-intervals">Confidence Intervals</h2>

<p>To compute a confidence interval, we’ll take the distributions to be
t-distributed and compute properties of the t-statistic (for \(\alpha = 0.05\),
a 95% confidence interval). This interval tells us where the true mean falls
with 95% probability.</p>

<p>Let’s use a critical value of 1.96, which corresponds to an assumption that the
distributions are normal (given our large sample size, the t-distribution is
close to normal) and a 95% confidence interval. The formula (letting \(s\) be
the sample standard deviation, \(\bar{x}\) the sample mean, and \(N\) the number
of samples) is</p>

\[\bar{x} \pm 1.96 \frac{s}{N}\]

<p>Here are the low and high offsets of the intervals for memory and time:</p>

<ul>
  <li>memory
    <ul>
      <li>bytes: [0.6771 MiB, 0.6773 MiB]</li>
      <li>record-dc: [0.5486 MiB, 0.5487 MiB]</li>
    </ul>

    <p><img src="/assets/img/pict-time-bench-memory-confidence.svg" alt="Memory confidence intervals in MiB" /></p>
  </li>
  <li>cpu
    <ul>
      <li>bytes: [4.175, 4.176]</li>
      <li>record-dc: [2.0586, 2.0593]</li>
    </ul>

    <p><img src="/assets/img/pict-time-bench-cpu-confidence.svg" alt="CPU time confidence intervals" /></p>
  </li>
  <li>real
    <ul>
      <li>bytes: [4.225, 4.226]</li>
      <li>record-dc: [2.085, 2.086]</li>
    </ul>

    <p><img src="/assets/img/pict-time-bench-real-confidence.svg" alt="Real time confidence intervals" /></p>
  </li>
  <li>gc
    <ul>
      <li>bytes: [0.00648, 0.00658]</li>
      <li>record-dc: [0.00716, 0.00727]</li>
    </ul>

    <p><img src="/assets/img/pict-time-bench-gc-confidence.svg" alt="GC time confidence intervals" /></p>
  </li>
</ul>

<p>The plots are zoomed in because the intervals are so narrow thanks to our high
number of samples. We can be very confident that our sample means are close to
the true mean.</p>

<h2 id="statistical-tests">Statistical tests</h2>

<p>We want to compare the memory distributions across both benchmarks, and each of
the real, cpu, and gc times across both benchmarks. We’ll use the
<a href="https://docs.racket-lang.org/t-test/index.html"><code class="language-plaintext highlighter-rouge">welch-t-test</code> function from the <code class="language-plaintext highlighter-rouge">t-test</code>
library</a><sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, since we can’t assume
the variances are equal (though eyeball statistics suggests that gc variance is,
which is sensible since most gc times are 0).</p>

<p>The code to compute a t-test for memory distributions is short:</p>
<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">threading</span>
         <span class="nv">data-frame</span>
         <span class="nv">sawzall</span>
         <span class="nv">t-test</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">m</span>
  <span class="p">(</span><span class="nf">~&gt;</span> <span class="s">"memory.csv"</span> <span class="nv">df-read/csv</span>
      <span class="p">(</span><span class="nf">create</span> <span class="p">[</span><span class="nf">memory</span> <span class="p">(</span><span class="nf">memory</span><span class="p">)</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">memory</span> <span class="p">(</span><span class="nb">expt</span> <span class="mi">2</span> <span class="mi">20</span><span class="p">))])))</span>

<span class="p">(</span><span class="nb">apply</span>
 <span class="nv">welch-t-test</span>
 <span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">m</span>
     <span class="p">(</span><span class="nf">split-with</span> <span class="s">"bench"</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">df</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">df</span>
                <span class="p">(</span><span class="nf">slice</span> <span class="p">[</span><span class="nf">"memory"</span><span class="p">])</span>
                <span class="p">(</span><span class="nf">df-select</span> <span class="s">"memory"</span><span class="p">)))</span>
          <span class="nv">_</span><span class="p">)))</span>
</code></pre></div></div>

<p>The result for a p-value of \(0.01\) is \(1.53 \times 10^{-187}\). That is, we
can be extremely confident that the distributions have different means: we
reject the null hypothesis that the distributions have the same mean as the
likelihood of this sample occurring given said hypothesis is nearly 0.</p>

<p>Of note, this test suggests the distributions are different <em>despite
having close means</em>: the difference between the means (0.12854665775888974) is
23.42% of the smaller of the two means and 18.98% of the larger.</p>

<p>The code for time distributions is parameterized on the column:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">require</span> <span class="nv">threading</span>
         <span class="nv">data-frame</span>
         <span class="nv">sawzall</span>
         <span class="nv">t-test</span><span class="p">)</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">df-read/csv</span> <span class="s">"time.csv"</span><span class="p">))</span>

<span class="p">(</span><span class="nf">for/list</span> <span class="p">([</span><span class="nf">column</span> <span class="o">'</span><span class="p">(</span><span class="nf">"cpu"</span> <span class="s">"real"</span> <span class="s">"gc"</span><span class="p">)])</span>
  <span class="p">(</span><span class="nb">list</span> <span class="nv">column</span>
        <span class="p">(</span><span class="nb">apply</span>
         <span class="nv">welch-t-test</span>
         <span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">t</span>
             <span class="p">(</span><span class="nf">slice</span> <span class="p">(</span><span class="nf">all-in</span> <span class="p">(</span><span class="nb">list</span> <span class="s">"bench"</span> <span class="nv">column</span><span class="p">)))</span>
             <span class="p">(</span><span class="nf">split-with</span> <span class="s">"bench"</span><span class="p">)</span>
             <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">df</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">df</span>
                        <span class="p">(</span><span class="nf">slice</span> <span class="nv">column</span><span class="p">)</span>
                        <span class="p">(</span><span class="nf">df-select</span> <span class="nv">column</span><span class="p">)))</span>
                  <span class="nv">_</span><span class="p">)))))</span>
</code></pre></div></div>

<p>The results (again with p-value \(0.01\)):</p>
<ul>
  <li>cpu: \(0.0\)</li>
  <li>real: \(0.0\)</li>
  <li>gc: \(0.8196\)</li>
</ul>

<p>I’m actually shocked that the procedure produced an (inexact) 0, and I checked
the data being fed in. I can’t explain the result beyond gesturing at floating
point math; there’s no statistical realm where we accept that this occurrence is
impossible. For now, I’ll content myself with supposing that the calculation
produces such a small number that even Racket can’t keep up, and reject the null
hypothesis for CPU and real times (there is a statistically meaningful
difference in the time the two procedures take).</p>

<p>For GC times, of course, there is insufficient evidence to reject the null
hypothesis <em>as expected</em>. Most GC times are 0! It’s reasonably more likely that
the underlying distributions are actually the same one.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I feel justified in my choice of method based on the data from last time and
satisfied that I’m not relying entirely on eyeball statistics. The lack of
explanation for \(0.0\) is dissatisfying…</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>There have been <a href="https://racket.discourse.group/t/could-the-t-student-distribution-be-included-in-the-math-module/2999">several interesting conversations about performing
t-tests within Racket
lately</a>,
which lead to me include these additional links: <a href="https://onecompiler.com/racket/42j3n4wdn">pasted
code</a>, <a href="https://github.com/soegaard/math/blob/student-t/math-lib/math/private/distributions/impl/student-t.rkt">@soegaard’s
fork</a>
<a href="https://math.stackexchange.com/questions/4367570/transform-students-t-distribution-to-beta-distribution">how to build the distribution from its
parts</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="performance" /><category term="statistics" /><summary type="html"><![CDATA[I eliminate “eyeball statistics” from part 1. This post is based on Chelsea Troy’s “Data Safety” series, especially Quantitative Programming Knife Skills, Part 2.]]></summary></entry><entry><title type="html">Churn and Weight</title><link href="https://benknoble.github.io/blog/2024/08/07/churn-and-weight/" rel="alternate" type="text/html" title="Churn and Weight" /><published>2024-08-07T00:00:00+00:00</published><updated>2024-08-07T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/08/07/churn-and-weight</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/08/07/churn-and-weight/"><![CDATA[<p>I examine a metric that might be correlated with churn, and I posit a new
concept for code bases called weight. I also call attention to 2 tools for
measuring churn and weight.</p>

<h2 id="churn">Churn</h2>

<p>Churn is an attribute of functions and modules: those which tend to change
frequently are said to undergo heavy churn. This is typically a symptom of tight
coupling.</p>

<p>Measuring churn can be done, for example, by looking at how often files change
in Git history. In 2018 I stole <a href="https://github.com/garybernhardt/dotfiles/blob/main/bin/git-churn">Gary Bernhardt’s
<code class="language-plaintext highlighter-rouge">git-churn</code></a>
and <a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/git-churn">made it my
own</a>. For
example, here’s what it says on Frosthaven Manager:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git churn | head</span>
 117 scribblings/reference.scrbl
 101 server.rkt
  94 gui/manager.rkt
  90 gui/monsters.rkt
  77 defns.rkt
  73 info.rkt
  66 monster-db.rkt
  49 manager/state.rkt
  44 manager.rkt
  35 elements.rkt
</code></pre></div></div>

<p>Unsurprisingly, the reference documentation and web server change the most
frequently, followed closely by 2 of the largest and most important GUI
components (the composite whole and the monsters). The reference documentation
changes whenever a module is added, moved, or renamed, and the web server is
changing rapidly in response to player feedback.</p>

<p>Let’s examine a related idea: <em>weight</em>.</p>

<h2 id="weight">Weight</h2>

<p>I’m using the word “weight” to refer to both how heavy a module or function is
in terms of essential complexity and to how load-bearing it is in terms of
making the system do what it does. In a mature project, we probably expect to
find a few core modules to be heavy, with a (possibly long) tail of light
supplements.</p>

<p>Since heavy modules often sit at the core of the system, they are likely to have
either lots of churn (frequent changes to the core system) or little (a stable
core with frequent changes to the supplements). In other words, churn on heavy
core modules can give us an idea of how stable our core is: having the wrong
core design is a serious challenge to the life of the project.</p>

<p>How do we measure weight? As a start, I’ll use <em>relative percentages of the
code.</em> This sounds like lines of code, but it has a subtle difference: 10k lines
of code is only 1% of a codebase with 1 million lines, but dwarfs any system
with a mere few hundred. It’s not size that matters, it’s relative size.</p>

<p>Using my
<a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/code-percent"><code class="language-plaintext highlighter-rouge">code-percent</code></a>
program, we can tabulate relevant percentages and their cumulative effects.
Here’s how it runs on Frosthaven Manager:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git ls-files | code-percent</span>
RowNumber  File                                      PercentTotal  CumulativePercentTotal
1          server.rkt                                7.47149       7.47149
2          gui/monsters.rkt                          6.37762       13.8491
3          scribblings/programming-scenario.scrbl    4.56775       18.4169
4          manager/state.rkt                         3.9048        22.3217
5          defns/monsters.rkt                        3.62636       25.948
6          gui/manager.rkt                           2.87059       28.8186
7          gui/player-info.rkt                       2.27393       31.0925
8          gui/markdown.rkt                          2.11482       33.2074
9          elements.rkt                              1.93583       35.1432
10         scribblings/how-to-play.scrbl             1.9292        37.0724
<span class="c"># [snip]</span>
162        README.md                                 0.0265182     100
</code></pre></div></div>

<p>This gives a different picture of the code. The reference has disappeared
(supplanted by large documents), being a mere 30 lines relative to the 15k
total. But a few core pieces of functionality (state, game definitions, and GUI
pieces) have drifted to the surface, collectively taking up roughly one third of
the size of the code. Indeed, we might now question if <code class="language-plaintext highlighter-rouge">gui/markdown.rkt</code>, which
implements a “good enough for me” Markdown-to-GUI-text widget, is holding its
weight. Conversely, it might be time to try refactoring the server or monsters
GUI again. The server is not core in the layering of pieces, but it is core to
the app’s experience. It might even contain its own core of domain pieces, which
explains its weight.</p>

<p>One other trick we can do: we can get a neat idea of the size of the tail by
showing only the rows that bump us over major (cumulative) thresholds. For
example:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git ls-files | code-percent | awk 'BEGIN { target = 25; } NR == 1 { print; next; } $4 &gt;= target { print; target += 25; }'</span>
RowNumber  File                                      PercentTotal  CumulativePercentTotal
5          defns/monsters.rkt                        3,62636       25,948
19         defns/scenario.rkt                        1,18006       50,3116
50         gui/table.rkt                             0,550252      75,4243
162        README.md                                 0,0265182     100
</code></pre></div></div>

<p>While the first 5 files account for 25% of the code, it takes almost another 15
to reach 50%, then another 30 to reach 75% followed by a whopping 110 to
conclude. This matches at least our expectation of a long tail.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="project-management" /><category term="git" /><category term="frosthaven-manager" /><category term="racket" /><summary type="html"><![CDATA[I examine a metric that might be correlated with churn, and I posit a new concept for code bases called weight. I also call attention to 2 tools for measuring churn and weight.]]></summary></entry></feed>