<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-10-13T22:53:02+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Solving Network Hardware Hangs on Framework Desktop</title><link href="https://benknoble.github.io/blog/2025/10/13/framework-gentoo-network-hang/" rel="alternate" type="text/html" title="Solving Network Hardware Hangs on Framework Desktop" /><published>2025-10-13T00:00:00+00:00</published><updated>2025-10-13T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/10/13/framework-gentoo-network-hang</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/10/13/framework-gentoo-network-hang/"><![CDATA[<p>I’ve recently installed Gentoo on my new Framework Desktop, and for a while the
network would hang, causing any program that touched the hardware to also crap
out.</p>

<p>Here are some symptoms:</p>
<ul>
  <li>Thinks chug along just fine, until</li>
  <li>The network goes down and commands start freezing. We’re talking no C-c, no
C-\, no <code class="language-plaintext highlighter-rouge">pkill -9</code>: just dead in the water. (I hadn’t solved switching
consoles with Alt-Function keys yet, so fortunately I had tmux running.)
    <ul>
      <li>Notably, commands like <code class="language-plaintext highlighter-rouge">emerge</code> hang when they get to network steps.
Various <code class="language-plaintext highlighter-rouge">ip</code> &amp; <code class="language-plaintext highlighter-rouge">ifconfig</code> style commands hang immediately.</li>
      <li>Commands like <code class="language-plaintext highlighter-rouge">nmcli</code> and <code class="language-plaintext highlighter-rouge">ping</code> don’t hang, but don’t work.</li>
      <li>I’m pretty sure <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> isn’t being touched.</li>
    </ul>
  </li>
  <li>The <code class="language-plaintext highlighter-rouge">NetworkManager</code> daemon is running, but:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">top</code> shows “D” (d-sleep) and <code class="language-plaintext highlighter-rouge">ps</code> shows “Dsl”</li>
      <li><code class="language-plaintext highlighter-rouge">rc-status</code> reports NetworkManager as active, but <code class="language-plaintext highlighter-rouge">nmcli g</code> says its down</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">rc-service NetworkManager restart</code> fails with</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  * Caching service dependencies ... [ ok ]
  * Unmounting network filesystems ... [ ok ]
  * Stoppping NetworkManager ...
  * start-stop-daemon: 1 rocesses refused to stop [ !! ]
  * ERROR: NetworkManager failed to stop
  * Mounting network filesystems ... [ ok ]
</code></pre></div>        </div>
      </li>
      <li>similarly with <code class="language-plaintext highlighter-rouge">s/restart/stop</code>, and <code class="language-plaintext highlighter-rouge">pkill -9 NetworkManager</code> has no
effect!
        <ul>
          <li>I didn’t understand how <code class="language-plaintext highlighter-rouge">zap</code> worked at the time, so I wonder if that
would have helped :thinking:</li>
        </ul>
      </li>
      <li>shutting down complains about not stopping the NetworkManager, too</li>
    </ul>
  </li>
</ul>

<p>I checked my hardware with <code class="language-plaintext highlighter-rouge">lspci</code>, which I’d fortunately installed during the
main system installation process, and with <code class="language-plaintext highlighter-rouge">lspci -k</code> I found out my network
card is</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c0:00.0 Mediatek MT7925 (RZ717) Wi-Fi 7 160MHz [14c3:0717]
</code></pre></div></div>

<p>with kernel module (in use) <code class="language-plaintext highlighter-rouge">mt7925e</code>.</p>

<p>First, I tried turning off WiFi power saving <a href="https://forum.garudalinux.org/t/mediatek-mt7925e-wifi-speed-very-slow-on-close-to-fresh-install-and-some-updates/41845/11">as recommended by Garuda folks</a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s1">'[connection]'</span> <span class="s1">'wifi.powersave = 0'</span> | doas <span class="nb">tee</span> /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf
</code></pre></div></div>

<p>That didn’t help: a little while into my next reboot, the hang happened again.
Then I tried <a href="https://forum.garudalinux.org/t/mediatek-mt7925e-wifi-speed-very-slow-on-close-to-fresh-install-and-some-updates/41845/9">disabling the “Active State Power Management” for my network
card</a>,
which is apparently cursed with this problem:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'options mt7925e disable_aspm=1'</span> | doas <span class="nb">tee</span> /etc/modprobe.d/7925e_wifi.conf
</code></pre></div></div>

<p>That seems to have done the trick, so I’ll delete the NetworkManager settings.</p>

<h2 id="a-few-unrelated--things">A few unrelated (?) things</h2>

<p>I don’t have kernel logs for the problematic scenario, but now that my system is
running normally I can eliminate a few things from the problem space.</p>

<p>In both working and non-working configurations, I saw repeated logs in <code class="language-plaintext highlighter-rouge">dmesg</code>
for the network:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>disconnect from AP &lt;MAC&gt; for new auth to &lt;other MAC&gt;
authenticate with &lt;other MAC&gt; (local address=&lt;my MAC&gt;)
send auth to &lt;other MAC&gt; (try 1/3)
authenticate with &lt;other MAC&gt; (local address=&lt;my MAC&gt;)
send auth to &lt;2nd other MAC&gt; (try 1/3)
authenticated
associate with &lt;2nd other MAC&gt; (try 1/3)
RX AssocResp from &lt;2nd other MAC&gt; (capab=0x1511 status=0 aid=3)
associated
Limiting TX power to 30 (30 - 0) dBm as advertised by &lt;2nd other MAC&gt;
diassociated from &lt;2nd other MAC&gt; (Reason: 1=UNSPECIFIED)
</code></pre></div></div>

<p>Often these occur every 5 minutes and loop for a while, then die away.</p>

<p>I saved some logs with</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ echo count from to;
  grep 'disconnect from AP' /var/log/messages |
    grep -o '\([[:xdigit:]][[:xdigit:]]:\?\)\{6\}' | paste - - |
    sort | uniq -c; } | column -t
</code></pre></div></div>

<p>which gave for example</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>count  from               to
3      &lt;prefix&gt;:2f:a9:51  &lt;prefix&gt;:2f:a9:59
22     &lt;prefix&gt;:2f:a9:51  &lt;prefix&gt;:d2:14:29
1      &lt;prefix&gt;:d2:14:21  &lt;prefix&gt;:2f:a9:59
2      &lt;prefix&gt;:d2:14:21  &lt;prefix&gt;:d2:14:29
</code></pre></div></div>

<p>As far as I can tell, the (masked) <code class="language-plaintext highlighter-rouge">&lt;prefix&gt;</code> there matches the output from
another connected device when checking the router with <code class="language-plaintext highlighter-rouge">arp -a</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gr6exx0c-a940.lan (192.168.2.1) at &lt;prefix&gt;:2f:a9:40 on en0 ifscope [ethernet]
</code></pre></div></div>

<p>And my management app says</p>
<ul>
  <li>the router has a MAC of <code class="language-plaintext highlighter-rouge">&lt;prefix&gt;:2f:a9:41</code></li>
  <li>the extender (MoCA) has a MAC of <code class="language-plaintext highlighter-rouge">&lt;prefix&gt;:d2:14:10</code></li>
</ul>

<p>So clearly something is going on here, and the NetworkManager is having trouble
deciding which connection to use?</p>

<h2 id="miscellany">Miscellany</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dmesg -Hw</code> is much nicer than regular <code class="language-plaintext highlighter-rouge">dmesg</code></li>
  <li><code class="language-plaintext highlighter-rouge">shutdown -hP</code> didn’t power off, but <code class="language-plaintext highlighter-rouge">reboot -p</code> did reboot</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">lspci -k &gt;/dev/null</code> complains:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  pcilib: Error reading /sys/bus/pci/devices/0000:00:08.3/label: Operation not permitted
</code></pre></div>    </div>

    <p>but running with usual output doesn’t.</p>
  </li>
  <li>
    <p>Once I saw dmesg logs about my SSD?</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  block nvme0n1: the capability attribute has been deprecated
  No UUID available providing old NGUID
</code></pre></div>    </div>
  </li>
  <li>Related:
    <ul>
      <li><a href="https://community.frame.work/t/framework-13-amd-ai-wifi-issue-on-arch-linux/71019/2">https://community.frame.work/t/framework-13-amd-ai-wifi-issue-on-arch-linux/71019/2</a></li>
      <li><a href="https://forum.garudalinux.org/t/mediatek-mt7925e-wifi-speed-very-slow-on-close-to-fresh-install-and-some-updates/41845/6">https://forum.garudalinux.org/t/mediatek-mt7925e-wifi-speed-very-slow-on-close-to-fresh-install-and-some-updates/41845/6</a></li>
    </ul>
  </li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="Blog" /><category term="linux" /><category term="network" /><category term="gentoo" /><summary type="html"><![CDATA[I’ve recently installed Gentoo on my new Framework Desktop, and for a while the network would hang, causing any program that touched the hardware to also crap out.]]></summary></entry><entry><title type="html">Personal Commit Statistics</title><link href="https://benknoble.github.io/blog/2025/09/19/cstats/" rel="alternate" type="text/html" title="Personal Commit Statistics" /><published>2025-09-19T00:00:00+00:00</published><updated>2025-09-19T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/09/19/cstats</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/09/19/cstats/"><![CDATA[<p>Here’s some statistics on commits I’ve authored collected from <a href="/blog/2019/08/14/cstat-efficiencies/"><code class="language-plaintext highlighter-rouge">git-cstat</code></a> over a few work and open-source
repositories.</p>

<h2 id="min-max-average-commit-length-in-words">Min, max, average commit length in words</h2>

<p><em>Note the logarithmic x-axis (words).</em></p>

<p>With my Dotfiles included:</p>

<p><img src="/assets/img/cstats-2025-09-18-with-dotfiles.svg" alt="Commit stats distributions with Dotfiles" /></p>

<p>Without my Dotfiles included:</p>

<p><img src="/assets/img/cstats-2025-09-18.svg" alt="Commit stats distributions without Dotfiles" /></p>

<h2 id="commentary">Commentary</h2>

<ul>
  <li>Short commits are mostly <code class="language-plaintext highlighter-rouge">init</code>, <code class="language-plaintext highlighter-rouge">chore: upgrade dependencies</code>, things like
that. Occasionally my shortest contribution to a project is long, though! I
think this happens most when I contribute to open source or innersource
projects where I need to spell out my reasoning more clearly regardless of the
commit.</li>
  <li>Some extremely long commits are the result of squash-and-merge defaults at
work. A few projects I’ve worked on required that as the only merge strategy
and mostly kept the default “concatenate all commit messages” as the final
message. So the reality is that several reasonably-long commits were squashed
into a monster.</li>
  <li>
    <p>My average average drops from a little over 40 to a little over 20 when
including my Dotfiles. That makes sense: my Dotfiles have a long life, going
back to before I use Git in the way I do today. Even now there are plenty of
~10 word commit messages and only a few long ones: for example, using my
<a href="/blog/2019/09/11/fields/"><code class="language-plaintext highlighter-rouge">fields</code></a> and <a href="https://github.com/benknoble/Dotfiles/blob/850b629f4506debb91efcc0dfe0d7c77d7c0924d/links/zshfns/bucket10"><code class="language-plaintext highlighter-rouge">bucket10</code></a><sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>
scripts:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  λ g cstat len | fields 1 | bucket10 | sort -n
  1     21 ██
  2    191 █████████████████████
  3    648 ███████████████████████████████████████████████████████████████████████
  4    380 ██████████████████████████████████████████
  5    346 ██████████████████████████████████████
  6    263 █████████████████████████████
  7    172 ███████████████████
  8    111 ████████████
  9     68 ███████
  10   178 ████████████████████
  20   209 ███████████████████████
  30   101 ███████████
  40    73 ████████
  50    16 ██
  60    18 ██
  70    14 ██
  80    15 ██
  90     7 █
  100   13 █
  200    4
  700    1
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="raw-data">Raw Data</h2>

<p>A comment marks the Dotfiles data</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># work
# Short commits: "init", "chore: upgrade dependencies", etc.
# Extremely long commits: squashed several reasonable lengths
min: 1
max: 55
avg: 11.8571
min: 3
max: 662
avg: 50.4
min: 4
max: 179
avg: 41.8889
min: 208
max: 356
avg: 282
min: 1
max: 202
avg: 43.5833
min: 23
max: 3995
avg: 1141.25
min: 2
max: 8046
avg: 193.755
min: 2
max: 1145
avg: 62.1368
min: 1
max: 27
avg: 6.42222
min: 2
max: 251
avg: 55.1667
min: 7
max: 68
avg: 20.2222
min: 93
max: 598
avg: 299
min: 4
max: 9
avg: 7
min: 2
max: 279
avg: 104.364
min: 4
max: 98
avg: 33.3636
min: 3
max: 120
avg: 21.1
min: 1
max: 105
avg: 13.8854
min: 1
max: 215
avg: 10.2741
min: 1
max: 160
avg: 15.6222
min: 4
max: 464
avg: 115.13

# OSS
min: 1
max: 730
avg: 17,1961
min: 41
max: 343
avg: 103,4
min: 2
max: 102
avg: 23,9048
# Dotfiles
min: 1
max: 705
avg: 10,3589
</code></pre></div></div>

<h2 id="pict-script">Pict script</h2>

<p>This is also <a href="https://github.com/benknoble/Dotfiles/blob/850b629f4506debb91efcc0dfe0d7c77d7c0924d/links/bin/cstats-pics">in my <code class="language-plaintext highlighter-rouge">bin</code> directory</a>.</p>

<p>It would arguably have been more efficient to read the data into a tidy
dataframe from the outset, but I was more confident in this version of the
parsing code, and it works.</p>

<p>The empty <code class="language-plaintext highlighter-rouge">racket/gui</code> require is to make it easy to replace <code class="language-plaintext highlighter-rouge">(save-pict out)</code>
with <code class="language-plaintext highlighter-rouge">show-pict</code> when you want just see the results. I experimented with an
interface to either show or save the picture, and I didn’t come up with anything
I particularly liked.</p>

<p>PS Apparently the syntax highlighter here (rouge) doesn’t know how to parse
Racket’s reader syntax for (Perl-ish) regular expressions.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! /usr/bin/env racket</span>
<span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
<span class="c1">; vim: ft=racket</span>

<span class="p">(</span><span class="k">require</span> <span class="p">(</span><span class="nf">only-in</span> <span class="nv">racket/gui</span><span class="p">)</span>
         <span class="nv">pict</span>
         <span class="nv">threading</span>
         <span class="nv">data-frame</span>
         <span class="nv">sawzall</span>
         <span class="nv">graphite</span><span class="p">)</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nf">data-file</span> <span class="nv">out</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:args</span> <span class="p">(</span><span class="nf">data-file</span> <span class="nv">out</span><span class="p">)</span>
   <span class="p">(</span><span class="nb">values</span> <span class="nv">data-file</span> <span class="nv">out</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define-values</span> <span class="p">(</span><span class="nb">min</span> <span class="nv">max</span> <span class="nv">avg</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for/lists</span> <span class="p">(</span><span class="nf">min?</span> <span class="nv">max?</span> <span class="nv">avg?</span>
              <span class="nt">#:result</span> <span class="p">(</span><span class="nb">values</span> <span class="p">(</span><span class="nf">filter</span> <span class="nv">values</span> <span class="nv">min?</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">filter</span> <span class="nv">values</span> <span class="nv">max?</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">filter</span> <span class="nv">values</span> <span class="nv">avg?</span><span class="p">)))</span>
             <span class="p">([</span><span class="nf">line</span> <span class="p">(</span><span class="nf">in-lines</span> <span class="p">(</span><span class="nb">open-input-file</span> <span class="nv">data-file</span><span class="p">))])</span>
    <span class="p">(</span><span class="nf">match</span> <span class="nv">line</span>
      <span class="p">[(</span><span class="nb">pregexp</span> <span class="o">#</span><span class="nv">px"^min:</span> <span class="p">([[</span><span class="nf">:digit:</span><span class="p">]</span><span class="o">.</span><span class="p">]</span><span class="nv">+</span><span class="p">)</span><span class="s">" (list _ (app string-&gt;number min))) (values min #f #f)]
      [(pregexp #px"</span><span class="nv">^max:</span> <span class="p">([[</span><span class="nf">:digit:</span><span class="p">]</span><span class="o">.</span><span class="p">]</span><span class="nv">+</span><span class="p">)</span><span class="s">" (list _ (app string-&gt;number max))) (values #f max #f)]
      [(pregexp #px"</span><span class="nv">^avg:</span> <span class="p">([[</span><span class="nf">:digit:</span><span class="p">]</span><span class="o">.</span><span class="p">]</span><span class="nv">+</span><span class="p">)</span><span class="s">" (list _ (app string-&gt;number avg))) (values #f #f avg)]
      [_ (values #f #f #f)])))

(define df
  (make-data-frame #:series (list (make-series "</span><span class="nv">min"</span> <span class="nt">#:data</span> <span class="p">(</span><span class="nb">list-&gt;vector</span> <span class="nv">min</span><span class="p">))</span>
                                  <span class="p">(</span><span class="nf">make-series</span> <span class="s">"max"</span> <span class="nt">#:data</span> <span class="p">(</span><span class="nb">list-&gt;vector</span> <span class="nv">max</span><span class="p">))</span>
                                  <span class="p">(</span><span class="nf">make-series</span> <span class="s">"avg"</span> <span class="nt">#:data</span> <span class="p">(</span><span class="nb">list-&gt;vector</span> <span class="nv">avg</span><span class="p">)))))</span>

<span class="p">(</span><span class="nf">~&gt;</span> <span class="nv">df</span>
    <span class="p">(</span><span class="nf">pivot-longer</span> <span class="nv">everything</span> <span class="nt">#:names-to</span> <span class="s">"stat"</span> <span class="nt">#:values-to</span> <span class="s">"words"</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">graph</span> <span class="nt">#:data</span> <span class="nv">_</span>
            <span class="nt">#:mapping</span> <span class="p">(</span><span class="nf">aes</span> <span class="nt">#:y</span> <span class="s">"stat"</span> <span class="nt">#:x</span> <span class="s">"words"</span><span class="p">)</span>
            <span class="nt">#:y-label</span> <span class="s">"Stat"</span> <span class="nt">#:x-label</span> <span class="s">"Number of words"</span>
            <span class="nt">#:x-transform</span> <span class="nv">logarithmic-transform</span>
            <span class="nt">#:title</span> <span class="s">"Commit message length (words)"</span>
            <span class="p">(</span><span class="nf">boxplot</span> <span class="nt">#:invert?</span> <span class="no">#t</span> <span class="nt">#:show-outliers?</span> <span class="no">#t</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">points</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">save-pict</span> <span class="nv">out</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Based on that old <a href="/blog/2019/09/27/perl-v-bash/">post about Perl</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="Blog" /><category term="git" /><summary type="html"><![CDATA[Here’s some statistics on commits I’ve authored collected from git-cstat over a few work and open-source repositories.]]></summary></entry><entry><title type="html">A kludgy new way to git-blame</title><link href="https://benknoble.github.io/blog/2025/09/17/blame/" rel="alternate" type="text/html" title="A kludgy new way to git-blame" /><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/09/17/blame</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/09/17/blame/"><![CDATA[<p>Lately I find myself feeding <code class="language-plaintext highlighter-rouge">git grep</code> results to <code class="language-plaintext highlighter-rouge">git blame</code> to help identify
points of contact for a piece of code. I’ve scripted a few hacks together to
make life easier.</p>

<p><strong>Call for help:</strong> If you have ideas on how to better parse <code class="language-plaintext highlighter-rouge">git grep</code> output or
feed it to <code class="language-plaintext highlighter-rouge">git blame</code>, please let me know <a href="https://github.com/benknoble/Dotfiles/">on
GitHub</a> or in the comments.</p>

<p>When I’m interested in who to talk to about a small chunk of code, I usually
navigate to it in Vim and run <a href="https://github.com/tpope/vim-fugitive/blob/61b51c09b7c9ce04e821f6cf76ea4f6f903e3cf4/doc/fugitive.txt#L57"><code class="language-plaintext highlighter-rouge">:Git
blame</code></a>.
I might also throw the file or containing directory at <code class="language-plaintext highlighter-rouge">git shortlog</code> to get a
sense of who’s active in the area.</p>

<p>My current <code class="language-plaintext highlighter-rouge">$DAYJOB</code> includes working with a large monorepo, and I frequently
have questions of the form “who should I ask about feature X that cuts across
many different code modules?”—in such a situation, I’ve recently been piping
<code class="language-plaintext highlighter-rouge">git grep</code> into <code class="language-plaintext highlighter-rouge">git blame</code>. (Feeding <code class="language-plaintext highlighter-rouge">git grep --files-with-matches</code> into <code class="language-plaintext highlighter-rouge">git
shortlog</code> is not awful, but typically gives too many contacts.)</p>

<p>The trouble is, each time I’ve done this I’ve had to recraft the pipeline. Often
it’s some variant<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> of</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">grep</span> … | fields <span class="nt">-f</span>: 1 2 | xargs <span class="nt">-L1</span> sh <span class="nt">-c</span> <span class="s1">'git blame -L$1,$1 $0'</span>
</code></pre></div></div>

<p>This doesn’t quite work correctly if I grep a specific revision. When I’m on a
topic branch and a teammate has a question, I might do</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git f <span class="c"># short for fetch, and I have fetch.all=true configured</span>
git <span class="nb">grep</span> … origin | fields <span class="nt">-f</span>: <span class="o">{</span>1..3<span class="o">}</span> | xargs <span class="nt">-L1</span> sh <span class="nt">-c</span> <span class="s1">'git blame -L $2,$2 $1 $0'</span>
</code></pre></div></div>

<p>Argh! And, although I haven’t lifted this limitation in my script, if I throw
<code class="language-plaintext highlighter-rouge">-C</code>-style context results in there, this won’t work. If we get binary matches,
this won’t work. Etc.</p>

<p>I got tired of trying to get this right interactively and figured I’d capture
the whole thing as a script. So let’s start with that.</p>

<h2 id="git-greb-blame-matching-lines"><code class="language-plaintext highlighter-rouge">git-greb</code>: blame matching lines</h2>

<p>If <code class="language-plaintext highlighter-rouge">grep</code> comes from <code class="language-plaintext highlighter-rouge">:g/re/p</code> in <code class="language-plaintext highlighter-rouge">ed(1)</code>, then <code class="language-plaintext highlighter-rouge">greb</code> is the natural extension
to a “b for blame” verb.</p>

<p>The <a href="https://github.com/benknoble/Dotfiles/commit/68002c7e705a1bb383160d09a89b57a858d9268d">initial version of the
script</a>
works for the main use cases above:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git greb …
git greb -r origin -- …
</code></pre></div></div>

<p>Yahoo! And if I need to build more “blame input from X” tools, I now have <code class="language-plaintext highlighter-rouge">git
blame-stdin</code> as plumbing I can re-use. That saves me from reconstructing
different <code class="language-plaintext highlighter-rouge">fields … | xargs …</code> pipelines.</p>

<p>Further, <code class="language-plaintext highlighter-rouge">git greb</code> supports most of the grep flags I care about for this sort
of search.</p>

<p>However, let’s talk about the ugly…</p>

<h2 id="git-grep-is-not-designed-for-machine-consumption"><code class="language-plaintext highlighter-rouge">git grep</code> is not designed for machine consumption</h2>

<p>In fact, <code class="language-plaintext highlighter-rouge">git grep</code> seems to go out of it’s way to avoid being useful as input
to a script! Let’s see if I can explain how: config and command line options can
dramatically affect output formats, which is tough to handle if you want to
support most <code class="language-plaintext highlighter-rouge">git grep</code> invocations. I originally planned for <code class="language-plaintext highlighter-rouge">git greb</code> to be
as easy as running <code class="language-plaintext highlighter-rouge">git grep …</code>, then <code class="language-plaintext highlighter-rouge">^p^b</code> in my shell would turn that into
<code class="language-plaintext highlighter-rouge">git greb …</code>. Alas, not so. Some examples of what goes wrong:</p>

<ul>
  <li>We want to keep line numbers for effective blaming, so anything that changes
that format is out. That mean <code class="language-plaintext highlighter-rouge">-h</code>, <code class="language-plaintext highlighter-rouge">-l</code>, <code class="language-plaintext highlighter-rouge">-c</code>, etc.</li>
  <li>We don’t want to try to open files in the pager, but that was never going to
be supported. Still, we have to reject that option.</li>
  <li>Various options throw other noise into the output (<code class="language-plaintext highlighter-rouge">--break</code>, <code class="language-plaintext highlighter-rouge">--heading</code>).</li>
  <li>None of the context options (<code class="language-plaintext highlighter-rouge">-A</code>, <code class="language-plaintext highlighter-rouge">-B</code>, <code class="language-plaintext highlighter-rouge">-C</code>, <code class="language-plaintext highlighter-rouge">-p</code>, <code class="language-plaintext highlighter-rouge">-W</code>) use the same
<code class="language-plaintext highlighter-rouge">file:line</code> formatting, so we can’t use them at all (or we have to try to
parse all possible formats, of which there are several, without screwing
things up when a filename contains a hyphen or equals sign; we’re already
screwed if a filename contains a colon).</li>
  <li>And finally: <code class="language-plaintext highlighter-rouge">-z</code> for nul-delimited output <em>still isn’t sufficient</em>: we do get
<code class="language-plaintext highlighter-rouge">file&lt;nul&gt;line&lt;nul&gt;</code>, the revision (if present) is prepended with <code class="language-plaintext highlighter-rouge">rev:</code>. But
I can’t guarantee that doesn’t contain a colon, since <code class="language-plaintext highlighter-rouge">:/post:</code> is a valid
revision (at least on this website’s code) and is displayed as typed! Further,
parsing nul-delimited lines in a shell script is fraught.</li>
</ul>

<p>I was originally planning to support non-trivial filenames, but it quickly
became too much work. So for now, I’m supporting filenames that don’t have to be
escaped without <code class="language-plaintext highlighter-rouge">-z</code>, and that don’t contain a colon. I’m also explicitly
rejecting any unsupported <code class="language-plaintext highlighter-rouge">git grep</code> option to make things easier.</p>

<h2 id="git-grebs-interface-is-ugly"><code class="language-plaintext highlighter-rouge">git greb</code>’s interface is ugly</h2>

<p>Yeah. Because of all the munging above, and because I need to feed a revision to
<code class="language-plaintext highlighter-rouge">git blame</code> when one is present but not have ambiguous parsing that sometimes
gets it wrong, I have <code class="language-plaintext highlighter-rouge">git-greb</code> take a <code class="language-plaintext highlighter-rouge">--revision &lt;rev&gt;</code> flag. But if it has
flags, it has to delimit between its flags and <code class="language-plaintext highlighter-rouge">git-grep</code>’s flags. That’s the
first <code class="language-plaintext highlighter-rouge">--</code> in its synopsis. (If you don’t use any options, you don’t need it.)</p>

<p><em>Then</em>, I need to reinsert the revision at the end of the <code class="language-plaintext highlighter-rouge">git grep</code> command
(but before any pathspecs), so if you provide a pathspec and a revision you
<em>must</em> give the second <code class="language-plaintext highlighter-rouge">--</code> to separate the pathspec from the previous
arguments. Ugh. (The code isn’t particularly pretty, either.)</p>

<p>At least I had the foresight to include <code class="language-plaintext highlighter-rouge">-v</code> as a debugging aid in both scripts:
that’s my way<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup> of having scripts output the Git commands they run, which is
also useful when I share the outputs with other folks so they can see what I
did.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p><a href="/blog/2019/09/11/fields/">My fields script is described on this blog</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>My <a href="/blog/2024/11/15/useful-utilities/#git"><code class="language-plaintext highlighter-rouge">git-div</code> script</a> was my first to support this. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Lately I find myself feeding git grep results to git blame to help identify points of contact for a piece of code. I’ve scripted a few hacks together to make life easier.]]></summary></entry><entry><title type="html">More on the AI bubble</title><link href="https://benknoble.github.io/blog/2025/09/06/ai-bubble/" rel="alternate" type="text/html" title="More on the AI bubble" /><published>2025-09-06T00:00:00+00:00</published><updated>2025-09-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/09/06/ai-bubble</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/09/06/ai-bubble/"><![CDATA[<p>Say the hard things.</p>

<p>I’ve <a href="/blog/2025/04/18/skepticism/">previously written some of my own criticism</a> and <a href="/blog/2025/08/09/signal-boost/">signal-boosted others</a>, so let’s tie a few more threads together.</p>

<p>Ed Zitron famously writes about the AI bubble these days. I’ve just read Baldur
Bjarnason’s <a href="https://www.baldurbjarnason.com/2025/the-melancholy-of-history-rhyming/">comparison to the financial bubble and Icelandic
nationalism</a>,
wherein he mentions “accountability sinks” (a phrase I’ve mostly learned from
Cory Doctorow). And finally, Ron Jeffries of Agile and XP fame <a href="https://ronjeffries.com/articles/-w025/y/w/"><em>leads</em> with
“tools of the oppressor”</a>.</p>

<p>When I said “the development and use of LLMs consistently harms along the axes
which I care more about,” these are the axes I mean. Politically, economically,
and socially, LLMs chain us to the whims of oppressors, fascists, and
monopolists who seek to enshrine their right to cheat us of ours.</p>

<p>“Rights for me, not for thee.”</p>

<p>Gross. I don’t want that world: remember when we had some protection from all
the scams? Consumer harms? Plague? Those shields weren’t perfect, but to see
folks now twist the very real history of racism in all aspects of this society
to argue that the protections were the <em>problem</em> is horrific.</p>

<p>I may not trust the government to make the best decision for me, but I sure as
hell don’t trust oppressors, fascists, and monopolists either. In a functioning
democracy backed by experts, at least I stand a chance of making a good
decision and being protected from the worst harms.</p>

<p>According to the Wall Street Journal article “Florida Seeks to End Vaccine
Mandates for Schoolchildren” (2025 September 3rd), Michael Ramey said</p>

<blockquote>
  <p>Parents are capable of making these [vaccination] decisions, and will by
nature safeguard the best interests of their children.</p>
</blockquote>

<p>This is no lie<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Yet it is absurd to claim that, in this era of
misinformation and <a href="https://pluralistic.net/tag/epistemology/">epistemological
crisis</a>, any one of us can reliably
sift through all the information we need to make a reasonable-enough judgement
to keep ourselves and our families safe.</p>

<p>But that’s what we’re required to do when we fire all the experts and poison the
wells of knowledge.</p>

<p>Isn’t that what the LLM bubblers are clamoring for?</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Except when it is: parents abuse children. According to the National
Children’s Alliance, <a href="https://www.nationalchildrensalliance.org/media-room/national-statistics-on-child-abuse/">76% of substantiated abuse charges in 2022 fell on a
parent or
guardian</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><summary type="html"><![CDATA[Say the hard things.]]></summary></entry><entry><title type="html">Recent LLM-hype critiques</title><link href="https://benknoble.github.io/blog/2025/08/09/signal-boost/" rel="alternate" type="text/html" title="Recent LLM-hype critiques" /><published>2025-08-09T00:00:00+00:00</published><updated>2025-08-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/08/09/signal-boost</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/08/09/signal-boost/"><![CDATA[<p>I’d like to signal-boost a couple of well-written critiques.</p>

<ul>
  <li>Luna Winters’s <a href="https://blog.foxtrotluna.social/theyre-putting-blue-food-coloring-in-everything/">They’re putting blue food coloring in everything</a></li>
  <li>Colin Cornaby’s <a href="https://www.colincornaby.me/2025/08/in-the-future-all-food-will-be-cooked-in-a-microwave-and-if-you-cant-deal-with-that-then-you-need-to-get-out-of-the-kitchen/">In the Future All Food Will Be Cooked in a Microwave, and if You Can’t Deal With That Then You Need to Get Out of the Kitchen</a></li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><summary type="html"><![CDATA[I’d like to signal-boost a couple of well-written critiques.]]></summary></entry><entry><title type="html">A note about making Racket languages without installing them as a package</title><link href="https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package/" rel="alternate" type="text/html" title="A note about making Racket languages without installing them as a package" /><published>2025-07-26T00:00:00+00:00</published><updated>2025-07-26T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package/"><![CDATA[<p>This trick comes from Matthew Flatt via the Racket Discord.</p>

<p>Usually, when creating a Racket <code class="language-plaintext highlighter-rouge">#lang</code> and customizing the reader, the reader
needs to produce a module form like</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">module</span> <span class="nv">&lt;name&gt;</span> <span class="nv">&lt;initial-import-module&gt;</span>
  <span class="nv">body</span><span class="p">)</span>
</code></pre></div></div>

<p>and the <code class="language-plaintext highlighter-rouge">&lt;initial-import-module&gt;</code> is best resolved as a reference to an
installed collection. That is, instead of <code class="language-plaintext highlighter-rouge">"mylang/expander.rkt"</code>, we should use
<code class="language-plaintext highlighter-rouge">mylang/expander</code>: the former is resolved relative to the PWD of the module
being expanded!</p>

<p>To make this work typically requires an installed package or linked files. This
is not a big hurdle for most Racket hackers, but might be confusing for
students.</p>

<p>When using <code class="language-plaintext highlighter-rouge">#lang s-exp</code>, of course, you can provide a relative path to an
expander module. This works if you don’t need a custom reader. If you do, the
language syntax is restricted so that <code class="language-plaintext highlighter-rouge">#lang "mylang.rkt"</code> will never work.</p>

<p>We <em>can</em> use a trick so that our reader can output a variant on the original
relative module path, though. That means our custom reader can yield an expander
module that isn’t in an installed package, like the title suggests.</p>

<p>We need to create a module path that works regardless of location, but derive it
from the relative path. (You’ll still need non-relative paths to make
documentation work everywhere, I think.)</p>

<p>Here’s the code.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">module</span> <span class="nv">reader</span> <span class="nv">syntax/module-reader</span>
  <span class="nt">#:language</span> <span class="p">(</span><span class="nf">collapse-module-path-index</span>
              <span class="p">(</span><span class="nb">module-path-index-join</span> <span class="s">"mylang/expander.rkt"</span>
                                      <span class="p">(</span><span class="nb">variable-reference-&gt;module-path-index</span>
                                       <span class="p">(</span><span class="nf">#%variable-reference</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">require</span> <span class="nv">syntax/modcollapse</span><span class="p">))</span>
</code></pre></div></div>

<p>Matthew says:</p>

<blockquote>
  <p>I’m not sure this solves any problem for you, but you can make a module path
within <code class="language-plaintext highlighter-rouge">syntax/module-reader</code> relative by using <code class="language-plaintext highlighter-rouge">#:language</code>, which has an
expression afterward instead of a literal. (It’s something I’ve wanted often
enough that <code class="language-plaintext highlighter-rouge">rhombus/reader</code> treats a relative path like this, instead of like
<code class="language-plaintext highlighter-rouge">syntax/module-reader</code>).</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This trick comes from Matthew Flatt via the Racket Discord.]]></summary></entry><entry><title type="html">A note about building executables with Racket</title><link href="https://benknoble.github.io/blog/2025/06/19/racket-exe/" rel="alternate" type="text/html" title="A note about building executables with Racket" /><published>2025-06-19T00:00:00+00:00</published><updated>2025-06-19T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/19/racket-exe</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/19/racket-exe/"><![CDATA[<p>This information is collected from my and other Racketeers dive into the
documentation in one attempt to form a cohesive picture in response to the
question “How do I use custom icons with GUI executables?”</p>

<p>The extremely short version: changing the icon is something that happens at the
point where you build an executable, not when running inside <code class="language-plaintext highlighter-rouge">racket</code>, DrRacket,
etc. You control this by setting up your project as a package with an
<code class="language-plaintext highlighter-rouge">info.rkt</code>. See <a href="https://docs.racket-lang.org/raco/setup-info.html">Controlling <code class="language-plaintext highlighter-rouge">raco
setup</code></a>.</p>

<p>Those docs will give you info for the <code class="language-plaintext highlighter-rouge">gracket-launcher-libraries</code> and
<code class="language-plaintext highlighter-rouge">gracket-launcher-names</code> directives, which in turn lead you to the
<code class="language-plaintext highlighter-rouge">racket-launcher-names</code> directive. That directive explains that it makes use of
<code class="language-plaintext highlighter-rouge">make-racket-launcher</code> under the hood, and you must infer that the <code class="language-plaintext highlighter-rouge">gracket-*</code>
directives must then use <code class="language-plaintext highlighter-rouge">make-gracket-launcher</code>.</p>

<p>The <a href="https://docs.racket-lang.org/raco/exe.html#(def._((lib._launcher%2Flauncher..rkt)._make-gracket-launcher))">docs for <code class="language-plaintext highlighter-rouge">make-gracket-launcher</code></a> indicate that
<code class="language-plaintext highlighter-rouge">build-aux-from-file</code> is used to find auxiliary filenames for related assets,
and if you click through to the <a href="https://docs.racket-lang.org/raco/exe.html#(def._((lib._launcher%2Flauncher..rkt)._build-aux-from-path))">docs for <code class="language-plaintext highlighter-rouge">build-aux-from-file</code></a> it
confirms that icons are included in those related assets. Ultimately what we
figured out was that <code class="language-plaintext highlighter-rouge">info.rkt</code> needs to include something like</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">gracket-launcher-names</span> <span class="o">'</span><span class="p">(</span><span class="nf">"My</span> <span class="nv">App</span> <span class="nv">Name</span><span class="o">.</span><span class="nv">app"</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">gracket-launcher-libraries</span> <span class="o">'</span><span class="p">(</span><span class="nf">"app</span><span class="o">.</span><span class="nv">rkt"</span><span class="p">))</span>
</code></pre></div></div>

<p>…where <code class="language-plaintext highlighter-rouge">app.rkt</code> is the file with a <code class="language-plaintext highlighter-rouge">main</code> submodule that starts the app’s GUI.
And an <code class="language-plaintext highlighter-rouge">app.icns</code> file in the same folder as <code class="language-plaintext highlighter-rouge">app.rkt</code> is used for the program’s
icon (png for linux).</p>

<p>When you do <code class="language-plaintext highlighter-rouge">raco setup mypackagename</code> it creates the executable with that icon.</p>

<p>Some of this is independently covered by <a href="https://docs.racket-lang.org/raco/exe.html">docs for <code class="language-plaintext highlighter-rouge">raco exe</code></a>, which
supports <code class="language-plaintext highlighter-rouge">--ico</code> (Windows), <code class="language-plaintext highlighter-rouge">--icns</code> (macOS), and <code class="language-plaintext highlighter-rouge">++aux</code> for general icons and
auxiliary files (which point you toward yet more docs about what you can give to
<code class="language-plaintext highlighter-rouge">++aux</code>).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This information is collected from my and other Racketeers dive into the documentation in one attempt to form a cohesive picture in response to the question “How do I use custom icons with GUI executables?”]]></summary></entry><entry><title type="html">A note about Racket’s GC for threads</title><link href="https://benknoble.github.io/blog/2025/06/10/racket-gc-thread/" rel="alternate" type="text/html" title="A note about Racket’s GC for threads" /><published>2025-06-10T00:00:00+00:00</published><updated>2025-06-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/10/racket-gc-thread</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/10/racket-gc-thread/"><![CDATA[<p>Yes, Racket will collect as garbage a thread that is blocked on a channel that
can have no writers (according to Matthew Flatt).</p>

<p>Matthew also suggested a nice refinement of my program below that demonstrates
the effect. I’ll show his first:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>

<span class="c1">;; store a weak reference to the thread, but make sure the channel has no</span>
<span class="c1">;; writers</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">t</span>
  <span class="p">(</span><span class="nb">make-weak-box</span>
   <span class="p">(</span><span class="k">let</span> <span class="p">()</span>
     <span class="p">(</span><span class="k">define</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">make-channel</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">thread</span> <span class="p">(</span><span class="nf">thunk</span> <span class="p">(</span><span class="nb">sync</span> <span class="nv">c</span><span class="p">))))))</span>

<span class="c1">;; The (sync (system-idle-evt)) will not return until the thread has run as far</span>
<span class="c1">;; as it can, at which point it's GC-able. (The system-idle-evt constructor</span>
<span class="c1">;; exists essentially only for this kind of test/example.)</span>
<span class="p">(</span><span class="nb">sync</span> <span class="p">(</span><span class="nb">system-idle-evt</span><span class="p">))</span>
<span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
<span class="p">(</span><span class="nb">weak-box-value</span> <span class="nv">t</span><span class="p">)</span> <span class="c1">;=&gt; #f</span>
</code></pre></div></div>

<p>My original version was:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>

<span class="c1">;; store a weak reference to the thread, but make sure the channel has no</span>
<span class="c1">;; writers</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">t</span>
  <span class="p">(</span><span class="nb">make-weak-box</span>
   <span class="p">(</span><span class="k">let</span> <span class="p">()</span>
     <span class="p">(</span><span class="k">define</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">make-channel</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">thread</span> <span class="p">(</span><span class="nf">thunk</span> <span class="p">(</span><span class="nb">sync</span> <span class="nv">c</span><span class="p">))))))</span>

<span class="c1">;; wait for the GC to collect…</span>
<span class="p">(</span><span class="k">let</span> <span class="nv">loop</span> <span class="p">()</span>
  <span class="p">(</span><span class="nf">match</span> <span class="p">(</span><span class="nb">weak-box-value</span> <span class="nv">t</span><span class="p">)</span>
    <span class="p">[(</span><span class="nf">?</span> <span class="nv">thread?</span><span class="p">)</span>
     <span class="c1">;; …by forcing it (but not too aggressively)</span>
     <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">loop</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">#f</span> <span class="p">(</span><span class="nb">displayln</span> <span class="s">"thread was GC'd"</span><span class="p">)]))</span>
</code></pre></div></div>

<p>It reliably prints and exits within a second or 2 on my machine.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="concurrency" /><summary type="html"><![CDATA[Yes, Racket will collect as garbage a thread that is blocked on a channel that can have no writers (according to Matthew Flatt).]]></summary></entry><entry><title type="html">Bisecting for Fun: Finding a Bugfix in Vim</title><link href="https://benknoble.github.io/blog/2025/06/06/bisecting/" rel="alternate" type="text/html" title="Bisecting for Fun: Finding a Bugfix in Vim" /><published>2025-06-06T00:00:00+00:00</published><updated>2025-06-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/06/bisecting</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/06/bisecting/"><![CDATA[<p>I experienced a non-breaking paper cut-style bug in Vim for the last 6 months or
so, and I finally tracked down the details.</p>

<h2 id="the-bug">The Bug</h2>

<p>I use <a href="https://github.com/dense-analysis/ale">ALE</a> for linting, and I noticed
that on many files I was getting errors like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E219: Function name required
E117: Unknown function: &lt;lambda&gt;54
</code></pre></div></div>

<p>I let it sit for about 6 months, though, because it wasn’t stopping me from
getting any work done, and it didn’t even seem to be really breaking ALE. It was
disruptive, though.</p>

<p>I finally managed to get a traceback of the bug using <code class="language-plaintext highlighter-rouge">:debug</code>, but I’ll spare
you the details. The end result was an expression like</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">" autoload/ale/command.vim</span>
<span class="k">try</span>
    <span class="k">if</span> <span class="nb">get</span><span class="p">(</span><span class="k">l</span><span class="p">:</span>result<span class="p">,</span> <span class="s1">'result_callback'</span><span class="p">,</span> <span class="k">v</span><span class="p">:</span>null<span class="p">)</span> isnot <span class="k">v</span><span class="p">:</span>null
        <span class="k">call</span> <span class="k">call</span><span class="p">(</span><span class="k">l</span><span class="p">:</span>result<span class="p">.</span>result_callback<span class="p">,</span> <span class="p">[</span><span class="k">l</span><span class="p">:</span>value<span class="p">])</span>
    <span class="k">endif</span>
<span class="k">finally</span>
    <span class="k">call</span> ale#command#ResetCwd<span class="p">(</span><span class="nv">a:buffer</span><span class="p">)</span>
<span class="k">endtry</span>
</code></pre></div></div>

<p>(For the curious: using the pickaxe <code class="language-plaintext highlighter-rouge">-S</code> for <code class="language-plaintext highlighter-rouge">git log</code>, I managed to track this
code down to <a href="https://github.com/dense-analysis/ale/commit/b32fdfe8">ALE commit b32fdfe8 (#2132 Implement deferred objects for
ale#command#Run,
2019-02-08)</a>.)</p>

<p>In particular, calling the callback through a capital variable (funcref
requirement) doesn’t work, but calling it without <code class="language-plaintext highlighter-rouge">call()</code> did. Finally, I
managed to simplify the error:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span>echo <span class="k">call</span><span class="p">({-&gt;</span><span class="s1">'foo'</span><span class="p">},</span> <span class="p">[])</span>
</code></pre></div></div>

<p>yielded an error!</p>

<h2 id="the-workaround">The workaround</h2>

<p>Well, not being able to <code class="language-plaintext highlighter-rouge">call()</code> a lambda is a pretty fundamental Vim error for
recent versions of Vim. I happened to be on v9.1.1016, and there had been new
releases, so I figured I’ll try the usual advice: upgrade.</p>

<p>Once I upgraded to 9.1.1415 (400 patches later!), the error was gone in my small
repro and in my day to day work. Great!</p>

<p>Now I was curious, though: what happened? When did the bug get introduced, and
when did it get fixed?</p>

<h2 id="tracking-down-the-fix">Tracking down the fix</h2>

<p>If you know me, this won’t surprise you: <code class="language-plaintext highlighter-rouge">git bisect</code> incoming!</p>

<p>Most uses of bisect are to find the introduction of a bug. Here, though, I had a
broken version and a newer fixed version, so I’m more interested in finding the
<em>bugfix</em>. That means the usual <code class="language-plaintext highlighter-rouge">good</code>/<code class="language-plaintext highlighter-rouge">bad</code> terms won’t be useful here, so I
used <code class="language-plaintext highlighter-rouge">old</code> (has the bug) and <code class="language-plaintext highlighter-rouge">new</code> (fixed the bug) in my bisection.</p>

<p>The first thing I did was setup a script to drive the bisection: it needs to
exit 0 if the commit is <code class="language-plaintext highlighter-rouge">old</code> and non-zero for <code class="language-plaintext highlighter-rouge">new</code> (except 125 means <code class="language-plaintext highlighter-rouge">skip</code>).
The script first builds Vim, skipping the commit if it doesn’t build:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./compile <span class="o">||</span> <span class="o">{</span>
  make distclean <span class="o">&amp;&amp;</span> ./compile
<span class="o">}</span> <span class="o">||</span> <span class="nb">exit </span>125

<span class="c"># sanity check</span>
<span class="nb">test</span> <span class="nt">-x</span> src/vim <span class="o">||</span> <span class="nb">exit </span>125
</code></pre></div></div>

<p>(here the <code class="language-plaintext highlighter-rouge">./compile</code> script is a lightweight version of <a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/compile-vim">my <code class="language-plaintext highlighter-rouge">compile-vim</code>
script</a>
that configures without Python, skips testing, and skips installing).</p>

<p>Note that we try compiling twice: I’ve seen some failures in configuring the
build that are solved by <code class="language-plaintext highlighter-rouge">make distclean</code>.</p>

<p>Then, the script runs our test case:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># negate: looking for bugfix. "old" needs to exit 0, "good" needs non-zero</span>
<span class="nv">VIMRUNTIME</span><span class="o">=</span>runtime src/vim <span class="nt">--clean</span> <span class="nt">-S</span> &lt;<span class="o">(</span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
try
	echo call({-&gt;'foo'}, [])
catch /./
	quit
endtry
cquit
</span><span class="no">EOF
</span><span class="o">)</span>
</code></pre></div></div>

<p>I tested this against v9.1.1016, which I expected to be old (exit 0), and
against the start of my bisection (roughly v9.1.1435), which I expected to be
new (exit non-zero). It doesn’t help to run a bisection that tests for the wrong
thing!</p>

<p>Finally, I started the bisection:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git bisect start
git bisect old v9.1.1016
git bisect new master
git bisect run ./bisect
</code></pre></div></div>

<p>Just a few minutes later, I had my answers. I saved the log for the curious:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git bisect start
# status : en attente d'un commit bon et d'un commit mauvais
# old: [1aefe1de0b20fe4966863e07efa14b6aa87323ee] patch 9.1.1016: Not possible to convert string2blob and blob2string
git bisect old 1aefe1de0b20fe4966863e07efa14b6aa87323ee
# status : en attente d'un mauvais commit, 1 commit bon connu
# new: [eb59129d2c06fd6627f537fce4fb8660cc8d0cda] runtime(typescript): remove Fixedgq() function from indent script
git bisect new eb59129d2c06fd6627f537fce4fb8660cc8d0cda
# new: [b42b9fc41f27f92aaf4f96cd4149f3160e9fe588] patch 9.1.1233: Coverity warns about NULL pointer when triggering WinResized
git bisect new b42b9fc41f27f92aaf4f96cd4149f3160e9fe588
# new: [066a5340e3d7ccc1fd9d1ee3ddf02cdc5ccf2813] CI: Install netbeans on windows to make sure to run test_netbeans.vim
git bisect new 066a5340e3d7ccc1fd9d1ee3ddf02cdc5ccf2813
# new: [4a530a632bb220b9aec827a12ab211a563c5583d] runtime(vim): Update base-syntax, match :debuggreedy count prefix
git bisect new 4a530a632bb220b9aec827a12ab211a563c5583d
# new: [9601b1435af427382682d923c57731f344e69dc4] translation(sr): Update Serbian messages translation
git bisect new 9601b1435af427382682d923c57731f344e69dc4
# new: [b77c5984877c9de816ea6db8865eb3df7bb14b51] patch 9.1.1032: link error when FEAT_SPELL not defined
git bisect new b77c5984877c9de816ea6db8865eb3df7bb14b51
# new: [166b1754a9b2046d678f59dedea7a3d693067047] patch 9.1.1025: wrong return type of blob2str()
git bisect new 166b1754a9b2046d678f59dedea7a3d693067047
# new: [037b028a2219d09bc97be04b300b2c0490c4268d] patch 9.1.1020: no way to get current selected item in a async context
git bisect new 037b028a2219d09bc97be04b300b2c0490c4268d
# new: [6472e583656aced8045fc852282708a684d77cfa] runtime(doc): fix base64 encode/decode examples
git bisect new 6472e583656aced8045fc852282708a684d77cfa
# new: [9904cbca4132f7376246a1a31305eb53e9530023] patch 9.1.1017: Vim9: Patch 9.1.1013 causes a few problems
git bisect new 9904cbca4132f7376246a1a31305eb53e9530023
# first new commit: [9904cbca4132f7376246a1a31305eb53e9530023] patch 9.1.1017: Vim9: Patch 9.1.1013 causes a few problems
</code></pre></div></div>

<h2 id="the-fix">The fix</h2>

<p>To my surprise, I was one coincidental patch away from the fix! <a href="https://github.com/vim/vim/pull/16450">Version
9.1.1017</a> fixed a bug from
<a href="https://github.com/vim/vim/pull/16445">9.1.1013</a> which was reported by
<a href="https://github.com/vim/vim/issues/16453">#16453</a>. The original patch was yet
another fix for <a href="https://github.com/vim/vim/issues/16430">a different bug</a>
introduced by <em>another</em> patch! Phew.</p>

<p>I later found that <a href="https://github.com/vim/vim/issues/16430">the original bug</a>
contained some discussion on exactly my issue:</p>

<blockquote>
  <p>Thanks a lot for addressing this!</p>

  <p>I have no issues with the fix, except that you may want to double check the
workaround suggested by @zzzyxwvut in the comment above (using <code class="language-plaintext highlighter-rouge">call(Setup, [])</code>
instead of <code class="language-plaintext highlighter-rouge">Setup()</code>). With Vim 9.1.1016, using <code class="language-plaintext highlighter-rouge">call()</code> raises an error:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E129: Function name required
E117: Unknown function: &lt;lambda&gt;26
</code></pre></div>  </div>
</blockquote>

<p>and the <a href="https://github.com/vim/vim/issues/16453">later bug</a> mentioned my repro
via <code class="language-plaintext highlighter-rouge">{-&gt; 0}</code>.</p>

<p>While I don’t grasp the full details of the fix, I can see tweaks to the C
function <code class="language-plaintext highlighter-rouge">f_call</code> which presumably implements Vim’s <code class="language-plaintext highlighter-rouge">call()</code> function, and I can
see that it only “translates” the function name when given a string. Presumably
that means funcrefs (like those produced by lambdas) remain untranslated, which
makes sense if I assume that translation means “convert string to funcref.”</p>

<p>Now I know!</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="bisect" /><category term="vim" /><summary type="html"><![CDATA[I experienced a non-breaking paper cut-style bug in Vim for the last 6 months or so, and I finally tracked down the details.]]></summary></entry><entry><title type="html">Contributing to Git</title><link href="https://benknoble.github.io/blog/2025/05/10/git-contribution/" rel="alternate" type="text/html" title="Contributing to Git" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/05/10/git-contribution</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/05/10/git-contribution/"><![CDATA[<p>I’ve contributed small fixes to Git before, and I’ve started replying to the
mailing list more frequently, but <a href="https://lore.kernel.org/git/20250510183358.36806-1-ben.knoble+github@gmail.com/T/#m401ea75fd80edb213924368c016b01b52c8d57cf">my first large contribution</a>
is now available to make <code class="language-plaintext highlighter-rouge">--index</code> the default for <code class="language-plaintext highlighter-rouge">git stash apply</code> and <code class="language-plaintext highlighter-rouge">git
stash pop</code> in Git 3.0.</p>

<p><strong>Update 2025 June 7th</strong> Given the lack of enthusiasm or engagement, I’ll
probably reroll this into a config option for now.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve contributed small fixes to Git before, and I’ve started replying to the mailing list more frequently, but my first large contribution is now available to make --index the default for git stash apply and git stash pop in Git 3.0.]]></summary></entry></feed>