<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-04-03T12:51:20+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">A tip on tracking down bound identifiers in Racket</title><link href="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/" rel="alternate" type="text/html" title="A tip on tracking down bound identifiers in Racket" /><published>2025-03-28T00:00:00+00:00</published><updated>2025-03-28T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/"><![CDATA[<p>Straight from the horse’s mouth.</p>

<p>Or in this case, from Racket wizard Matthew Flatt.</p>

<blockquote>
  <p>DrRacket can usually open the defining file via a right-click on an name. If
not, or in more restrcted environments, I sometimes use <code class="language-plaintext highlighter-rouge">(identifier-binding
#'name)</code> to help track down <code class="language-plaintext highlighter-rouge">name</code>, since the binding can identify the source
module. If I didn’t know where that module resides, I might try
<code class="language-plaintext highlighter-rouge">(module-path-index-resolve (car (identifier-binding #'name)))</code>.</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Straight from the horse’s mouth.]]></summary></entry><entry><title type="html">I am not the first to notice GitHub’s range-diff deficiency; I will not be the last</title><link href="https://benknoble.github.io/blog/2025/03/17/more-range-diff/" rel="alternate" type="text/html" title="I am not the first to notice GitHub’s range-diff deficiency; I will not be the last" /><published>2025-03-17T00:00:00+00:00</published><updated>2025-03-17T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/17/more-range-diff</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/17/more-range-diff/"><![CDATA[<p>Scott Chacon of Pro Git fame is writing about Git again: this time, with (yet
another) take on how the company he helped build might be doing it wrong.</p>

<p>In <a href="https://blog.gitbutler.com/interdiff-review-with-git-range-diff/">How to do patch-based review with git
range-diff</a>,
Chacon covers the ground on how to perform review in terms of versions of a
branch, stuff Git developers have been doing for years. See <a href="/blog/2024/10/04/copy-range-diff/#primer">my own primer</a> for details on the
workflow, especially with GitHub involvement. What’s particularly great about
Chacon’s post for GitButler is its link to <a href="https://gist.github.com/thoughtpolice/9c45287550a56b2047c6311fbadebed2">Why some of us like “interdiff” code
review</a>.</p>

<p>This blog post-né-Gist captures many of my own recent thoughts about GitHub:</p>

<ul>
  <li>GitHub’s UI actively encourages suboptimal development technique<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. In
practice, that means “diff soup” and “lack of solid tools for reviewers
outside of the comment interface.”</li>
  <li>In particular, implicit relationships and information loss abound, which sucks
for reviewer and future code spelunker.</li>
  <li>GitHub encourages <em>branch- and merge- heavy thinking</em>. These are not
necessarily even the easy parts of Git! They can be for a solo developer just
getting started, but in true distributed settings come with their own
challenges.</li>
  <li>Interdiff reviewing requires more knowledge of Git than is typical or average
(based on my own unscientific view of lots of colleagues), and thus would
benefit more from UI help than typical branch and merge operations.</li>
</ul>

<p>It is nice to have language to talk about this. I can just see myself writing
“Please stop feeding me <a href="https://gist.github.com/thoughtpolice/9c45287550a56b2047c6311fbadebed2?ref=blog.gitbutler.com">diff
soup</a>:
I don’t need a feast, but I would like some seasoning.” (Accompanied, of course,
by details on how to improve!)</p>

<p>PS Chacon’s article mentions that you’ll often need to note an original hash or
find one in the reflog to compare the old branch version to the new branch
version. For <code class="language-plaintext highlighter-rouge">git range-diff</code> superpowers, try <a href="/blog/2024/11/15/til-range-diff/#primer">using <code class="language-plaintext highlighter-rouge">git range-diff @{u}
@{push} @</code> to see what’s changed since you pushed</a>.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>See <a href="/blog/2024/10/04/copy-range-diff/">how GitHub can’t show cross-version changes</a>, <a href="https://mitchellh.com/writing/github-changesets">Reorient GitHub Pull Requests
Around Changesets</a> and
commentary in <a href="/blog/2025/02/01/git-roundup/">A grab-bag of Git links</a>, a rant about <a href="/blog/2024/08/02/github-squash/">PR merge messages</a>, and <a href="/blog/2025/02/10/stackoverflow-github-corporate-interest/#on-presentation">notes on GitHub’s diff UI
presentation</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Scott Chacon of Pro Git fame is writing about Git again: this time, with (yet another) take on how the company he helped build might be doing it wrong.]]></summary></entry><entry><title type="html">To learn Vim, practice smooth, iterative deepening</title><link href="https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening/" rel="alternate" type="text/html" title="To learn Vim, practice smooth, iterative deepening" /><published>2025-03-15T00:00:00+00:00</published><updated>2025-03-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/15/smooth-iterative-deepening/"><![CDATA[<p>You already know to run <code class="language-plaintext highlighter-rouge">vimtutor</code> and read <code class="language-plaintext highlighter-rouge">:help</code>. Here’s why:</p>

<ul>
  <li><a href="https://smallcultfollowing.com/babysteps/blog/2025/03/10/rust-2025-intro/#smooth-iterative-deepening">Smooth, iterative
deepening</a>
means that you can get started with very basic maneuvers: Insert mode, arrow
keys, <code class="language-plaintext highlighter-rouge">ZZ</code>. Give motions and Normal mode a try. As you find places to improve
or change the editor, you can do so with advanced <code class="language-plaintext highlighter-rouge">:help</code> topics.</li>
  <li>As <a href="https://x.com/i/broadcasts/1RDxlzBlnXNGL">Primeagen says</a> around the 1h30
mark, Vim isn’t hard: it’s just different. We have preconceived notions of
programming and editors that Vim doesn’t fit into. The first time you learned
what a file is or how a compiler creates an executable was equally
foreign—you just don’t remember that. I frankly agree that modern IDEs are
more confusing and distracting with all the window cruft they bolt on.</li>
  <li>Vim is ultimately a tinkerer’s tool (in addition to being a ubiquitous Vi):
learn it or don’t, but don’t expect a completely out-of-the-box experience.
Tinker!</li>
</ul>

<p>Oh, and don’t use a distro if you can avoid it. Prime agrees.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><summary type="html"><![CDATA[You already know to run vimtutor and read :help. Here’s why:]]></summary></entry><entry><title type="html">Performance still matters</title><link href="https://benknoble.github.io/blog/2025/02/19/performance/" rel="alternate" type="text/html" title="Performance still matters" /><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/19/performance</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/19/performance/"><![CDATA[<p>Simplicity is a feature.</p>

<p>I built a tiny FAQ site to help Vimmers understand the idiosyncrasies of using
Vim at Capital One. A colleague quipped:</p>

<blockquote>
  <p>This page loads too fast; it’s making me uncomfortable.</p>
</blockquote>

<p>Indeed—3 or 4 interlinked HTML pages and a single CSS file load quickly in any
browser <em>because that’s what browsers were designed for.</em></p>

<p><a href="https://infrequently.org/series/performance-inequality">It’s not hard to go fast if you don’t overengineer</a>.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><category term="web" /><category term="performance" /><summary type="html"><![CDATA[Simplicity is a feature.]]></summary></entry><entry><title type="html">RE: the Commit Crunch: StackOverflow blog hosts naked corporate interests alongside misinformation</title><link href="https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest/" rel="alternate" type="text/html" title="RE: the Commit Crunch: StackOverflow blog hosts naked corporate interests alongside misinformation" /><published>2025-02-10T00:00:00+00:00</published><updated>2025-02-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/10/stackoverflow-github-corporate-interest/"><![CDATA[<p>Following mention of a new diff algorithm in <a href="https://git.github.io/rev_news/2024/08/31/edition-114/">Edition 114 of Git Rev
News</a>, I dissect
problems with the post <a href="https://stackoverflow.blog/2024/12/20/this-developer-tool-is-40-years-old-can-it-be-improved/">“This developer tool is 40 years old: can it be
improved?”</a>.
I offer clarifications for the misinformation in the article, and I mention
free, builtin ways to get diff improvements.</p>

<h2 id="on-dates">On dates</h2>

<p>Bill Harding writes:</p>

<blockquote>
  <p>Since IDEs are refreshed every few years, maybe you’ve guessed that your
oldest tool in active use is “git.” It was first released nearly 20 years ago,
back in 2005. Or maybe you prefer to code with the classic old-school text
editors, like Sublime Text (2008) or vim (1991).</p>
</blockquote>

<p>Yet Vim and Git are under active development, getting “refreshed” perhaps more
regularly than other major (unnamed?) IDEs due to their distributed,
collaborative open-source practices. The core model may have changed little, but
Vim 9.1 in 2025 is not your 1991 Vim, nor is Git 2.48.1 in 2025 your Git from
2005.</p>

<p>It is true that the Myers diff algorithm (no air quotes necessary, thank you)
originates in 1986, but the colors on GitHub are not its byproduct; rather, I
believe an <a href="/blog/2020/08/06/stop-sed-i/#addendum-scripting-ed">edit script is the typical output</a>. This is also
demonstrated on page 3, the same figure which Harding cites.</p>

<h2 id="on-research">On research</h2>

<p>As Git Rev News mentions, Git supports other algorithms including
<a href="https://github.com/git/git/commit/3443546f6"><code class="language-plaintext highlighter-rouge">minimal</code></a>,
<a href="https://github.com/git/git/commit/92b7de93fb7801"><code class="language-plaintext highlighter-rouge">patience</code></a>, and
<a href="https://github.com/git/git/commit/8c912eea94a"><code class="language-plaintext highlighter-rouge">histogram</code></a>. <a href="/blog/2025/02/01/git-roundup/#how-different-are-different-diff-algorithms-in-git">Some research
exists on their properties</a>.</p>

<p>This remains an active area of improvement, I believe.</p>

<h2 id="on-diffs">On diffs</h2>

<p>Harding writes:</p>

<blockquote>
  <p>The Myers diff algorithm classifies all code change lines as binary: either
“add” or “delete.”</p>

  <p>The Commit Cruncher algorithm tested recognizes three times more types of
changed operations: Added, Deleted, Updated, Moved, Find/Replaced, and
Copy/Pasted</p>
</blockquote>

<p>Yet Git can detect moved lines with <code class="language-plaintext highlighter-rouge">--color-moved</code> (enable by default with
<a href="https://github.com/benknoble/Dotfiles/blob/151d67dd2002f00d01c3f4fc1130815ae522116a/links/gitconfig#L101"><code class="language-plaintext highlighter-rouge">diff.colorMoved =
default</code></a>).</p>

<p>Or consider</p>

<blockquote>
  <p>One example where Myers requires more work by a reviewer is when a code change
involves white space, like the change shown earlier in this post:</p>
</blockquote>

<p>Yet Git has <em>several</em> modes for making whitespace easier to review, like
<code class="language-plaintext highlighter-rouge">--ignore-space-change</code>, <code class="language-plaintext highlighter-rouge">--ingore-space-at-eol</code>, and <code class="language-plaintext highlighter-rouge">--ignore-all-space</code>. This
also typically shortcuts the complex changes from extracting methods, depending
on how far the new function is relocated. In Harding’s example, I think
<code class="language-plaintext highlighter-rouge">--ignore-space-change</code> would produce a similar diff (but we’ll never know
because sources for the diffs are not given).</p>

<p>Then there’s “incremental updates” (whatever that means in this context):</p>

<blockquote>
  <p>The same diff through a GitClear lens condenses the incremental update to a
single line, where the new (or removed) characters are shown inline:</p>
</blockquote>

<p>Git has a <code class="language-plaintext highlighter-rouge">--word-diff</code> mode that does the same thing and can be configured
per-invocation depending on where you want to consider interesting boundaries.
In my experience, it trivializes Harding’s example diff, too.</p>

<p>Harding later tries to explain Commit Cruncher and writes:</p>

<blockquote>
  <p>The Myers diff algorithm works by inspecting two inputs: the repo state before
commit A and the state after commit C.</p>
</blockquote>

<p>This is imprecise, just like the earlier formulation</p>

<blockquote>
  <p>[Myers] offered what became the canonical solution for representing the
difference between the state of a git repo “before” and “after” a developer’s
git commit.</p>
</blockquote>

<p>Git can generate diffs between blobs, trees, commits, and commit ranges. Harding
is either being intentionally imprecise (why?) or doesn’t know much about Git’s
diffs, the very thing his company’s product is trying to improve.</p>

<h2 id="on-presentation">On presentation</h2>

<p>I’ve written before that GitHub’s UI has problems<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, but this highlights one
more: GitHub has very poor support for examining diffs.</p>

<ul>
  <li>GitHub does not natively support proper range-diffs. When a branch is
force-pushed, GitHub only offers its standard difference between the commits,
which shows a flat tree diff rather than a commit-by-commit comparison,
including commit messages. In short, <a href="/blog/2025/02/01/git-roundup/#reorient-github-pull-requests-around-changesets">you can’t see how the PR evolved</a>.</li>
  <li>GitHub doesn’t support diff options beyond “ignore whitespace” (and I believe
it tries to automatically do something akin to <code class="language-plaintext highlighter-rouge">--word-diff</code>). <strong>This includes
<code class="language-plaintext highlighter-rouge">--color-moved</code> for showing moved lines.</strong> In practice, developers creating
commits may have a good idea about how to communicate the diff (<a href="https://lore.kernel.org/git/CALnO6CDqHJP_wa_8eKHBkU+_1vQ6D+C=QRZyW1FKnG71wDxnnQ@mail.gmail.com/">I and others
have experimented with communicating these options in
commits</a>).</li>
</ul>

<p>Improving these situations or moving away from GitHub as your primary diff
viewer would be free alternatives to a Harding’s tool.</p>

<h2 id="in-conclusion">In conclusion</h2>

<p>The StackOverflow blog shamelessly shills for a company to get you to buy a
product you probably don’t need. What’s new?</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p><a href="/blog/2024/10/04/copy-range-diff/">PR reviews</a> lack
<a href="/blog/2025/02/01/git-roundup/#reorient-github-pull-requests-around-changesets">threading</a>, and it has <a href="/blog/2024/08/02/github-squash/">bad
defaults for some kinds of merges</a>. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="github" /><summary type="html"><![CDATA[Following mention of a new diff algorithm in Edition 114 of Git Rev News, I dissect problems with the post “This developer tool is 40 years old: can it be improved?”. I offer clarifications for the misinformation in the article, and I mention free, builtin ways to get diff improvements.]]></summary></entry><entry><title type="html">Why I still prefer Vim</title><link href="https://benknoble.github.io/blog/2025/02/05/neovim/" rel="alternate" type="text/html" title="Why I still prefer Vim" /><published>2025-02-05T00:00:00+00:00</published><updated>2025-02-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/05/neovim</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/05/neovim/"><![CDATA[<p>It turns out I might have only written this down once, so here it is.</p>

<p>The short version is I use Vim</p>
<ul>
  <li>because it’s what I learned,</li>
  <li>because I don’t feel like porting everything to Lua<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> and</li>
  <li>because, while I welcome Neovim’s excellent work making contributing to Vim
easier, I have some issues with other parts of the community.</li>
</ul>

<p>I find the (public, loud parts of the) Neovim community too willing to
reimplement existing plugins or features just to say it was done in Lua<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>, too
willing to hide complexity from novices in ways that make actually learning
Vim’s roots hard (let alone debugging complex framework code)<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>, and a bit too
“twitch gamer meme bro” for my personal tastes.</p>

<p>None of these things are bad; they don’t mesh with me.</p>

<p>In summary:</p>

<ol>
  <li>Neovim-the-tool doesn’t have a good value proposition for me as someone who
knows Vim quite well and has a large Vimscript-based config that works for
me.</li>
  <li>Neovim-the-community has some great work yet still grates on me.</li>
</ol>

<p>I continue to applaud their work to bring more people to the Vim ecosystem and
turn more people into contributors. I wish that community was more willing to
engage and collaborate with its sister, Vim.<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup></p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Lua seems more verbose to do the same thing when scripting editing tasks…
Vim’s command language has a long history borne of editing powertools. Sure,
its programmatic bits are odd, but you can learn those as you go and mostly
by reading the manual (like any other tool). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>For just one example: why have
<a href="https://github.com/Mofiqul/dracula.nvim">dracula.nvim</a> when
<a href="https://github.com/dracula/vim">dracula/vim</a> has gone out of its way to be
compatible with both editors? By all means, duplicate efforts… Or how about
<a href="https://github.com/tpope/vim-fugitive">fugitive</a> somehow having to
“compete” with <a href="https://github.com/f-person/git-blame.nvim">git-blame.nvim</a>
or <a href="https://github.com/FabijanZulj/blame.nvim">blame.nvim</a>? I’ve started a
whole conversation at work to try to understand
<a href="https://github.com/ThePrimeagen/harpoon/tree/harpoon2">harpoon2</a> because it
feels like “marks + <a href="https://github.com/tpope/vim-tbone">Tbone</a> + pick your
favorite way to spawn terminals”—in other words, learn the builtins first? <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Looking at you, <a href="https://www.lazyvim.org">LazyVim</a>. I know Vim pretty
well, and it took me several hours to figure out what you did to make my
brother-in-law’s Neovim open the Ex command line in a popup. Ugh. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Christian Clason is the Neovim maintainer I most frequently see on the Vim
mailing list, and I especially appreciate their efforts to stay in contact. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><category term="rants" /><summary type="html"><![CDATA[It turns out I might have only written this down once, so here it is.]]></summary></entry><entry><title type="html">A grab-bag of Git links</title><link href="https://benknoble.github.io/blog/2025/02/01/git-roundup/" rel="alternate" type="text/html" title="A grab-bag of Git links" /><published>2025-02-01T00:00:00+00:00</published><updated>2025-02-01T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/01/git-roundup</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/01/git-roundup/"><![CDATA[<p>Some reflections on a mass of articles taking up space on my phone.</p>

<h2 id="how-i-use-git-worktrees"><a href="https://matklad.github.io/2024/07/25/git-worktrees.html">How I use Git worktrees</a></h2>

<p>Matklad explains what to me is a novel application of worktrees. Git’s own
<a href="https://git-scm.com/docs/git-worktree#_examples">manual page</a> talks about them
like a better stash, but Matklad uses them to organize parallel tasks that want
their own sources and builds:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">project/</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main</code>: the current <code class="language-plaintext highlighter-rouge">main</code> branch of development</li>
      <li><code class="language-plaintext highlighter-rouge">work</code>: active work</li>
      <li><code class="language-plaintext highlighter-rouge">review</code>: PR review</li>
      <li><code class="language-plaintext highlighter-rouge">fuzz</code>: fuzzing with Zig</li>
      <li><code class="language-plaintext highlighter-rouge">scratch</code>: random fixups</li>
    </ul>
  </li>
</ul>

<p>While I probably wouldn’t personally use a <code class="language-plaintext highlighter-rouge">main</code> worktree just for diffing,
since <code class="language-plaintext highlighter-rouge">git diff</code> can do that already, using it to compare build times and
behavior is smart. My current projects don’t need fuzzing, and I tend to make
“scratch” work by throwing it into my
<a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/vim/autoload/bk/notepad.vim">notepad</a>
<a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/vim/after/plugin/config/wiki.vim#L43-L45">wiki</a>
and coming back to it later. Still, I could imagine setting up 3 or 4 tmux
windows per project in different worktrees, or just one and using
<code class="language-plaintext highlighter-rouge">pushd</code>/<code class="language-plaintext highlighter-rouge">popd</code>. Build systems that use last-modified times, like <code class="language-plaintext highlighter-rouge">make</code>, would
probably re-build less stuff in the main worktree than in my chaotic work or
review worktrees, so that could help.</p>

<h2 id="commit-messages-are-optional"><a href="https://schpet.com/note/git-commit-messages-are-optional">commit messages are optional</a></h2>

<p>If you know me, you know I don’t agree with the title on principle, but:
technically you can use empty commit messages with <code class="language-plaintext highlighter-rouge">--allow-empty-messages</code>. And
the author smartly uses this for a workflow that includes lots of transient
commits (not dissimilar to one I use myself), where the final commits get a nice
message.</p>

<p>My personal version of this is usually <code class="language-plaintext highlighter-rouge">git commit -m.</code> or <code class="language-plaintext highlighter-rouge">git commit -m wip</code>,
which don’t jar quite as much in <code class="language-plaintext highlighter-rouge">git log</code> and similar output.</p>

<h2 id="reorient-github-pull-requests-around-changesets"><a href="https://mitchellh.com/writing/github-changesets">Reorient GitHub Pull Requests Around Changesets</a></h2>

<p>I’m not the only one to think <a href="/blog/2024/10/04/copy-range-diff/">GitHub PR reviews have problems</a>: for one, the lack of real threading
<a href="https://drewdevault.com/2018/07/02/Email-driven-git.html">like in email</a> makes
pages with lots of comments abysmally slow, and the diff + comment interface is
no better for even reasonably sized PRs! Meanwhile, the underlying Git
technology is <em>fast</em>.</p>

<p>Mitchell Hashimoto focuses more on the lifecycle problems with GitHub’s
interface, though: primarily the distinct lack of versioning (again, something
email and <code class="language-plaintext highlighter-rouge">git range-diff</code> support natively) and the problem of working on the
reviews and the responses in parallel. Like many of us, he wishes GitHub could
orient itself around versioned changesets.</p>

<p>Fortunately, this is what <a href="https://sr.ht">SourceHut</a> does, and I keep coming up
with new reasons to try it.</p>

<h2 id="tips-for-creating-merge-commits"><a href="https://www.brandonpugh.com/blog/tips-for-creating-merge-commits/">Tips for creating merge commits</a></h2>

<p>Brandon Pugh’s first line of advice is one I’ve oft repeated: <em>make the commit
message as useful as possible</em>. As he points out, we talk a lot about regular
commits but less about merge commits. I’ve <a href="/blog/2024/08/02/github-squash/">ranted about messages in PR
merges</a>, but not explained that</p>

<ul>
  <li>I like to use <a href="https://github.com/benknoble/requirements.txt.vim/commit/c4383604c34787e0151c3f9b0325b1aa5565ff2d">the “Conflict” comments Git
adds</a>
to explain their source and resolution.</li>
  <li>I use <a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/gitconfig#L114"><code class="language-plaintext highlighter-rouge">merge.log =
true</code></a>
to include the 20 most recent commits in the merge commit summary. Similarly
you could use <code class="language-plaintext highlighter-rouge">merge.branchdesc</code> to populate messages with branch descriptions
if your workflow often includes setting those.</li>
</ul>

<p>Pugh also points out there’s often other explanations that can be given in the
description, and we should probably do that.</p>

<p>And of course, avoid evil merges.</p>

<h2 id="store-code-discussions-in-git-using-git-notes"><a href="https://wouterj.nl/2024/08/git-notes">Store code discussions in Git using Git notes</a></h2>

<p>Wouter’s primer on notes is one of the better ones I’ve seen because it
explicitly covers note namespaces and refspecs, making them easier to work with.
In fact, I’m now tempted to start putting notes on commits at work and pushing
them, just in case someone ever discovers them ;)</p>

<p>Unfortunately, I can’t find any options to make adding the “fetch all notes”
refspec the default when setting up new remotes (or cloning). Although it is
possible to create default refspecs for pushing, that also overrides
<code class="language-plaintext highlighter-rouge">push.default</code> which is useful for <a href="/blog/2024/11/15/til-range-diff/#primer">making Git DWIM in a triangular workflow</a>.</p>

<h2 id="how-different-are-different-diff-algorithms-in-git"><a href="https://cs.paperswithcode.com/paper/how-different-are-different-diff-algorithms">How Different Are Different diff Algorithms in Git?</a></h2>

<p>I haven’t had time to read this yet, but it seems like it could be a good
reference on the diff algorithms themselves. They are one aspect of Git I’ve
never really explored.</p>

<h2 id="not-rocket-science-rule-applies-to-merge-commits"><a href="https://matklad.github.io/2023/12/31/git-things.html#Not-Rocket-Science-Rule-Applies-To-Merge-Commits">Not rocket science rule applies to merge commits</a></h2>

<p>Another Matklad piece: <em>typical projects don’t need a linear history of every
commit passing tests</em>. In such a project, merges are the record of passing tests
(so <code class="language-plaintext highlighter-rouge">bisect</code> with <code class="language-plaintext highlighter-rouge">--first-parent</code> first). Take advantage of this by structuring
commits in branches to split work. Matklad gives several examples.</p>

<p>Matklad also mentions the “merge to main, rebase feature branches”
workflow—here, you still rebase feature branches if you need to build on top
of later commits, but you create merge commit when bring the branch into main.</p>

<p>Oh, and by the way: <strong>stop commenting out dead or broken code</strong><sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Delete it. We
can recover it with version control (and it’s likely to never be fixed or
recovered anyway).</p>

<h2 id="commit-messages"><a href="https://matklad.github.io/2023/12/31/git-things.html#Commit-Messages">Commit messages</a></h2>

<p>More Matklad: small and trivial changes deserve small, trivial commit messages.
And we should try to make more of them.</p>

<p>Bait taken! You know I like a good long commit message, but it’s absolutely true
that big commits are a workflow problem often imposed by CI + review turnaround.
I’ve worked with plenty of folks who wish they could do differently but who know
that they need to squeeze as much as they can out of each PR because turnaround
time is long.</p>

<p>Yikes.</p>

<p>I like most of Matklad’s recommendations for fixing the workflow problem here,
though of course in some regulated industries merging pre-review is a
non-starter.</p>

<p>I will single out one comment:</p>

<blockquote>
  <p>If a change is really minor, I would say <code class="language-plaintext highlighter-rouge">minor</code> is an okay commit message!</p>
</blockquote>

<p>No, it isn’t: the subject should describe the fix, even if it’s just <code class="language-plaintext highlighter-rouge">fix doc
typo</code> or <code class="language-plaintext highlighter-rouge">s/it's/its</code>. Those still convey the “minor” intent while providing
enough detail to folks fetching new changes to know what’s happening around
them.</p>

<h2 id="unified-versus-split-diff"><a href="https://matklad.github.io/2023/10/23/unified-vs-split-diff.html">Unified versus split diff</a></h2>

<p>Guess I’m reading a lot of Matklad lately.</p>

<p>The “better diff for review” idea is novel to me, and certainly seems like a
good one to try building! But I’m rather more interested in fetching PR changes
for review and then resetting them so that
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> can show them to me. I
normally review one commit at a time, so this might be a good inter-commit
workflow. It also helps provide an overview. Interesting.</p>

<p>In the end, whether by email or web UI, we’re still leaving comments on the
diffs, though.</p>

<h2 id="two-kinds-of-code-review"><a href="https://matklad.github.io/2021/01/03/two-kinds-of-code-review.html">Two kinds of code review</a></h2>

<p>This one reminded me of times where I’ve accepted PRs from newer contributors by
fixing up their branches and merging locally—hopefully that provided some
lessons for them, but it might not be as teachable as merging followed by fixes
(cc’ing them). At least, in prior applications where I didn’t show them the
range-diff and walk them through the changes I made, I certainly didn’t
<em>actively</em> teach them.</p>

<h2 id="putting-the-i-back-in-ide-towards-a-github-explorer"><a href="https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/">Putting the I back in IDE: towards a GitHub explorer</a></h2>

<p>JaneStreet describes an internal review and workflow tool, and I’m jealous.</p>

<p>It did inspire me to add a personal todo item: try building a Vim plugin for
reading and writing PR review comments! I’ve explored a little of the prior
work, but it’s deep in my personal backlog.</p>

<h2 id="code-review-antipatterns"><a href="https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/code-review-antipatterns/">Code review antipatterns</a></h2>

<p>An excellent bit of sarcasm. Well worth the read, especially for new engineers
(what not to do) and experienced engineers (who laugh because of their
experience).</p>

<h2 id="git-random"><a href="https://git-random.olets.dev">git-random</a></h2>

<p>A tool I’ve been meaning to build (roughly), and it already exists! I actually
want to be able to draw a graph shape and have the tool create it, but this is
close and might serve as a back-end.</p>

<h2 id="why-github-actually-won"><a href="https://blog.gitbutler.com/why-github-actually-won/">Why GitHub actually won</a></h2>

<p>Much to <a href="/blog/2024/08/02/github-squash/">my chagrin</a>, it is a
dominant force. GitLab is probably the closest competitor and, if I recall
correctly, remains closed-source.</p>

<p>I’m strongly <a href="https://sfconservancy.org/GiveUpGitHub/">considering
alternatives</a>, and I think you should
too. <a href="https://sr.ht">SourceHut</a> is the most compelling for me right now, but
it’s nice to see that we still live with a <a href="/blog/2024/04/30/extracting-ourselves-from-github-equals-git/">thriving Git forge ecosystem</a> that
really puts its weight behind “decentralized.”</p>

<h2 id="my-unorthodox-branchless-git-workflow"><a href="https://drewdevault.com/2020/04/06/My-weird-branchless-git-workflow.html">My unorthodox, branchless git workflow</a></h2>

<p>While I’m jealous of the “rebase all work at once” aspect of this flow, I’m not
sure I could handle organizing that much parallel work just in rebase todo lists
(partly because I work for a company that, at it’s best, still has some review
and merge cycles that take longer than a few days).</p>

<p>It also wouldn’t surprise me if keeping everything together made it easy to
accidentally send patches out that depend on previous patches without
remembering this fact or mentioning it, which could become very confusing.</p>

<h2 id="git-trailers"><a href="https://alchemists.io/articles/git_trailers">Git Trailers</a></h2>

<p>We’re constantly trying to make things machine-readable and hook up different
applications (GitHub + Jira probably comes to mind if you’re in a corporate
environment): Git makes it easy with trailers. Recently I’ve been discussing
<code class="language-plaintext highlighter-rouge">Best-viewed-with</code>, my WIP name for a trailer that indicates good diff options.
It could even lead to <a href="https://lore.kernel.org/git/CALnO6CDqHJP_wa_8eKHBkU+_1vQ6D+C=QRZyW1FKnG71wDxnnQ@mail.gmail.com/">automatic application of relevant
flags</a>
if implemented in Git.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>To add a bit of nuance to this, I don’t care what you do in your tree.
Comment out code, play around, whatever. But in the canonical upstream tree,
the main branch? Don’t send me PRs with bodies of commented out code. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Some reflections on a mass of articles taking up space on my phone.]]></summary></entry><entry><title type="html">Collected chats about Racket</title><link href="https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs/" rel="alternate" type="text/html" title="Collected chats about Racket" /><published>2025-01-29T00:00:00+00:00</published><updated>2025-01-29T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs/"><![CDATA[<p>This post serves primarily to host an indexable copy of some chat replies about
the Racket programming language.</p>

<h2 id="questions-about-r7rs-implicit-phasing">Questions about <a href="https://codeberg.org/scheme/r7rs/issues/217">R7RS implicit phasing</a></h2>

<ul>
  <li>
    <p><em>a</em>: hm. what stops a <code class="language-plaintext highlighter-rouge">#lang</code> from reimplementing whatever algorithm a
r7rs-large compiler does?</p>
  </li>
  <li>
    <p><em>b</em>: in particular, nobody has yet worked out a way to maintain the Separate
Compilation Guarantee™ when the compiler does phasing automatically</p>
  </li>
  <li>
    <p><em>c</em>: You can certainly implement that (the same way that algol60 is
implemented) but you would lose the kind of integration between r7rs
modules/macros and racket modules/macros that eg the <code class="language-plaintext highlighter-rouge">#lang r6rs</code>
implementation has</p>
  </li>
  <li>
    <p><em>me</em>: Would you have to? I’m hand-waving and clearly a non-expert, but it
seems like it should be possible (procedural macros!) to implement enough of
the compiler and expander as a compile-time process of the lang, and then
eventually expand into an equivalent Racket module with all the relevant
annotations added.</p>

    <p>This doesn’t seem efficient (since it’s sort of like expanding the whole program
  twice, or worse possibly in some quadratic way), but IUIC typed racket has to do
  something similar in terms of duplicate expansions. Obviously the effort to
  implement this way would be higher (?).</p>
  </li>
  <li>
    <p><em>c</em>: You might be able to do this especially for a single module, but it’s not
obvious if you could get the necessary information from other modules. It’s
possible you could build a lot of infrastructure to do it, but I’m not
certain.</p>
  </li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This post serves primarily to host an indexable copy of some chat replies about the Racket programming language.]]></summary></entry><entry><title type="html">Letter to the editor: Populism is not the answer to monopoly and fraud</title><link href="https://benknoble.github.io/blog/2025/01/27/satisfaction/" rel="alternate" type="text/html" title="Letter to the editor: Populism is not the answer to monopoly and fraud" /><published>2025-01-27T00:00:00+00:00</published><updated>2025-01-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/27/satisfaction</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/27/satisfaction/"><![CDATA[<p>In a <em>Wall Street Journal</em> opinion piece titled <a href="https://www.wsj.com/opinion/american-society-was-built-for-populism-not-elitism-nature-and-history-prove-technocrats-wrong-cf9e7a2f?page=1">“American Society Was Built for
Populism, Not
Elitism”</a>
(paywalled), Karl Zinsmeister argues that power has concentrated largely in
the hands of experts and authorities “indoctrinated in universities” (in other
words, too liberal for the mainstream).</p>

<p>While he correctly assess a backlash to authoritarian and central control, he
misses both symptom and cause. The backlash is not against a supposedly
left-leaning power network, but rather against an oligarchic class whose waves
of corrupt money have undue influence in American life. <a href="https://www.ftc.gov/system/files/ftc_gov/pdf/bedoya-statement-emergency-motion.pdf">FTC Commissioner Alvaro
M. Bedoya understands what people
need</a>:</p>

<blockquote>
  <p>What they [working class people] do talk about is how powerful companies are
skirting or abusing the law to force farmers, workers, and small businessmen
to do what they want, when they want, or else. How the government isn’t doing
anything about it. And how they’re going broke because of it.</p>
</blockquote>

<p>If there is also a backlash against the scientific institutions of universities,
it is due to a <a href="https://pluralistic.net/2024/09/25/epistemological-chaos/">protracted campaign against
epistemology</a> by big
business. Oligarchs have an easier time staying rich in a world muddied by
misinformation. Meanwhile, we explicitly <em>want</em> to delegate fact-finding to the
experts: that creates <a href="https://pluralistic.net/2024/11/21/policy-based-evidence/">evidence-based
policy</a>.</p>

<p>What is Zinsmeister’s solution to his spectre of centralized liberal control?
Hand over federal programs to private control: his writing on American
philanthropy indicates to me that he believes a wealthy élite will rule instead.
Same centralized control, different powerful controllers.</p>

<p>The answer is neither populism nor technocracy nor oligarchy. The answer is
regulation of power and markets and strong institutional science (necessarily
separated from government).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="politics" /><summary type="html"><![CDATA[In a Wall Street Journal opinion piece titled “American Society Was Built for Populism, Not Elitism” (paywalled), Karl Zinsmeister argues that power has concentrated largely in the hands of experts and authorities “indoctrinated in universities” (in other words, too liberal for the mainstream).]]></summary></entry><entry><title type="html">Steps to reclaim digital control</title><link href="https://benknoble.github.io/blog/2025/01/18/digital-control/" rel="alternate" type="text/html" title="Steps to reclaim digital control" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-18T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/18/digital-control</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/18/digital-control/"><![CDATA[<p>Here is my short list of steps for digital control.</p>

<h2 id="basics">Basics</h2>

<ul>
  <li>Reject all cookies. Some sites <a href="https://meta.stackexchange.com/q/367370/389795">make this
obnoxious</a>, so I wind up
trying to avoid them if possible. The <a href="https://www.technologylawdispatch.com/2023/11/privacy-data-protection/reject-all-button-in-cookie-consent-banners-an-update-from-the-uk-and-the-eu/">UK’s ICO
agrees</a>.</li>
  <li>Unsubscribe from email you don’t want or need (or recognize!). Some email
clients (like GMail) can do this automatically for you: <a href="https://deadsimpletech.com/blog/abuser_economy">this is especially
handy when unsubscribe links
fail</a>.</li>
  <li>Avoid autoplay and infinite scroll, like YouTube taking you to the next video
automatically. Disable them or avoid the site.</li>
  <li><a href="https://pluralistic.net/2025/02/19/gimme-five/">Disable, deny, or mute unimportant
notifications</a>. Ditto for
location services and ads. (On iPhones, that’s usually in “Settings” under
each application.)</li>
  <li>Report and delete unsolicited DMs or texts from strangers.</li>
  <li>Silence calls from unknown numbers (use your phone’s settings).</li>
  <li>Practice anti-phishing strategy: check URLs, look for signs of urgency. Here
are several informational sites to hone your strategy:
    <ul>
      <li><a href="https://www.occ.gov/topics/consumers-and-communities/consumer-protection/fraud-resources/phishing-attack-prevention.html">Office of the Comptroller of the Currency: “Phishing Attack Prevention: How to Identify &amp; Avoid Phishing Scams”</a></li>
      <li><a href="https://www.ftc.gov/business-guidance/small-businesses/cybersecurity/phishing">FTC: “Phishing”</a></li>
      <li><a href="https://www.cisa.gov/secure-our-world/recognize-and-report-phishing">America’s Cyber Defense Agency: “Recognize and Report Phishing”</a></li>
    </ul>
  </li>
  <li>Be mindful. Ask yourself: why am I reading, watching, or consuming this? Who
wrote or created it?</li>
</ul>

<h2 id="intermediate">Intermediate</h2>

<ul>
  <li>Try an <a href="https://pluralistic.net/2024/10/16/keep-it-really-simple-stupid/">RSS
Reader</a>:
instead of handing out your email address or social handle to have information
shoved at you, collect a list of links to follow for updates when you want
them. (Sound too good to be true, like the days when Facebook worked? <a href="https://en.wikipedia.org/wiki/RSS">RSS is
almost 26 years old as of this article</a>.)</li>
  <li>Consider alternate browsers and search engines. Recent trends favor engines
like <a href="https://www.ecosia.org">Ecosia</a> and <a href="https://kagi.com">Kagi</a>, as well as
browsers from <a href="https://www.mozilla.org/firefox/">Mozilla</a> (though Firefox has
been <a href="https://www.reuters.com/technology/mozilla-hit-with-privacy-complaint-over-firefox-user-tracking-2024-09-25/">under some fire
lately</a>).</li>
  <li>Claw back privacy from invasive trackers. The <a href="https://www.eff.org/deeplinks/2025/01/mad-meta-dont-let-them-collect-and-monetize-your-personal-data">EFF published a guide on how to
limit what Meta can do with your
data</a>.</li>
  <li>Be aware of how much time you spend on individual sites (esp. the usual social
suspects like Twitter, Instagram, the <a href="https://www.wheresyoured.at/the-slop-society/">cesspit that is
Facebook</a>, YouTube, etc.)</li>
  <li>Practice skepticism. Many people have something to sell you: question
motivations. Study arguments and how and why they are made. Decide for
yourself if they are persuasive.</li>
  <li>Find self-awareness: listen to your emotional state as you consume. Are you
allowing media to exert pathos-directed influence on you? Why? If it’s
genuine, what action does this prompt?</li>
  <li>Use Linux. This is not nearly as hard as it used to be!
<a href="https://ubuntu.com/desktop">Ubuntu</a> is the flagship for “user-friendly”
distributions, but you might be interested in other variants and
distributions<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Get your local techie friends to help (make some if you
have to). According to Iris Meredith of
<a href="https://deadsimpletech.com/">deadSimpleTech</a>, so much surveillance happens
through operating systems today: relying on a system that won’t surveil you
gives you back control.</li>
</ul>

<h2 id="advanced">Advanced</h2>

<ul>
  <li>Invest in digital privacy. Use your local techie friends for these, too. This
usually becomes the costliest step financially, but should lead to the most
control. Remember, you don’t have to use most things you don’t want to, and
there’s often an analog route to what you seek.
    <ul>
      <li>You might <a href="https://tailscale.com/">try a VPN</a> or <a href="https://nextdns.io/">set up a network-level
tracking blocker</a>.</li>
      <li><a href="https://www.citationneeded.news/wind-the-clock/">What do I do now?</a>:
Covers privacy/security, forming community, etc.</li>
      <li><a href="https://www.wired.com/story/the-wired-guide-to-protecting-yourself-from-government-surveillance/">WIRED guide to protecting yourself from government
surveillance</a></li>
    </ul>
  </li>
  <li>Use more open-source software. If it goes in a direction you dislike, you
always have the right to the source to build, modify, and run it yourself!
(This typically comes with an educational cost: you might have to learn to
build, modify, and run programs!) Corollary: avoid proprietary platform
lock-in. See for example <a href="https://sfconservancy.org/GiveUpGitHub/">Give Up
GitHub</a>; I’ve been eyeballing
<a href="https://sr.ht">sourcehut</a> for a while, personally.</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>For resource-constrained devices or older PCs, you may want to try an
alternative, lighter-weight <a href="https://wiki.debian.org/DesktopEnvironment">desktop
environment</a>. Power users might
be interested in projects like <a href="https://archlinux.org">Arch</a> (which powers
SteamDeck OS version 3.0), <a href="https://guix.gnu.org">GNU Guix</a> on <a href="https://guix.gnu.org/manual/en/html_node/System-Installation.html">its own
OS</a> or
any GNU/Linux distribution of your preference, or <a href="https://nixos.org">Nix on
NixOS</a>. If you’re curious about the OS that powers most
embedded devices (including parts of the Nintendo Switch and the PS4), try
<a href="https://www.freebsd.org">FreeBSD</a>. <a href="https://www.debian.org">Debian</a>
underlies the original SteamOS versions 1.0 and 2.0 as well as Ubuntu. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="accessibility" /><category term="internet" /><category term="open-source" /><category term="safety" /><summary type="html"><![CDATA[Here is my short list of steps for digital control.]]></summary></entry></feed>