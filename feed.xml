<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-08-18T18:15:04+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Recent LLM-hype critiques</title><link href="https://benknoble.github.io/blog/2025/08/09/signal-boost/" rel="alternate" type="text/html" title="Recent LLM-hype critiques" /><published>2025-08-09T00:00:00+00:00</published><updated>2025-08-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/08/09/signal-boost</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/08/09/signal-boost/"><![CDATA[<p>I’d like to signal-boost a couple of well-written critiques.</p>

<ul>
  <li>Luna Winters’s <a href="https://blog.foxtrotluna.social/theyre-putting-blue-food-coloring-in-everything/">They’re putting blue food coloring in everything</a></li>
  <li>Colin Cornaby’s <a href="https://www.colincornaby.me/2025/08/in-the-future-all-food-will-be-cooked-in-a-microwave-and-if-you-cant-deal-with-that-then-you-need-to-get-out-of-the-kitchen/">In the Future All Food Will Be Cooked in a Microwave, and if You Can’t Deal With That Then You Need to Get Out of the Kitchen</a></li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><summary type="html"><![CDATA[I’d like to signal-boost a couple of well-written critiques.]]></summary></entry><entry><title type="html">A note about making Racket languages without installing a package</title><link href="https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package/" rel="alternate" type="text/html" title="A note about making Racket languages without installing a package" /><published>2025-07-26T00:00:00+00:00</published><updated>2025-07-26T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/07/26/racket-lang-no-package/"><![CDATA[<p>This trick comes from Matthew Flatt via the Racket Discord.</p>

<p>Usually, when creating a Racket <code class="language-plaintext highlighter-rouge">#lang</code>, the reader needs to produce a module
form like</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">module</span> <span class="nv">&lt;name&gt;</span> <span class="nv">&lt;initial-import-module&gt;</span>
  <span class="nv">body</span><span class="p">)</span>
</code></pre></div></div>

<p>and the <code class="language-plaintext highlighter-rouge">&lt;initial-import-module&gt;</code> is best resolved as a reference to an
installed collection. That is, instead of <code class="language-plaintext highlighter-rouge">"mylang/expander.rkt</code>,
<code class="language-plaintext highlighter-rouge">mylang/expander</code> is preferred: the former is resolved relative to the PWD of
the module being expanded!</p>

<p>To make this work typically requires an installed package or linked files. This
is not a big hurdle for most Racket hackers, but might be confusing for
students.</p>

<p>Instead, we can use a trick to transform the relative module path, which is
otherwise natural, into something that works regardless of location. (You’ll
still need non-relative paths to make documentation work everywhere, I think.)</p>

<p>Here’s the code.</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">module</span> <span class="nv">reader</span> <span class="nv">syntax/module-reader</span>
  <span class="nt">#:language</span> <span class="p">(</span><span class="nf">collapse-module-path-index</span>
              <span class="p">(</span><span class="nb">module-path-index-join</span> <span class="s">"mylang/expander.rkt"</span>
                                      <span class="p">(</span><span class="nb">variable-reference-&gt;module-path-index</span>
                                       <span class="p">(</span><span class="nf">#%variable-reference</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">require</span> <span class="nv">syntax/modcollapse</span><span class="p">))</span>
</code></pre></div></div>

<p>Matthew says:</p>

<blockquote>
  <p>I’m not sure this solves any problem for you, but you can make a module path
within <code class="language-plaintext highlighter-rouge">syntax/module-reader</code> relative by using <code class="language-plaintext highlighter-rouge">#:language</code>, which has an
expression afterward instead of a literal. (It’s something I’ve wanted often
enough that <code class="language-plaintext highlighter-rouge">rhombus/reader</code> treats a relative path like this, instead of like
<code class="language-plaintext highlighter-rouge">syntax/module-reader</code>).</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This trick comes from Matthew Flatt via the Racket Discord.]]></summary></entry><entry><title type="html">A note about building executables with Racket</title><link href="https://benknoble.github.io/blog/2025/06/19/racket-exe/" rel="alternate" type="text/html" title="A note about building executables with Racket" /><published>2025-06-19T00:00:00+00:00</published><updated>2025-06-19T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/19/racket-exe</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/19/racket-exe/"><![CDATA[<p>This information is collected from my and other Racketeers dive into the
documentation in one attempt to form a cohesive picture in response to the
question “How do I use custom icons with GUI executables?”</p>

<p>The extremely short version: changing the icon is something that happens at the
point where you build an executable, not when running inside <code class="language-plaintext highlighter-rouge">racket</code>, DrRacket,
etc. You control this by setting up your project as a package with an
<code class="language-plaintext highlighter-rouge">info.rkt</code>. See <a href="https://docs.racket-lang.org/raco/setup-info.html">Controlling <code class="language-plaintext highlighter-rouge">raco
setup</code></a>.</p>

<p>Those docs will give you info for the <code class="language-plaintext highlighter-rouge">gracket-launcher-libraries</code> and
<code class="language-plaintext highlighter-rouge">gracket-launcher-names</code> directives, which in turn lead you to the
<code class="language-plaintext highlighter-rouge">racket-launcher-names</code> directive. That directive explains that it makes use of
<code class="language-plaintext highlighter-rouge">make-racket-launcher</code> under the hood, and you must infer that the <code class="language-plaintext highlighter-rouge">gracket-*</code>
directives must then use <code class="language-plaintext highlighter-rouge">make-gracket-launcher</code>.</p>

<p>The <a href="https://docs.racket-lang.org/raco/exe.html#(def._((lib._launcher%2Flauncher..rkt)._make-gracket-launcher))">docs for <code class="language-plaintext highlighter-rouge">make-gracket-launcher</code></a> indicate that
<code class="language-plaintext highlighter-rouge">build-aux-from-file</code> is used to find auxiliary filenames for related assets,
and if you click through to the <a href="https://docs.racket-lang.org/raco/exe.html#(def._((lib._launcher%2Flauncher..rkt)._build-aux-from-path))">docs for <code class="language-plaintext highlighter-rouge">build-aux-from-file</code></a> it
confirms that icons are included in those related assets. Ultimately what we
figured out was that <code class="language-plaintext highlighter-rouge">info.rkt</code> needs to include something like</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="nv">gracket-launcher-names</span> <span class="o">'</span><span class="p">(</span><span class="nf">"My</span> <span class="nv">App</span> <span class="nv">Name</span><span class="o">.</span><span class="nv">app"</span><span class="p">))</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">gracket-launcher-libraries</span> <span class="o">'</span><span class="p">(</span><span class="nf">"app</span><span class="o">.</span><span class="nv">rkt"</span><span class="p">))</span>
</code></pre></div></div>

<p>…where <code class="language-plaintext highlighter-rouge">app.rkt</code> is the file with a <code class="language-plaintext highlighter-rouge">main</code> submodule that starts the app’s GUI.
And an <code class="language-plaintext highlighter-rouge">app.icns</code> file in the same folder as <code class="language-plaintext highlighter-rouge">app.rkt</code> is used for the program’s
icon (png for linux).</p>

<p>When you do <code class="language-plaintext highlighter-rouge">raco setup mypackagename</code> it creates the executable with that icon.</p>

<p>Some of this is independently covered by <a href="https://docs.racket-lang.org/raco/exe.html">docs for <code class="language-plaintext highlighter-rouge">raco exe</code></a>, which
supports <code class="language-plaintext highlighter-rouge">--ico</code> (Windows), <code class="language-plaintext highlighter-rouge">--icns</code> (macOS), and <code class="language-plaintext highlighter-rouge">++aux</code> for general icons and
auxiliary files (which point you toward yet more docs about what you can give to
<code class="language-plaintext highlighter-rouge">++aux</code>).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This information is collected from my and other Racketeers dive into the documentation in one attempt to form a cohesive picture in response to the question “How do I use custom icons with GUI executables?”]]></summary></entry><entry><title type="html">A note about Racket’s GC for threads</title><link href="https://benknoble.github.io/blog/2025/06/10/racket-gc-thread/" rel="alternate" type="text/html" title="A note about Racket’s GC for threads" /><published>2025-06-10T00:00:00+00:00</published><updated>2025-06-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/10/racket-gc-thread</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/10/racket-gc-thread/"><![CDATA[<p>Yes, Racket will collect as garbage a thread that is blocked on a channel that
can have no writers (according to Matthew Flatt).</p>

<p>Matthew also suggested a nice refinement of my program below that demonstrates
the effect. I’ll show his first:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>

<span class="c1">;; store a weak reference to the thread, but make sure the channel has no</span>
<span class="c1">;; writers</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">t</span>
  <span class="p">(</span><span class="nb">make-weak-box</span>
   <span class="p">(</span><span class="k">let</span> <span class="p">()</span>
     <span class="p">(</span><span class="k">define</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">make-channel</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">thread</span> <span class="p">(</span><span class="nf">thunk</span> <span class="p">(</span><span class="nb">sync</span> <span class="nv">c</span><span class="p">))))))</span>

<span class="c1">;; The (sync (system-idle-evt)) will not return until the thread has run as far</span>
<span class="c1">;; as it can, at which point it's GC-able. (The system-idle-evt constructor</span>
<span class="c1">;; exists essentially only for this kind of test/example.)</span>
<span class="p">(</span><span class="nb">sync</span> <span class="p">(</span><span class="nb">system-idle-evt</span><span class="p">))</span>
<span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
<span class="p">(</span><span class="nb">weak-box-value</span> <span class="nv">t</span><span class="p">)</span> <span class="c1">;=&gt; #f</span>
</code></pre></div></div>

<p>My original version was:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>

<span class="c1">;; store a weak reference to the thread, but make sure the channel has no</span>
<span class="c1">;; writers</span>
<span class="p">(</span><span class="k">define</span> <span class="nv">t</span>
  <span class="p">(</span><span class="nb">make-weak-box</span>
   <span class="p">(</span><span class="k">let</span> <span class="p">()</span>
     <span class="p">(</span><span class="k">define</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">make-channel</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">thread</span> <span class="p">(</span><span class="nf">thunk</span> <span class="p">(</span><span class="nb">sync</span> <span class="nv">c</span><span class="p">))))))</span>

<span class="c1">;; wait for the GC to collect…</span>
<span class="p">(</span><span class="k">let</span> <span class="nv">loop</span> <span class="p">()</span>
  <span class="p">(</span><span class="nf">match</span> <span class="p">(</span><span class="nb">weak-box-value</span> <span class="nv">t</span><span class="p">)</span>
    <span class="p">[(</span><span class="nf">?</span> <span class="nv">thread?</span><span class="p">)</span>
     <span class="c1">;; …by forcing it (but not too aggressively)</span>
     <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">loop</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">#f</span> <span class="p">(</span><span class="nb">displayln</span> <span class="s">"thread was GC'd"</span><span class="p">)]))</span>
</code></pre></div></div>

<p>It reliably prints and exits within a second or 2 on my machine.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="concurrency" /><summary type="html"><![CDATA[Yes, Racket will collect as garbage a thread that is blocked on a channel that can have no writers (according to Matthew Flatt).]]></summary></entry><entry><title type="html">Bisecting for Fun: Finding a Bugfix in Vim</title><link href="https://benknoble.github.io/blog/2025/06/06/bisecting/" rel="alternate" type="text/html" title="Bisecting for Fun: Finding a Bugfix in Vim" /><published>2025-06-06T00:00:00+00:00</published><updated>2025-06-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/06/06/bisecting</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/06/06/bisecting/"><![CDATA[<p>I experienced a non-breaking paper cut-style bug in Vim for the last 6 months or
so, and I finally tracked down the details.</p>

<h2 id="the-bug">The Bug</h2>

<p>I use <a href="https://github.com/dense-analysis/ale">ALE</a> for linting, and I noticed
that on many files I was getting errors like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E219: Function name required
E117: Unknown function: &lt;lambda&gt;54
</code></pre></div></div>

<p>I let it sit for about 6 months, though, because it wasn’t stopping me from
getting any work done, and it didn’t even seem to be really breaking ALE. It was
disruptive, though.</p>

<p>I finally managed to get a traceback of the bug using <code class="language-plaintext highlighter-rouge">:debug</code>, but I’ll spare
you the details. The end result was an expression like</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">" autoload/ale/command.vim</span>
<span class="k">try</span>
    <span class="k">if</span> <span class="nb">get</span><span class="p">(</span><span class="k">l</span><span class="p">:</span>result<span class="p">,</span> <span class="s1">'result_callback'</span><span class="p">,</span> <span class="k">v</span><span class="p">:</span>null<span class="p">)</span> isnot <span class="k">v</span><span class="p">:</span>null
        <span class="k">call</span> <span class="k">call</span><span class="p">(</span><span class="k">l</span><span class="p">:</span>result<span class="p">.</span>result_callback<span class="p">,</span> <span class="p">[</span><span class="k">l</span><span class="p">:</span>value<span class="p">])</span>
    <span class="k">endif</span>
<span class="k">finally</span>
    <span class="k">call</span> ale#command#ResetCwd<span class="p">(</span><span class="nv">a:buffer</span><span class="p">)</span>
<span class="k">endtry</span>
</code></pre></div></div>

<p>(For the curious: using the pickaxe <code class="language-plaintext highlighter-rouge">-S</code> for <code class="language-plaintext highlighter-rouge">git log</code>, I managed to track this
code down to <a href="https://github.com/dense-analysis/ale/commit/b32fdfe8">ALE commit b32fdfe8 (#2132 Implement deferred objects for
ale#command#Run,
2019-02-08)</a>.)</p>

<p>In particular, calling the callback through a capital variable (funcref
requirement) doesn’t work, but calling it without <code class="language-plaintext highlighter-rouge">call()</code> did. Finally, I
managed to simplify the error:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">:</span>echo <span class="k">call</span><span class="p">({-&gt;</span><span class="s1">'foo'</span><span class="p">},</span> <span class="p">[])</span>
</code></pre></div></div>

<p>yielded an error!</p>

<h2 id="the-workaround">The workaround</h2>

<p>Well, not being able to <code class="language-plaintext highlighter-rouge">call()</code> a lambda is pretty fundamental Vim error for
recent versions of Vim. I happened to be on v9.1.1016, and there had been new
releases, so I figured I’ll try the usual advice: upgrade.</p>

<p>Once I upgraded to 9.1.1415 (400 patches later!), the error was gone in my small
repro and in my day to day work. Great!</p>

<p>Now I was curious, though: what happened? When did the bug get introduced, and
when did it get fixed?</p>

<h2 id="tracking-down-the-fix">Tracking down the fix</h2>

<p>If you know me, this won’t surprise you: <code class="language-plaintext highlighter-rouge">git bisect</code> incoming!</p>

<p>Most uses of bisect are to find the introduction of a bug. Here, though, I had a
broken version and a newer fixed version, so I’m more interested in finding the
<em>bugfix</em>. That means the usual <code class="language-plaintext highlighter-rouge">good</code>/<code class="language-plaintext highlighter-rouge">bad</code> terms won’t be useful here, so I
used <code class="language-plaintext highlighter-rouge">old</code> (has the bug) and <code class="language-plaintext highlighter-rouge">new</code> (fixed the bug) in my bisection.</p>

<p>The first thing I did was setup a script to drive the bisection: it needs to
exit 0 if the commit is <code class="language-plaintext highlighter-rouge">old</code> and non-zero for <code class="language-plaintext highlighter-rouge">new</code> (except 125 means <code class="language-plaintext highlighter-rouge">skip</code>).
The script first builds Vim, skipping the commit if it doesn’t build:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./compile <span class="o">||</span> <span class="o">{</span>
  make distclean <span class="o">&amp;&amp;</span> ./compile
<span class="o">}</span> <span class="o">||</span> <span class="nb">exit </span>125

<span class="c"># sanity check</span>
<span class="nb">test</span> <span class="nt">-x</span> src/vim <span class="o">||</span> <span class="nb">exit </span>125
</code></pre></div></div>

<p>(here the <code class="language-plaintext highlighter-rouge">./compile</code> script is a lightweight version of <a href="https://github.com/benknoble/Dotfiles/blob/master/links/bin/compile-vim">my <code class="language-plaintext highlighter-rouge">compile-vim</code>
script</a>
that configures without Python, skips testing, and skips installing).</p>

<p>Note that we try compiling twice: I’ve seen some failures in configuring the
build that are solved by <code class="language-plaintext highlighter-rouge">make distclean</code>.</p>

<p>Then, the script runs our test case:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># negate: looking for bugfix. "old" needs to exit 0, "good" needs non-zero</span>
<span class="nv">VIMRUNTIME</span><span class="o">=</span>runtime src/vim <span class="nt">--clean</span> <span class="nt">-S</span> &lt;<span class="o">(</span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
try
	echo call({-&gt;'foo'}, [])
catch /./
	quit
endtry
cquit
</span><span class="no">EOF
</span><span class="o">)</span>
</code></pre></div></div>

<p>I tested this against v9.1.1016, which I expected to be old (exit 0), and
against the start of my bisection (roughly v9.1.1435), which I expected to be
new (exit non-zero). It doesn’t help to run a bisection that tests for the wrong
thing!</p>

<p>Finally, I started the bisection:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git bisect start
git bisect old v9.1.1016
git bisect new master
git bisect run ./bisect
</code></pre></div></div>

<p>Just a few minutes later, I had my answers. I saved the log for the curious:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git bisect start
# status : en attente d'un commit bon et d'un commit mauvais
# old: [1aefe1de0b20fe4966863e07efa14b6aa87323ee] patch 9.1.1016: Not possible to convert string2blob and blob2string
git bisect old 1aefe1de0b20fe4966863e07efa14b6aa87323ee
# status : en attente d'un mauvais commit, 1 commit bon connu
# new: [eb59129d2c06fd6627f537fce4fb8660cc8d0cda] runtime(typescript): remove Fixedgq() function from indent script
git bisect new eb59129d2c06fd6627f537fce4fb8660cc8d0cda
# new: [b42b9fc41f27f92aaf4f96cd4149f3160e9fe588] patch 9.1.1233: Coverity warns about NULL pointer when triggering WinResized
git bisect new b42b9fc41f27f92aaf4f96cd4149f3160e9fe588
# new: [066a5340e3d7ccc1fd9d1ee3ddf02cdc5ccf2813] CI: Install netbeans on windows to make sure to run test_netbeans.vim
git bisect new 066a5340e3d7ccc1fd9d1ee3ddf02cdc5ccf2813
# new: [4a530a632bb220b9aec827a12ab211a563c5583d] runtime(vim): Update base-syntax, match :debuggreedy count prefix
git bisect new 4a530a632bb220b9aec827a12ab211a563c5583d
# new: [9601b1435af427382682d923c57731f344e69dc4] translation(sr): Update Serbian messages translation
git bisect new 9601b1435af427382682d923c57731f344e69dc4
# new: [b77c5984877c9de816ea6db8865eb3df7bb14b51] patch 9.1.1032: link error when FEAT_SPELL not defined
git bisect new b77c5984877c9de816ea6db8865eb3df7bb14b51
# new: [166b1754a9b2046d678f59dedea7a3d693067047] patch 9.1.1025: wrong return type of blob2str()
git bisect new 166b1754a9b2046d678f59dedea7a3d693067047
# new: [037b028a2219d09bc97be04b300b2c0490c4268d] patch 9.1.1020: no way to get current selected item in a async context
git bisect new 037b028a2219d09bc97be04b300b2c0490c4268d
# new: [6472e583656aced8045fc852282708a684d77cfa] runtime(doc): fix base64 encode/decode examples
git bisect new 6472e583656aced8045fc852282708a684d77cfa
# new: [9904cbca4132f7376246a1a31305eb53e9530023] patch 9.1.1017: Vim9: Patch 9.1.1013 causes a few problems
git bisect new 9904cbca4132f7376246a1a31305eb53e9530023
# first new commit: [9904cbca4132f7376246a1a31305eb53e9530023] patch 9.1.1017: Vim9: Patch 9.1.1013 causes a few problems
</code></pre></div></div>

<h2 id="the-fix">The fix</h2>

<p>To my surprise, I was one coincidental patch away from the fix! <a href="https://github.com/vim/vim/pull/16450">Version
9.1.107</a> fixed a bug from
<a href="https://github.com/vim/vim/pull/16445">9.1.1013</a> which was reported by
<a href="https://github.com/vim/vim/issues/16453">#16453</a>. The original patch was yet
another fix for <a href="https://github.com/vim/vim/issues/16430">a different bug</a>
introduced by <em>another</em> patch! Phew.</p>

<p>I later found that <a href="https://github.com/vim/vim/issues/16430">the original bug</a>
contained some discussion on exactly my issue:</p>

<blockquote>
  <p>Thanks a lot for addressing this!</p>

  <p>I have no issues with the fix, except that you may want to double check the
workaround suggested by @zzzyxwvut in the comment above (using <code class="language-plaintext highlighter-rouge">call(Setup, [])</code>
instead of <code class="language-plaintext highlighter-rouge">Setup()</code>). With Vim 9.1.1016, using <code class="language-plaintext highlighter-rouge">call()</code> raises an error:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E129: Function name required
E117: Unknown function: &lt;lambda&gt;26
</code></pre></div>  </div>
</blockquote>

<p>and the <a href="https://github.com/vim/vim/issues/16453">later bug</a> mentioned my repro
via <code class="language-plaintext highlighter-rouge">{-&gt; 0}</code>.</p>

<p>While I don’t grasp the full details of the fix, I can see tweaks to the C
function <code class="language-plaintext highlighter-rouge">f_call</code> which presumably implements Vim’s <code class="language-plaintext highlighter-rouge">call()</code> function, and I can
see that it only “translates” the function name when given a string. Presumably
that means funcrefs (like those produced by lambdas) remain untranslated, which
makes sense if I assume that translation means “convert string to funcref.”</p>

<p>Now I know!</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="bisect" /><category term="vim" /><summary type="html"><![CDATA[I experienced a non-breaking paper cut-style bug in Vim for the last 6 months or so, and I finally tracked down the details.]]></summary></entry><entry><title type="html">Contributing to Git</title><link href="https://benknoble.github.io/blog/2025/05/10/git-contribution/" rel="alternate" type="text/html" title="Contributing to Git" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/05/10/git-contribution</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/05/10/git-contribution/"><![CDATA[<p>I’ve contributed small fixes to Git before, and I’ve started replying to the
mailing list more frequently, but <a href="https://lore.kernel.org/git/20250510183358.36806-1-ben.knoble+github@gmail.com/T/#m401ea75fd80edb213924368c016b01b52c8d57cf">my first large contribution</a>
is now available to make <code class="language-plaintext highlighter-rouge">--index</code> the default for <code class="language-plaintext highlighter-rouge">git stash apply</code> and <code class="language-plaintext highlighter-rouge">git
stash pop</code> in Git 3.0.</p>

<p><strong>Update 2025 June 7th</strong> Given the lack of enthusiasm or engagement, I’ll
probably reroll this into a config option for now.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[I’ve contributed small fixes to Git before, and I’ve started replying to the mailing list more frequently, but my first large contribution is now available to make --index the default for git stash apply and git stash pop in Git 3.0.]]></summary></entry><entry><title type="html">Ask hard questions</title><link href="https://benknoble.github.io/blog/2025/05/06/hard-questions/" rel="alternate" type="text/html" title="Ask hard questions" /><published>2025-05-06T00:00:00+00:00</published><updated>2025-05-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/05/06/hard-questions</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/05/06/hard-questions/"><![CDATA[<p>The Wall Street Journal article <a href="https://www.wsj.com/tech/personal-tech/ai-personal-assistant-wearable-tech-impressions-28156b57">I Recorded Everything I Said for Three Months.
AI Has Replaced My
Memory.</a>
is another example of tech reporters being unwilling to ask the hard questions
and push back.</p>

<p>When a company records your voice, stores it on their server, and says they
don’t sell it: Do you believe them? Or do you ask to see policies and controls?</p>

<p>Then there’s the notion that troves of data like this are almost always
eventually leaked: are you still sure that the privacy trade-off will be worth
it in the future?</p>

<p>What does it even mean for these assistive devices to get “more helpful and more
human-like”? And even if they were to become more helpful, that doesn’t mean that
all bets are off on privacy. Privacy is still important.</p>

<p>Worse, writing that it’s only a matter of time before these things are baked
into other devices precludes the world where we decide that privacy is important
and instead lauds the companies that invade our privacy. To me, that’s sloppy.
It’s unserious. It’s a naked ad masquerading as journalism. There are tech
communities actively working to make privacy the default, and there are policy
communities actively working to make privacy a matter of law.</p>

<p>As American police forces have no doubt found thanks to the tireless work of
activists<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, being recorded all the time is not a punchline to close an ad.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>The act of recording law enforcement, in addition to being a measure of
safety, is an important exercise in turning the watcher into the watched.
Pervasive police and state surveillance are met by pervasive recording of
the state. If that makes the watched police uncomfortable, then perhaps they
will understand how the surveilled and scrutinized communities they claim to
protect feel. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><category term="privacy" /><summary type="html"><![CDATA[The Wall Street Journal article I Recorded Everything I Said for Three Months. AI Has Replaced My Memory. is another example of tech reporters being unwilling to ask the hard questions and push back.]]></summary></entry><entry><title type="html">LLM Skepticism</title><link href="https://benknoble.github.io/blog/2025/04/18/skepticism/" rel="alternate" type="text/html" title="LLM Skepticism" /><published>2025-04-18T00:00:00+00:00</published><updated>2025-04-18T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/04/18/skepticism</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/04/18/skepticism/"><![CDATA[<p>A brief essay to explore the business of producing and selling LLMs.</p>

<p><strong>Update 2025 April 30th:</strong> The thesis of the following essay—that LLMs are
more harmful than useful along the axes which I care about—is independent of
whether we use LLMs for programming tasks or emails or something else. I’ve
focused on what I know in this essay: programming. Substitute “generate podcast
audio,” “summarize articles,” “write letters,” or whatever else you want if you
find yourself thinking I’m too narrowly focused on programming. Besides, there’s
a definite narrative of LLM use for programming tasks which I don’t think lines
up with the reality, either in terms of harms or in terms of fitness to task.</p>

<p>Hype-driven reporting on LLMs and other self-described AI tools <a href="https://thetechbubble.substack.com/p/the-phony-comforts-of-useful-idiots">lumps together
junk articles with nuggets of
“neat”</a>.
The enthusiast will say that by pointing this out, my skepticism is a matter of
moving the goalposts. Yet I have never claimed that the LLM does not work (only
that it is not superhuman). Rather, I have repeatedly pointed out—over and
over and over again—the LLM does exactly what it is designed to do. Chiefly,
it generates plausible-seeming text based on a statistical pattern. The problem
is not that LLMs are not useful tools. The problem is that the development and
use of LLMs consistently harms along the axes which I care more about.</p>

<p>For example, an enthusiast like Casey Newton can laud himself as a “real and
dangerous promoter” without engaging in any of the very real harms that exist
today. What harms? Social injustice; racial profiling; environmental hazards;
enshittification; economic damage by way of the diverting of funds away from
productive research and towards Tech, Monopoly, hype, marketing machines, and
grifts; the diverting of value away from laborers and creators towards their
bosses; the creation of a fertile breeding ground for a campaign against truth;
the destruction of a very real and very un-tragic commons; the weaponization of
data to support racist pseudo-science like eugenics and phrenology;
participation in a cultural push to over-quantify and under-qualify; and more.</p>

<p>The punchline? Generative AI and large language models are here, are real, and
are capable of great harm. That is not because they do not work, but rather
because they function precisely as intended. If the purpose of the system is
what it does, then the purpose of large language models and generative AI are,
in addition to neat problems solving tricks, the harms listed above.</p>

<p>Both in their function as a statistical model that replicates reality rather
than improving it and in their construction requiring vast amounts of energy and
capital, an LLM and the business that supports it imperils that which I care
about: a habitable, equitable, empowering world for myself, my peers, and my
children.</p>

<p>Let’s pause for a moment and take a look at a related tool: low-code or no-code
environments. I believe that such tools may have the power to enable the
exploration of new ideas in business, education, and personal computing. My
experience as a software engineer and a hobby programmer has taught me, however,
that such tools enable <a href="https://addyo.substack.com/p/the-70-problem-hard-truths-about">solving 60% to 80% of the problem while obscuring the
remaining 20% to
40%</a>. In many
contexts that is enough of a solution, but is fundamentally insufficient in
other contexts. If such tools are helpful to my goal of the democratization of
digital control then I will continue to applaud them as I have done in the past.
When such tools seek to monopolize digital control or enable the monopolization
of digital control, then I will continue to call that out as antithetical to the
modern computing movement.</p>

<p>It is my hope that such tools create a flood of <a href="https://gwern.net/doc/technology/2004-03-30-shirky-situatedsoftware.html">“situated
software”</a>—that
is, software which is uniquely situated in its social context. Software often
has a small, tightly connected pool of users who share context. As a result,
they can overcome inherent limitations—in either digital technology as a whole
or in their programming capabilities in the specifics—by social negotiation
and physical manipulation of the world around them.</p>

<p>To be clear, low-code and no-code tools are not the only ways to create such
software. Many of my role models create such situated software on a regular
basis, such as when they improve their development environments by short scripts
that only makes sense in their specific context. I and many others have also
built situated software to assist in the pursuit of joyful activities, hobbies,
art, writing, reading, and many more. For some of these latter cases, more
sophisticated general purpose programming languages are a better vehicle.</p>

<p>What characterizes situated software is not how it was implemented but who
implemented it.</p>

<p>Some of the software is used by small communities worldwide; some of it is used
by small groups in a single small area. None would make sense to anyone without
the shared social context.</p>

<p>To return to our original theme—skepticism and criticism of generative AI and
large language models—it is true that some of these low-code and no-code
environments are predicated on or assisted by LLMs. This is not by itself
harmful; however, such models as a social artifact cannot exist separately from
the harms that were enacted upon their creation. Such a separation entails
willful blindness, intentionally drawing a veil upon ourselves, to separate
artifact from creator. It is not my intent to suggest that we can never benefit
from the fruit of the poison tree<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. I do suggest however there are
alternatives<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">2</a></sup> readily available, and that it may take more labor from those
of us so endowed with digital control to ensure that such alternatives continue
to exist, are created anew for a modern world, and proliferate intellectually,
legally, socially, and politically, in order to foster a free ecosystem.</p>

<p>It’s <a href="https://www.wheresyoured.at/optimistic-cowardice/">really hard to be a generative-AI skeptic right
now</a>, by which I mean it
takes a lot of effort to back up my skeptical, critical positions compared to
what it takes to be optimistic<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>. All that said, <a href="https://drewdevault.com/2025/03/17/2025-03-17-Stop-externalizing-your-costs-on-me.html">here’s one example of the cost
of LLM
optimism</a>—scraping
is a tool like any other, which means it can be wielded for good or evil. I
fundamentally <a href="https://pluralistic.net/2023/09/17/how-to-think-about-scraping/">support the idea of scraping as a productive means of
accomplishing many different kinds of
goals</a>. But
scraping that disrespects <code class="language-plaintext highlighter-rouge">robots.txt</code> and the fundamentals of being good web
citizens? That stuff wrecks the web, especially smaller systems and their
admins—scraping should not cause DDoS outages, driving up infrastructure and
human cost. To quote the article above:</p>

<blockquote>
  <p>If blasting CO2 into the air and ruining all of our freshwater and
traumatizing cheap laborers and making every sysadmin you know miserable and
ripping off code and books and art at scale and ruining our [elided] democracy
isn’t enough for you to leave this [stuff] alone, what is?</p>
</blockquote>

<p>I think—along similar lines as Ed Zitron and others—that the AI-hype
companies are dependent on the hype for revenue in terms of “stock go up.” As
others have pointed out, that explains the constant pressure to create a
narrative: the stock price goes up only if investors truly believe these
companies have found another hyperscaler market, so the companies benefit
materially from creating the narrative that they have. (See <a href="https://pluralistic.net/2025/03/15/altering-the-deal/">Altering the
deal</a>, <a href="https://pluralistic.net/2025/03/06/privacy-last/">Big Tech
economics</a>, <a href="https://pluralistic.net/2025/05/02/kpis-off/">the fatfinger
economy</a>, or <a href="https://pluralistic.net/2025/07/15/inhuman-gigapede/">When Google’s slop
meets webslop, search stops</a>
for more information on how stock benefits hyperscalers by inflating
price/earnings ratio and why it’s important that they keep that narrative
alive.)</p>

<p>Cory Doctorow writes:</p>

<blockquote>
  <p>the hundreds of billions being pumped into AI are not driven by [belief in AI
superintelligence]. Rather, they are the product of material conditions, a
system that sends high-flying companies into a nosedive the instant they stop
climbing. AI’s merits and demerits are irrelevant to this: they pump AI
because they <em>must</em> pump. It’s why they pumped metaverse and cryptocurrency and
every other absurd fad. [emphasis original]</p>
</blockquote>

<p>Whether or not the market exists is actually a separate question for these
companies. For us, believing it might not is what makes the whole thing feel
like a grift (house of cards, tower of lies, etc.). Unfortunately, those of us
that are skeptical feel like we have lots of qualitative data, quantitative
data, anecdata, and experts to back up our position. Yet media unwilling to push
back and ask tough questions coupled with expensive, aggressive marketing
campaigns drowns that out for normies<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">4</a></sup> . To be clear: I’m not saying “LLMs
don’t work.” I’m saying “they don’t have the claimed market” and “they are
destructive along many axes I examine” (most of which are more important to me
than “code faster, worse”).</p>

<p>To judge by reactions of my peers, I’m not the only one who thinks these things.
I’ll try to keep being brave enough to say them.</p>

<p>If I believe that the industry of LLMs is this harmful, and if I believe that
there are alternative tools, why would I use them? I hope I’m wrong—I hope one
day I get to reflect on how this moment encouraged us to repair injustice. In
the meantime, please stop dismissing my objections as lack of skill or fear of
change.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>As Cory Doctorow likes to explain it, buying posters and pens from Amazon
to support your protest is better than not protesting at all. Sometimes we
have to accept the imperfection of the world we inhabit in order to wage the
fight against other imperfections. This should not be taken as a version of
“the ends justify the means.” Rather, this is the pragmatic understanding
that in all things there are trade-offs. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Or <a href="https://garymarcus.substack.com/p/a-knockout-blow-for-llms">waiting to be
invented</a>, if
only we’d pursue things <em>other</em> than “reasoning”-based LLMs that collapse on
complexity. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Still don’t believe me? <a href="https://ludic.mataroa.blog/blog/get-weird-and-disappear/">“Being seen to deviate is extremely
hard”</a>. LLM
skepticism is deviant right now. Being a luddite is <em>deviant</em>. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Which I am emphatically not using in a pejorative sense: see <a href="https://youtu.be/O33NK52ZmUk?si=SNgbdd8CCKK29LRH&amp;t=997">this part of
a talk I gave last year
(16:37)</a> about
democratizing technology’s “elite” label. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><summary type="html"><![CDATA[A brief essay to explore the business of producing and selling LLMs.]]></summary></entry><entry><title type="html">Thoughts from recent conversations on LLMs</title><link href="https://benknoble.github.io/blog/2025/04/08/musings/" rel="alternate" type="text/html" title="Thoughts from recent conversations on LLMs" /><published>2025-04-08T00:00:00+00:00</published><updated>2025-04-08T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/04/08/musings</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/04/08/musings/"><![CDATA[<p>Some unpolished thoughts from a recent conversation with other software
engineers.</p>

<p>Responding to claims in <a href="https://www.newsweek.com/ai-impact-interview-yann-lecun-llm-limitations-analysis-2054255">an interview with Meta’s Yann LeCun about LLMs being on
the
outs</a>,
we discussed current trends:</p>

<blockquote>
  <p><strong>anon1</strong>: is this what a bubble feels like?</p>

  <p><strong>me</strong>:</p>
  <ul>
    <li>I can’t help but feel that many who have LLM-based technology foisted upon
them are not yet well-suited to judge their output</li>
    <li>I also can’t help but see the economics of AI hype as similar to crypto
grift or 2008 bubble in the way that all the money is interconnected and
could go boom with just a little tip</li>
  </ul>
</blockquote>

<p>We wondered about “language” and “low dimensionality”:</p>

<blockquote>
  <p><strong>anon2</strong>:</p>
  <blockquote>
    <p>It has come as a surprise to nearly everyone—even experts in
linguistics—that human language fits this requirement for such a discrete,
low-dimensional space</p>
  </blockquote>

  <p>This seems badly wrong. word2vec represents individual words as vectors in a
high-dimensional space (seems like dozens if not hundreds is common), so it
makes sense that anything that can produce reasonable text must be very
high-dimensional.</p>
</blockquote>

<p>And we pondered important questions about values and ethics in technology:</p>

<blockquote>
  <p><strong>anon1</strong>: I’ve been slowly reading a collection of essays by anthropologist
Diana Forsythe called “Studying those who study us” about her anthropological
research of the research labs designing “expert systems” AI back in the
80s-90s which feels relevant to that claim. The researchers believed that if
you just captured the rules of an expert-driven activity, like medical
diagnosis, you could reproduce it with a logical system. Her research
critiques this strongly by pointing out all of the unexamined cultural
context, assumptions, background knowledge, and expectations which are just as
much a part of the work of an expert as the textbook details the expert
themselves believed they used to make their decisions. One of her go-to
examples was a diagnosis system suggesting that a biological male had
amniocentesis, a pregnancy complication, because biological sex assumptions
were considered obvious enough (in the 80s at least) as to not mention.</p>

  <p>The larger point is, we may not actually know what information is required to
take correct action, and the act of attempting to compile that information,
even the successful reproduction of action by a non-expert using that compiled
information, does not prove we’ve actually captured the whole picture. Because
the author and the reader both share a massive collection of conscious and
unconscious context which it may be difficult or impossible to efficiently and
accurately identify with the task itself. LeCun’s assertion seems to agree
with her research. Although the mechanics of AI have changed dramatically, the
nature of its failures seems to remain in the same category.</p>

  <p>And kudos to the article, and LeCun, for being careful in the delineation of
the use of the word ‘reason’ – honestly it’s much better reporting than I was
expecting. It mainly frustrates me how many writers just casually
anthropomorphize LLMs without any basis, seemingly unaware that the question
of whether it is reasoning (and what reasoning is) is the entire philisophical
debate here.</p>

  <p>Finally reading the whole article, I think he’s correct about LLMs and the
current situation, but I feel there are some blind spots in the predictions
(like I have any standing to say so, but anyways). I particularly find it
interesting how close the writer comes to identifying the importance of
physical embodiment to the mind, intelligence, and personhood… then seems to
miss the idea. For a moment I was sure the conclusion would be that our AIs
will need sensory bodies before they can function as “System 2” minds (which I
personally find at least plausible).</p>

  <p>Additionally I find the end goal kind of horrific, even if it were plausible.
Is it a good goal for humanity to function as slavedrivers for
nearly-personalized automatons which we constrain and “take down” when they
“misbehave?” Regardless of the actual ethics with respect to the computers
themselves, how does that morally affect <strong>us</strong>?</p>

  <p>I worry that the folks most excited about this future are unconcerned with
that question, or even trying to somehow sanitize and normalize behavior that
would normally be considered inhumane if applied to human labor, precisely
because they would be comfortable as slavedrivers if it were acceptable. I
know that’s a strong accusation but it’s concerning when they use the same
language so uncritically.</p>

  <p><strong>me</strong>: Do you have a link to (details about) this collection? I’d like to add
it to my backlog</p>

  <p><strong>anon1</strong>: I could only find it in hardcopy. It was just a random
recommendation from the algo on Bluesky and I just pulled the trigger. So far
it’s been pretty interesting.
<a href="https://www.sup.org/books/anthropology/studying-those-who-study-us">https://www.sup.org/books/anthropology/studying-those-who-study-us</a></p>

  <p>[ed: in response to a point about how agents should not require boundless
context to accomplish a task given a technical manual, because the manual is
“more or less 1 to 1 with reality.”]</p>

  <p><strong>me</strong>: I think we all should suspect that the manual is not 1–1 with reality.
Further, one concern is that designing systems this way <strong>changes</strong> reality to
fit the manual, rather than the manual to fit reality. Which of course begs
the most important question: <strong>who writes the manual</strong>? What values do they
imbue explicitly, implicitly, intentionally, unintentionally? If you don’t
think this matters, look at automated policing and the affected populations,
or many other examples cited by Ruha Benjamin in <strong>Race After Technology</strong>.</p>

  <p><strong>anon1</strong>: You might find this lecure series interesting, too, related to
“prescriptive technology” –
<a href="https://www.cbc.ca/radio/ideas/the-1989-cbc-massey-lectures-the-real-world-of-technology-1.2946845">https://www.cbc.ca/radio/ideas/the-1989-cbc-massey-lectures-the-real-world-of-technology-1.2946845</a></p>

  <p>Franklin’s analysis was related to how technology constrains the choices of
workers, but it also applies to nonhuman agents</p>

  <p>Between those two works I’ve been appreciating feminist analysis of technology
a lot lately</p>

  <p>(I don’t think you need to be excited about feminism to appreciate them, dunno
your values, but worth noting it’s a linking factor in both)</p>

  <p><strong>me</strong>: I was surprised that the article pointed out the question:</p>

  <blockquote>
    <p>Without a lived experience of their own, they will need to be imbued with
human goals and objectives—but which ones, and whose variants?</p>
  </blockquote>

  <p>But not surprised (still frustrated) that it stopped short of actually
engaging the question.</p>

  <p><strong>anon1</strong>: There’s a wealth of questions they did not engage with lol (though
to be fair to the author, it’s a short piece and evidently part of a series I
haven’t read)</p>

  <p><strong>me</strong>: Fair!</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="llm" /><category term="unpolished" /><category term="politics" /><summary type="html"><![CDATA[Some unpolished thoughts from a recent conversation with other software engineers.]]></summary></entry><entry><title type="html">A tip on tracking down bound identifiers in Racket</title><link href="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/" rel="alternate" type="text/html" title="A tip on tracking down bound identifiers in Racket" /><published>2025-03-28T00:00:00+00:00</published><updated>2025-03-28T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/03/28/tracking-racket-ids/"><![CDATA[<p>Straight from the horse’s mouth.</p>

<p>Or in this case, from Racket wizard Matthew Flatt.</p>

<blockquote>
  <p>DrRacket can usually open the defining file via a right-click on an name. If
not, or in more restrcted environments, I sometimes use <code class="language-plaintext highlighter-rouge">(identifier-binding
#'name)</code> to help track down <code class="language-plaintext highlighter-rouge">name</code>, since the binding can identify the source
module. If I didn’t know where that module resides, I might try
<code class="language-plaintext highlighter-rouge">(module-path-index-resolve (car (identifier-binding #'name)))</code>.</p>
</blockquote>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[Straight from the horse’s mouth.]]></summary></entry></feed>