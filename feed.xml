<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2025-02-09T02:51:05+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Why I still prefer Vim</title><link href="https://benknoble.github.io/blog/2025/02/05/neovim/" rel="alternate" type="text/html" title="Why I still prefer Vim" /><published>2025-02-05T00:00:00+00:00</published><updated>2025-02-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/05/neovim</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/05/neovim/"><![CDATA[<p>It turns out I might have only written this down once, so here it is.</p>

<p>The short version is I use Vim</p>
<ul>
  <li>because it’s what I learned,</li>
  <li>because I don’t feel like porting everything to Lua<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup> and</li>
  <li>because, while I welcome Neovim’s excellent work making contributing to Vim
easier, I have some issues with other parts of the community.</li>
</ul>

<p>I find the (public, loud parts of the) Neovim community too willing to
reimplement existing plugins or features just to say it was done in Lua<sup id="fnref:2"><a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref">2</a></sup>, too
willing to hide complexity from novices in ways that make actually learning
Vim’s roots hard (let alone debugging complex framework code)<sup id="fnref:3"><a href="#fn:3" class="footnote" rel="footnote" role="doc-noteref">3</a></sup>, and a bit too
“twitch gamer meme bro” for my personal tastes.</p>

<p>None of these things are bad; they don’t mesh with me.</p>

<p>In summary:</p>

<ol>
  <li>Neovim-the-tool doesn’t have a good value proposition for me as someone who
knows Vim quite well and has a large Vimscript-based config that works for
me.</li>
  <li>Neovim-the-community has some great work yet still grates on me.</li>
</ol>

<p>I continue to applaud their work to bring more people to the Vim ecosystem and
turn more people into contributors. I wish that community was more willing to
engage and collaborate with its sister, Vim.<sup id="fnref:4"><a href="#fn:4" class="footnote" rel="footnote" role="doc-noteref">4</a></sup></p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>Lua seems more verbose to do the same thing when scripting editing tasks…
Vim’s command language has a long history borne of editing powertools. Sure,
its programmatic bits are odd, but you can learn those as you go and mostly
by reading the manual (like any other tool). <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>For just one example: why have
<a href="https://github.com/Mofiqul/dracula.nvim">dracula.nvim</a> when
<a href="https://github.com/dracula/vim">dracula/vim</a> has gone out of its way to be
compatible with both editors? By all means, duplicate efforts… Or how about
<a href="https://github.com/tpope/vim-fugitive">fugitive</a> somehow having to
“compete” with <a href="https://github.com/f-person/git-blame.nvim">git-blame.nvim</a>
or <a href="https://github.com/FabijanZulj/blame.nvim">blame.nvim</a>? I’ve started a
whole conversation at work to try to understand
<a href="https://github.com/ThePrimeagen/harpoon/tree/harpoon2">harpoon2</a> because it
feels like “marks + <a href="https://github.com/tpope/vim-tbone">Tbone</a> + pick your
favorite way to spawn terminals”—in other words, learn the builtins first? <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Looking at you, <a href="https://www.lazyvim.org">LazyVim</a>. I know Vim pretty
well, and it took me several hours to figure out what you did to make my
brother-in-law’s Neovim open the Ex command line in a popup. Ugh. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Christian Clason is the Neovim maintainer I most frequently see on the Vim
mailing list, and I especially appreciate their efforts to stay in contact. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="vim" /><category term="rants" /><summary type="html"><![CDATA[It turns out I might have only written this down once, so here it is.]]></summary></entry><entry><title type="html">A grab-bag of Git links</title><link href="https://benknoble.github.io/blog/2025/02/01/git-roundup/" rel="alternate" type="text/html" title="A grab-bag of Git links" /><published>2025-02-01T00:00:00+00:00</published><updated>2025-02-01T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/02/01/git-roundup</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/02/01/git-roundup/"><![CDATA[<p>Some reflections on a mass of articles taking up space on my phone.</p>

<h2 id="how-i-use-git-worktrees"><a href="https://matklad.github.io/2024/07/25/git-worktrees.html">How I use Git worktrees</a></h2>

<p>Matklad explains what to me is a novel application of worktrees. Git’s own
<a href="https://git-scm.com/docs/git-worktree#_examples">manual page</a> talks about them
like a better stash, but Matklad uses them to organize parallel tasks that want
their own sources and builds:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">project/</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main</code>: the current <code class="language-plaintext highlighter-rouge">main</code> branch of development</li>
      <li><code class="language-plaintext highlighter-rouge">work</code>: active work</li>
      <li><code class="language-plaintext highlighter-rouge">review</code>: PR review</li>
      <li><code class="language-plaintext highlighter-rouge">fuzz</code>: fuzzing with Zig</li>
      <li><code class="language-plaintext highlighter-rouge">scratch</code>: random fixups</li>
    </ul>
  </li>
</ul>

<p>While I probably wouldn’t personally use a <code class="language-plaintext highlighter-rouge">main</code> worktree just for diffing,
since <code class="language-plaintext highlighter-rouge">git diff</code> can do that already, using it to compare build times and
behavior is smart. My current projects don’t need fuzzing, and I tend to make
“scratch” work by throwing it into my
<a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/vim/autoload/bk/notepad.vim">notepad</a>
<a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/vim/after/plugin/config/wiki.vim#L43-L45">wiki</a>
and coming back to it later. Still, I could imagine setting up 3 or 4 tmux
windows per project in different worktrees, or just one and using
<code class="language-plaintext highlighter-rouge">pushd</code>/<code class="language-plaintext highlighter-rouge">popd</code>. Build systems that use last-modified times, like <code class="language-plaintext highlighter-rouge">make</code>, would
probably re-build less stuff in the main worktree than in my chaotic work or
review worktrees, so that could help.</p>

<h2 id="commit-messages-are-optional"><a href="https://schpet.com/note/git-commit-messages-are-optional">commit messages are optional</a></h2>

<p>If you know me, you know I don’t agree with the title on principle, but:
technically you can use empty commit messages with <code class="language-plaintext highlighter-rouge">--allow-empty-messages</code>. And
the author smartly uses this for a workflow that includes lots of transient
commits (not dissimilar to one I use myself), where the final commits get a nice
message.</p>

<p>My personal version of this is usually <code class="language-plaintext highlighter-rouge">git commit -m.</code> or <code class="language-plaintext highlighter-rouge">git commit -m wip</code>,
which don’t jar quite as much in <code class="language-plaintext highlighter-rouge">git log</code> and similar output.</p>

<h2 id="reorient-github-pull-requests-around-changesets"><a href="https://mitchellh.com/writing/github-changesets">Reorient GitHub Pull Requests Around Changesets</a></h2>

<p>I’m not the only one to think <a href="/blog/2024/10/04/copy-range-diff/">GitHub PR reviews have problems</a>: for one, the lack of real threading
<a href="https://drewdevault.com/2018/07/02/Email-driven-git.html">like in email</a> makes
pages with lots of comments abysmally slow, and the diff + comment interface is
no better for even reasonably sized PRs! Meanwhile, the underlying Git
technology is <em>fast</em>.</p>

<p>Mitchell Hashimoto focuses more on the lifecycle problems with GitHub’s
interface, though: primarily the distinct lack of versioning (again, something
email and <code class="language-plaintext highlighter-rouge">git range-diff</code> support natively) and the problem of working on the
reviews and the responses in parallel. Like many of us, he wishes GitHub could
orient itself around versioned changesets.</p>

<p>Fortunately, this is what <a href="https://sr.ht">SourceHut</a> does, and I keep coming up
with new reasons to try it.</p>

<h2 id="tips-for-creating-merge-commits"><a href="https://www.brandonpugh.com/blog/tips-for-creating-merge-commits/">Tips for creating merge commits</a></h2>

<p>Brandon Pugh’s first line of advice is one I’ve oft repeated: <em>make the commit
message as useful as possible</em>. As he points out, we talk a lot about regular
commits but less about merge commits. I’ve <a href="/blog/2024/08/02/github-squash/">ranted about messages in PR
merges</a>, but not explained that</p>

<ul>
  <li>I like to use <a href="https://github.com/benknoble/requirements.txt.vim/commit/c4383604c34787e0151c3f9b0325b1aa5565ff2d">the “Conflict” comments Git
adds</a>
to explain their source and resolution.</li>
  <li>I use <a href="https://github.com/benknoble/Dotfiles/blob/6a07c3fb97067eed575bc26042ef9dc945301efb/links/gitconfig#L114"><code class="language-plaintext highlighter-rouge">merge.log =
true</code></a>
to include the 20 most recent commits in the merge commit summary. Similarly
you could use <code class="language-plaintext highlighter-rouge">merge.branchdesc</code> to populate messages with branch descriptions
if your workflow often includes setting those.</li>
</ul>

<p>Pugh also points out there’s often other explanations that can be given in the
description, and we should probably do that.</p>

<p>And of course, avoid evil merges.</p>

<h2 id="store-code-discussions-in-git-using-git-notes"><a href="https://wouterj.nl/2024/08/git-notes">Store code discussions in Git using Git notes</a></h2>

<p>Wouter’s primer on notes is one of the better ones I’ve seen because it
explicitly covers note namespaces and refspecs, making them easier to work with.
In fact, I’m now tempted to start putting notes on commits at work and pushing
them, just in case someone ever discovers them ;)</p>

<p>Unfortunately, I can’t find any options to make adding the “fetch all notes”
refspec the default when setting up new remotes (or cloning). Although it is
possible to create default refspecs for pushing, that also overrides
<code class="language-plaintext highlighter-rouge">push.default</code> which is useful for <a href="/blog/2024/11/15/til-range-diff/#primer">making Git DWIM in a triangular workflow</a>.</p>

<h2 id="how-different-are-different-diff-algorithms-in-git"><a href="https://cs.paperswithcode.com/paper/how-different-are-different-diff-algorithms">How Different Are Different diff Algorithms in Git?</a></h2>

<p>I haven’t had time to read this yet, but it seems like it could be a good
reference on the diff algorithms themselves. They are one aspect of Git I’ve
never really explored.</p>

<h2 id="not-rocket-science-rule-applies-to-merge-commits"><a href="https://matklad.github.io/2023/12/31/git-things.html#Not-Rocket-Science-Rule-Applies-To-Merge-Commits">Not rocket science rule applies to merge commits</a></h2>

<p>Another Matklad piece: <em>typical projects don’t need a linear history of every
commit passing tests</em>. In such a project, merges are the record of passing tests
(so <code class="language-plaintext highlighter-rouge">bisect</code> with <code class="language-plaintext highlighter-rouge">--first-parent</code> first). Take advantage of this by structuring
commits in branches to split work. Matklad gives several examples.</p>

<p>Matklad also mentions the “merge to main, rebase feature branches”
workflow—here, you still rebase feature branches if you need to build on top
of later commits, but you create merge commit when bring the branch into main.</p>

<p>Oh, and by the way: <strong>stop commenting out dead or broken code</strong><sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Delete it. We
can recover it with version control (and it’s likely to never be fixed or
recovered anyway).</p>

<h2 id="commit-messages"><a href="https://matklad.github.io/2023/12/31/git-things.html#Commit-Messages">Commit messages</a></h2>

<p>More Matklad: small and trivial changes deserve small, trivial commit messages.
And we should try to make more of them.</p>

<p>Bait taken! You know I like a good long commit message, but it’s absolutely true
that big commits are a workflow problem often imposed by CI + review turnaround.
I’ve worked with plenty of folks who wish they could do differently but who know
that they need to squeeze as much as they can out of each PR because turnaround
time is long.</p>

<p>Yikes.</p>

<p>I like most of Matklad’s recommendations for fixing the workflow problem here,
though of course in some regulated industries merging pre-review is a
non-starter.</p>

<p>I will single out one comment:</p>

<blockquote>
  <p>If a change is really minor, I would say <code class="language-plaintext highlighter-rouge">minor</code> is an okay commit message!</p>
</blockquote>

<p>No, it isn’t: the subject should describe the fix, even if it’s just <code class="language-plaintext highlighter-rouge">fix doc
typo</code> or <code class="language-plaintext highlighter-rouge">s/it's/its</code>. Those still convey the “minor” intent while providing
enough detail to folks fetching new changes to know what’s happening around
them.</p>

<h2 id="unified-versus-split-diff"><a href="https://matklad.github.io/2023/10/23/unified-vs-split-diff.html">Unified versus split diff</a></h2>

<p>Guess I’m reading a lot of Matklad lately.</p>

<p>The “better diff for review” idea is novel to me, and certainly seems like a
good one to try building! But I’m rather more interested in fetching PR changes
for review and then resetting them so that
<a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> can show them to me. I
normally review one commit at a time, so this might be a good inter-commit
workflow. It also helps provide an overview. Interesting.</p>

<p>In the end, whether by email or web UI, we’re still leaving comments on the
diffs, though.</p>

<h2 id="two-kinds-of-code-review"><a href="https://matklad.github.io/2021/01/03/two-kinds-of-code-review.html">Two kinds of code review</a></h2>

<p>This one reminded me of times where I’ve accepted PRs from newer contributors by
fixing up their branches and merging locally—hopefully that provided some
lessons for them, but it might not be as teachable as merging followed by fixes
(cc’ing them). At least, in prior applications where I didn’t show them the
range-diff and walk them through the changes I made, I certainly didn’t
<em>actively</em> teach them.</p>

<h2 id="putting-the-i-back-in-ide-towards-a-github-explorer"><a href="https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/">Putting the I back in IDE: towards a GitHub explorer</a></h2>

<p>JaneStreet describes an internal review and workflow tool, and I’m jealous.</p>

<p>It did inspire me to add a personal todo item: try building a Vim plugin for
reading and writing PR review comments! I’ve explored a little of the prior
work, but it’s deep in my personal backlog.</p>

<h2 id="code-review-antipatterns"><a href="https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/code-review-antipatterns/">Code review antipatterns</a></h2>

<p>An excellent bit of sarcasm. Well worth the read, especially for new engineers
(what not to do) and experienced engineers (who laugh because of their
experience).</p>

<h2 id="git-random"><a href="https://git-random.olets.dev">git-random</a></h2>

<p>A tool I’ve been meaning to build (roughly), and it already exists! I actually
want to be able to draw a graph shape and have the tool create it, but this is
close and might serve as a back-end.</p>

<h2 id="why-github-actually-won"><a href="https://blog.gitbutler.com/why-github-actually-won/">Why GitHub actually won</a></h2>

<p>Much to <a href="/blog/2024/08/02/github-squash/">my chagrin</a>, it is a
dominant force. GitLab is probably the closest competitor and, if I recall
correctly, remains closed-source.</p>

<p>I’m strongly <a href="https://sfconservancy.org/GiveUpGitHub/">considering
alternatives</a>, and I think you should
too. <a href="https://sr.ht">SourceHut</a> is the most compelling for me right now, but
it’s nice to see that we still live with a <a href="/blog/2024/04/30/extracting-ourselves-from-github-equals-git/">thriving Git forge ecosystem</a> that
really puts its weight behind “decentralized.”</p>

<h2 id="my-unorthodox-branchless-git-workflow"><a href="https://drewdevault.com/2020/04/06/My-weird-branchless-git-workflow.html">My unorthodox, branchless git workflow</a></h2>

<p>While I’m jealous of the “rebase all work at once” aspect of this flow, I’m not
sure I could handle organizing that much parallel work just in rebase todo lists
(partly because I work for a company that, at it’s best, still has some review
and merge cycles that take longer than a few days).</p>

<p>It also wouldn’t surprise me if keeping everything together made it easy to
accidentally send patches out that depend on previous patches without
remembering this fact or mentioning it, which could become very confusing.</p>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>To add a bit of nuance to this, I don’t care what you do in your tree.
Comment out code, play around, whatever. But in the canonical upstream tree,
the main branch? Don’t send me PRs with bodies of commented out code. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[Some reflections on a mass of articles taking up space on my phone.]]></summary></entry><entry><title type="html">Collected chats about Racket</title><link href="https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs/" rel="alternate" type="text/html" title="Collected chats about Racket" /><published>2025-01-29T00:00:00+00:00</published><updated>2025-01-29T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/29/racket-rhombus-r7rs/"><![CDATA[<p>This post serves primarily to host an indexable copy of some chat replies about
the Racket programming language.</p>

<h2 id="questions-about-r7rs-implicit-phasing">Questions about <a href="https://codeberg.org/scheme/r7rs/issues/217">R7RS implicit phasing</a></h2>

<ul>
  <li>
    <p><em>a</em>: hm. what stops a <code class="language-plaintext highlighter-rouge">#lang</code> from reimplementing whatever algorithm a
r7rs-large compiler does?</p>
  </li>
  <li>
    <p><em>b</em>: in particular, nobody has yet worked out a way to maintain the Separate
Compilation Guarantee™ when the compiler does phasing automatically</p>
  </li>
  <li>
    <p><em>c</em>: You can certainly implement that (the same way that algol60 is
implemented) but you would lose the kind of integration between r7rs
modules/macros and racket modules/macros that eg the <code class="language-plaintext highlighter-rouge">#lang r6rs</code>
implementation has</p>
  </li>
  <li>
    <p><em>me</em>: Would you have to? I’m hand-waving and clearly a non-expert, but it
seems like it should be possible (procedural macros!) to implement enough of
the compiler and expander as a compile-time process of the lang, and then
eventually expand into an equivalent Racket module with all the relevant
annotations added.</p>

    <p>This doesn’t seem efficient (since it’s sort of like expanding the whole program
  twice, or worse possibly in some quadratic way), but IUIC typed racket has to do
  something similar in terms of duplicate expansions. Obviously the effort to
  implement this way would be higher (?).</p>
  </li>
  <li>
    <p><em>c</em>: You might be able to do this especially for a single module, but it’s not
obvious if you could get the necessary information from other modules. It’s
possible you could build a lot of infrastructure to do it, but I’m not
certain.</p>
  </li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><summary type="html"><![CDATA[This post serves primarily to host an indexable copy of some chat replies about the Racket programming language.]]></summary></entry><entry><title type="html">Letter to the editor: Populism is not the answer to monopoly and fraud</title><link href="https://benknoble.github.io/blog/2025/01/27/satisfaction/" rel="alternate" type="text/html" title="Letter to the editor: Populism is not the answer to monopoly and fraud" /><published>2025-01-27T00:00:00+00:00</published><updated>2025-01-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/27/satisfaction</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/27/satisfaction/"><![CDATA[<p>In a <em>Wall Street Journal</em> opinion piece titled <a href="https://www.wsj.com/opinion/american-society-was-built-for-populism-not-elitism-nature-and-history-prove-technocrats-wrong-cf9e7a2f?page=1">“American Society Was Built for
Populism, Not
Elitism”</a>
(paywalled), Karl Zinsmeister argues that power has concentrated largely in
the hands of experts and authorities “indoctrinated in universities” (in other
words, too liberal for the mainstream).</p>

<p>While he correctly assess a backlash to authoritarian and central control, he
misses both symptom and cause. The backlash is not against a supposedly
left-leaning power network, but rather against an oligarchic class whose waves
of corrupt money have undue influence in American life. <a href="https://www.ftc.gov/system/files/ftc_gov/pdf/bedoya-statement-emergency-motion.pdf">FTC Commissioner Alvaro
M. Bedoya understands what people
need</a>:</p>

<blockquote>
  <p>What they [working class people] do talk about is how powerful companies are
skirting or abusing the law to force farmers, workers, and small businessmen
to do what they want, when they want, or else. How the government isn’t doing
anything about it. And how they’re going broke because of it.</p>
</blockquote>

<p>If there is also a backlash against the scientific institutions of universities,
it is due to a <a href="https://pluralistic.net/2024/09/25/epistemological-chaos/">protracted campaign against
epistemology</a> by big
business. Oligarchs have an easier time staying rich in a world muddied by
misinformation. Meanwhile, we explicitly <em>want</em> to delegate fact-finding to the
experts: that creates <a href="https://pluralistic.net/2024/11/21/policy-based-evidence/">evidence-based
policy</a>.</p>

<p>What is Zinsmeister’s solution to his spectre of centralized liberal control?
Hand over federal programs to private control: his writing on American
philanthropy indicates to me that he believes a wealthy élite will rule instead.
Same centralized control, different powerful controllers.</p>

<p>The answer is neither populism nor technocracy nor oligarchy. The answer is
regulation of power and markets and strong institutional science (necessarily
separated from government).</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="politics" /><summary type="html"><![CDATA[In a Wall Street Journal opinion piece titled “American Society Was Built for Populism, Not Elitism” (paywalled), Karl Zinsmeister argues that power has concentrated largely in the hands of experts and authorities “indoctrinated in universities” (in other words, too liberal for the mainstream).]]></summary></entry><entry><title type="html">Steps to reclaim digital control</title><link href="https://benknoble.github.io/blog/2025/01/18/digital-control/" rel="alternate" type="text/html" title="Steps to reclaim digital control" /><published>2025-01-18T00:00:00+00:00</published><updated>2025-01-18T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/18/digital-control</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/18/digital-control/"><![CDATA[<p>Here is my short list of steps for digital control.</p>

<h2 id="basics">Basics</h2>

<ul>
  <li>Reject all cookies. Some sites <a href="https://meta.stackexchange.com/q/367370/389795">make this
obnoxious</a>, so I wind up
trying to avoid them if possible. The <a href="https://www.technologylawdispatch.com/2023/11/privacy-data-protection/reject-all-button-in-cookie-consent-banners-an-update-from-the-uk-and-the-eu/">UK’s ICO
agrees</a>.</li>
  <li>Unsubscribe from email you don’t want or need (or recognize!). Some email
clients (like GMail) can do this automatically for you: <a href="https://deadsimpletech.com/blog/abuser_economy">this is especially
handy when unsubscribe links
fail</a>.</li>
  <li>Avoid autoplay and infinite scroll, like YouTube taking you to the next video
automatically. Disable them or avoid the site.</li>
  <li>Disable, deny, or mute unimportant notifications. Ditto for location services
and ads. (On iPhones, that’s usually in “Settings” under each application.)</li>
  <li>Report and delete unsolicited DMs or texts from strangers.</li>
  <li>Silence calls from unknown numbers (use your phone’s settings).</li>
  <li>Practice anti-phishing strategy: check URLs, look for signs of urgency. Here
are several informational sites to hone your strategy:
    <ul>
      <li><a href="https://www.occ.gov/topics/consumers-and-communities/consumer-protection/fraud-resources/phishing-attack-prevention.html">Office of the Comptroller of the Currency: “Phishing Attack Prevention: How to Identify &amp; Avoid Phishing Scams”</a></li>
      <li><a href="https://www.ftc.gov/business-guidance/small-businesses/cybersecurity/phishing">FTC: “Phishing”</a></li>
      <li><a href="https://www.cisa.gov/secure-our-world/recognize-and-report-phishing">America’s Cyber Defense Agency: “Recognize and Report Phishing”</a></li>
    </ul>
  </li>
  <li>Be mindful. Ask yourself: why am I reading, watching, or consuming this? Who
wrote or created it?</li>
</ul>

<h2 id="intermediate">Intermediate</h2>

<ul>
  <li>Try an <a href="https://pluralistic.net/2024/10/16/keep-it-really-simple-stupid/">RSS
Reader</a>:
instead of handing out your email address or social handle to have information
shoved at you, collect a list of links to follow for updates when you want
them. (Sound too good to be true, like the days when Facebook worked? <a href="https://en.wikipedia.org/wiki/RSS">RSS is
almost 26 years old as of this article</a>.)</li>
  <li>Consider alternate browsers and search engines. Recent trends favor engines
like <a href="https://www.ecosia.org">Ecosia</a> and <a href="https://kagi.com">Kagi</a>, as well as
browsers from <a href="https://www.mozilla.org/firefox/">Mozilla</a> (though Firefox has
been <a href="https://www.reuters.com/technology/mozilla-hit-with-privacy-complaint-over-firefox-user-tracking-2024-09-25/">under some fire
lately</a>).</li>
  <li>Claw back privacy from invasive trackers. The <a href="https://www.eff.org/deeplinks/2025/01/mad-meta-dont-let-them-collect-and-monetize-your-personal-data">EFF published a guide on how to
limit what Meta can do with your
data</a>.</li>
  <li>Be aware of how much time you spend on individual sites (esp. the usual social
suspects like Twitter, Instagram, the <a href="https://www.wheresyoured.at/the-slop-society/">cesspit that is
Facebook</a>, YouTube, etc.)</li>
  <li>Practice skepticism. Many people have something to sell you: question
motivations. Study arguments and how and why they are made. Decide for
yourself if they are persuasive.</li>
  <li>Find self-awareness: listen to your emotional state as you consume. Are you
allowing media to exert pathos-directed influence on you? Why? If it’s
genuine, what action does this prompt?</li>
  <li>Use Linux. This is not nearly as hard as it used to be!
<a href="https://ubuntu.com/desktop">Ubuntu</a> is the flagship for “user-friendly”
distributions, but you might be interested in other variants and
distributions<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>. Get your local techie friends to help (make some if you
have to). According to Iris Meredith of
<a href="https://deadsimpletech.com/">deadSimpleTech</a>, so much surveillance happens
through operating systems today: relying on a system that won’t surveil you
gives you back control.</li>
</ul>

<h2 id="advanced">Advanced</h2>

<ul>
  <li>Invest in digital privacy. Use your local techie friends for these, too. This
usually becomes the costliest step financially, but should lead to the most
control. Remember, you don’t have to use most things you don’t want to, and
there’s often an analog route to what you seek.
    <ul>
      <li>You might <a href="https://tailscale.com/">try a VPN</a> or <a href="https://nextdns.io/">set up a network-level
tracking blocker</a>.</li>
      <li><a href="https://www.citationneeded.news/wind-the-clock/">What do I do now?</a>:
Covers privacy/security, forming community, etc.</li>
      <li><a href="https://www.wired.com/story/the-wired-guide-to-protecting-yourself-from-government-surveillance/">WIRED guide to protecting yourself from government
surveillance</a></li>
    </ul>
  </li>
  <li>Use more open-source software. If it goes in a direction you dislike, you
always have the right to the source to build, modify, and run it yourself!
(This typically comes with an educational cost: you might have to learn to
build, modify, and run programs!) Corollary: avoid proprietary platform
lock-in. See for example <a href="https://sfconservancy.org/GiveUpGitHub/">Give Up
GitHub</a>; I’ve been eyeballing
<a href="https://sr.ht">sourcehut</a> for a while, personally.</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>For resource-constrained devices or older PCs, you may want to try an
alternative, lighter-weight <a href="https://wiki.debian.org/DesktopEnvironment">desktop
environment</a>. Power users might
be interested in projects like <a href="https://archlinux.org">Arch</a> (which powers
SteamDeck OS version 3.0), <a href="https://guix.gnu.org">GNU Guix</a> on <a href="https://guix.gnu.org/manual/en/html_node/System-Installation.html">its own
OS</a> or
any GNU/Linux distribution of your preference, or <a href="https://nixos.org">Nix on
NixOS</a>. If you’re curious about the OS that powers most
embedded devices (including parts of the Nintendo Switch and the PS4), try
<a href="https://www.freebsd.org">FreeBSD</a>. <a href="https://www.debian.org">Debian</a>
underlies the original SteamOS versions 1.0 and 2.0 as well as Ubuntu. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="accessibility" /><category term="internet" /><category term="open-source" /><category term="safety" /><summary type="html"><![CDATA[Here is my short list of steps for digital control.]]></summary></entry><entry><title type="html">Developer Experience, Redux</title><link href="https://benknoble.github.io/blog/2025/01/09/devex-redux/" rel="alternate" type="text/html" title="Developer Experience, Redux" /><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/09/devex-redux</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/09/devex-redux/"><![CDATA[<p>Another redux of some DevEx-relevant articles.</p>

<h2 id="normalization-of-deviance"><a href="http://danluu.com/wat/">Normalization of Deviance</a></h2>

<p>Many parts of this post are focused on unregulated environments (so not my
workplace, which is tied to banking and credit cards). Still, some things
resonate:</p>

<blockquote>
  <p>Often, they try to fix things, and then leave when they can’t make a dent.</p>
</blockquote>

<blockquote>
  <p>The data are clear that humans are really bad at taking the time to do things
that are well understood to incontrovertibly reduce the risk of rare but
catastrophic events. We will rationalize that taking shortcuts is the right,
reasonable thing to do. There’s a term for this: the normalization of
deviance. It’s well studied in a number of other contexts including
healthcare, aviation, mechanical engineering, aerospace engineering, and civil
engineering, but we don’t see it discussed in the context of software. In
fact, I’ve never seen the term used in the context of software.</p>
</blockquote>

<blockquote>
  <p>Turning off or ignoring notifications because there are too many of them and
they’re too annoying? An erroneous manual operation?</p>
</blockquote>

<blockquote>
  <p>How many technical postmortems start off with “someone skipped some steps
because they’re inefficient”, e.g., “the programmer force pushed a bad config
or bad code because they were sure nothing could go wrong and skipped
staging/testing”?</p>
</blockquote>

<blockquote>
  <p>People don’t automatically know what should be normal, and when new people are
onboarded, they can just as easily learn deviant processes that have become
normalized as reasonable processes.</p>
</blockquote>

<p>And the list of examples goes on! One conclusion seems clear: building reliable
software demands rooting these out mercilessly. That means efficiency (hello,
developer experience!) and guardrails around manual operations that demand
sanity-checks.</p>

<p>Finally, do this:</p>

<blockquote>
  <ul>
    <li>Pay attention to weak signals</li>
    <li>Resist the urge to be unreasonably optimistic</li>
    <li>Teach employees how to conduct emotionally uncomfortable conversations</li>
    <li>System operators need to feel safe in speaking up</li>
    <li>Realize that oversight and monitoring are never-ending</li>
  </ul>
</blockquote>

<p>If I don’t have much to add, it’s because there isn’t, frankly, much else to
say. Go read the original.</p>

<h2 id="the-chilling-effect-versus-attempts-to-fix-things"><a href="https://rachelbythebay.com/w/2021/04/30/speech/">The chilling effect versus attempts to fix things</a></h2>

<p>Building on the previous article: we’ve got to talk about things and then fix
them. When you have “WTF” moments—see above—say something. <em>Create a weak
signal.</em> (And then pay attention to and amplify others.)</p>

<h2 id="the-honest-troubleshooting-code-of-conduct"><a href="https://rachelbythebay.com/w/2021/05/01/code/">The Honest Troubleshooting Code of Conduct</a></h2>

<p>I think Bryan Cantrill would agree with this sentiment: the resounding theme of
the CoC above is “We are here to make things better.” We are here to improve the
customers lives. That comes above all, and treating that as shared vision will
get us much further than bickering about blame or passing off issues on other
folks.</p>

<h2 id="baking-those-potatoes-with-microservices-and-vendors"><a href="https://rachelbythebay.com/w/2020/08/17/potato/">Baking those potatoes with microservices and vendors</a></h2>

<p>Accountability! Rawr!</p>

<p>This is more of the same, actually: own the problem and fix it, even if you
think it comes from another place. Don’t toss the hot potato to the next person.</p>

<p>Don’t create gaps in responsibility. Fill them.</p>

<h2 id="infra-teams-good-bad-or-none-at-all"><a href="https://rachelbythebay.com/w/2020/05/19/abc/">Infra teams: good, bad, or none at all</a></h2>

<p>Strong language makes a point, even if I don’t appreciate the ad hominem
(“pathetic mass of losers”). My workplace feels like it went from C to something
that resembles this part of B:</p>

<blockquote>
  <p>Random product people now have to know about arbitrary crap enforced by
someone else like “kubelets” and “Jenkins”. They burn their cycles and sanity
on terrible systems instead of improving the experience for the company’s end
user.</p>
</blockquote>

<p>We keep making improvements, but getting to A requires more than a series of
band-aids: it requires deep investment that we just aren’t seeing be made.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="developer experience" /><summary type="html"><![CDATA[Another redux of some DevEx-relevant articles.]]></summary></entry><entry><title type="html">2025 Goals</title><link href="https://benknoble.github.io/blog/2025/01/05/goals/" rel="alternate" type="text/html" title="2025 Goals" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/goals</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/goals/"><![CDATA[<p>A short, probably only-sensible-to-me list of goals. Timeboxed.</p>

<p>Guiding principles:</p>
<ul>
  <li>Meet good people. Do good work.</li>
  <li>Think about what kind of parent I want to be.</li>
</ul>

<p>Timeboxed:</p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />January: Onboard to new work team. <a href="https://randsinrepose.com/archives/ninety-days/">Inspiration: 90 days</a>
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Stay late. Show up early.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Accept every lunch invitation you get.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Always ask about acronyms.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Say something really stupid.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Have a drink.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Tell someone what to do.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Have an argument.</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Find your inner circle.</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />February: learn to paint blood on minis
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Acquire blood paint</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Test on tester minis</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Do the real thing</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />March: move to Charlotte</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />April: see a specialist about my shoulder</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />May: step down as vi.se moderator</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />June: local political involvement (“active” allyship)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />July: explore digital privacy/control options (VPN, browsers, email, GitHub alternatives, colocated hosting for anything I decide to host?)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: rewrite mosaic program to create gifts</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />September: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: ???</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />December: <em>Star Wars: Imperial Assault</em> painted. Minimum 1 squad completed/mo.
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />January: Jetpack troopers</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />February: Snow, blood, and Jetpack troopers smoke trails</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />March: Gamorrean Guards, Weequay Pirates</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />April: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />May: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />June: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />July: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />September: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: ???</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />December: ???</li>
    </ul>
  </li>
</ul>

<p>Generally:</p>
<ul>
  <li>make time for boardgames</li>
  <li>go to USK 2–3 times/week</li>
  <li>write more (1/week?)
    <ul>
      <li>start my book on GUI applications in Racket</li>
      <li>write about our experience reshaping digital lives</li>
      <li>share our general personal computing expertise/experience</li>
    </ul>
  </li>
  <li>keep writing fun, useful programs.
    <ul>
      <li>think about where to direct open-source energy</li>
      <li>cabin-mixer</li>
    </ul>
  </li>
  <li>turn down the bed for S</li>
  <li>knock down todo list priorities</li>
</ul>

<p>Political ways I can get involved:</p>
<ul>
  <li>book access and general literacy</li>
  <li>digital/mathematical literacy</li>
  <li>LGBTQIA+ support</li>
  <li>local reporting</li>
  <li>digital control/privacy; personal computing</li>
  <li>de-toxifying masculinity</li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="goals" /><summary type="html"><![CDATA[A short, probably only-sensible-to-me list of goals. Timeboxed.]]></summary></entry><entry><title type="html">iMessage contact sync</title><link href="https://benknoble.github.io/blog/2025/01/05/imessage/" rel="alternate" type="text/html" title="iMessage contact sync" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/imessage</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/imessage/"><![CDATA[<p>My wife’s iMessage on her Macbook devices had refused to show names for people
in her contacts for a while. Mine started doing the same thing, and I finally
solved the problem.</p>

<p>If your contacts don’t show names in iMessage, make sure the phone number
associated with the contact has an area-code prefix (that’s <code class="language-plaintext highlighter-rouge">+1</code> in the US).
iMessage seems to recognize that messages are coming from <code class="language-plaintext highlighter-rouge">+1 (XXX) YYY-ZZZZ</code>,
and it can’t match that to a contact with phone number <code class="language-plaintext highlighter-rouge">XXXYYYZZZZ</code> (which is
how Contacts will display phone numbers sans area codes). Adding an area code
in Contacts usually triggers a transformation to the standard format and, more
importantly, allows iMessage to match things.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="macOS" /><summary type="html"><![CDATA[My wife’s iMessage on her Macbook devices had refused to show names for people in her contacts for a while. Mine started doing the same thing, and I finally solved the problem.]]></summary></entry><entry><title type="html">Nospend 2025</title><link href="https://benknoble.github.io/blog/2025/01/05/nospend/" rel="alternate" type="text/html" title="Nospend 2025" /><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/05/nospend</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/05/nospend/"><![CDATA[<p>My wife and I want to be (even more) intentional with our spending this year as
we work through the purchase of a home. Here are our ideas.</p>

<p>The goal is not to keep to these perfectly, but to use them as strong guidelines
when evaluating spending decisions in these categories. This should keep us
conscious of where our money goes (alongside our usual budgeting) without
feeling punitive.</p>

<h2 id="guidelines-this-year">Guidelines this year</h2>

<ol>
  <li>No coffee out unless it is building a relationship (<em>e.g.</em>, friend, family,
coworker).</li>
  <li>No new clothes or shoes unless replacing items that are worn out or do not
fit.</li>
  <li>No books except book of the month or book club books that cannot be found at
the library.</li>
  <li>No new cosmetics or toiletries except replacements.</li>
  <li>No new cleaning or household supplies except replacements.</li>
  <li>Eat out 6 times or fewer per month unless building a relationship.</li>
  <li>Maximum 3 treats per month.</li>
  <li>No new cups, mugs, water bottles, etc.</li>
  <li>No new board games, video games, Lego, etc.</li>
</ol>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="financial" /><summary type="html"><![CDATA[My wife and I want to be (even more) intentional with our spending this year as we work through the purchase of a home. Here are our ideas.]]></summary></entry><entry><title type="html">Day one on a new team</title><link href="https://benknoble.github.io/blog/2025/01/04/day1/" rel="alternate" type="text/html" title="Day one on a new team" /><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2025/01/04/day1</id><content type="html" xml:base="https://benknoble.github.io/blog/2025/01/04/day1/"><![CDATA[<p>This is my shortlist of “Day 1 questions” for new teams to help me get up to
speed. In no particular order:</p>

<ol>
  <li>Domain &amp; Design</li>
  <li>Performance budget</li>
  <li>Expected scale factors</li>
  <li>Customer success</li>
  <li>Team norms and culture</li>
</ol>

<p>Examples drawn from real work.</p>

<h2 id="domain--design">Domain &amp; Design</h2>

<p>What do we do? How do we accomplish it?</p>

<p>This could be things like “manage case lifecycles via tenant-configured platform
services,” “keep data flowing with automatically managed Kafka instances,” or
“provide cost recommendations to clients by analyzing data ingested from their
systems.”</p>

<p>Ideally this comes with a domain breakdown of key terms. Examples: tokenized
plastic/PAN; drain/kill/rehydrate; Snowflake contract and connection details.</p>

<h2 id="performance-budget">Performance budget</h2>

<p>What is the budget? I want to know the total expectations and by subsystem (we
should have those, right?). How do we know if we are (not) meeting those
budgets? What characteristics do we measure (mean, stddev, IQR, p90, shape of
distribution<sup id="fnref:1"><a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref">1</a></sup>, etc.) and what are they? What are our target specs end-to-end
(our hardware and our clients’ hardware, with a focus on the clients).</p>

<p>See <a href="https://infrequently.org/series/performance-inequality">Performance inequality on the
web</a> for what happens
when we get this right (or wrong).</p>

<h2 id="expected-scale-factors">Expected scale factors</h2>

<p>Scale factors are the things whose increase will be felt across the system.
Examples might be number of customers, objects, transactions, queries, etc.. How
have we designed to meet changing needs with scale? How do we know if we are
(not)?</p>

<p>We may be planning to reimplement and rearchitect if we can’t meet new scale
requirements, and that’s an acceptable answer as long as we understand the cost
and know when (preferably before) we hit those points.</p>

<h2 id="customer-success">Customer success</h2>

<p>How do we know what our customers need? How do we know if those needs are (not)
met? How do we know when something goes wrong and what it is? How do we get
side-by-side feedback? How is customer engagement or success incorporated back
into the product?</p>

<h2 id="team-norms-and-culture">Team norms and culture</h2>

<p>How do we communicate (meetings, chat, email)? How do we track work-to-do, work
done, priorities, and roadblocks?</p>

<p>How do we develop and deploy code or land it in main? This includes</p>

<ul>
  <li>important areas of review focus</li>
  <li>what PRs/pushes look like (and whether we use PRs or something else)</li>
  <li>commit hygiene standards (<a href="https://cbea.ms/git-commit/">an example set of hygiene
standards</a>, though it doesn’t cover scoping
changes or branch/PR hygiene)</li>
  <li>code quality (what’s automated and what’s not)</li>
  <li>local setup and development</li>
  <li>test data</li>
  <li>pairing/mobbing norms</li>
</ul>

<h2 id="notes">Notes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1">
      <p>We must not commit crimes of statistics, after all. Don’t assume unimodal,
Normal distributions. Please provide a measure of spread with a measure of
central tendency. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="software-engineering" /><summary type="html"><![CDATA[This is my shortlist of “Day 1 questions” for new teams to help me get up to speed. In no particular order:]]></summary></entry></feed>