<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2024-02-24T02:19:06+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">Performance of Racket Pict Comparison</title><link href="https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality/" rel="alternate" type="text/html" title="Performance of Racket Pict Comparison" /><published>2024-02-15T00:00:00+00:00</published><updated>2024-02-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality/"><![CDATA[<p>I get a brief glimpse of the performance characteristics of two methods for
comparing <code class="language-plaintext highlighter-rouge">pict</code>s for equality.</p>

<h2 id="motivation">Motivation</h2>

<p>For recent work in the <a href="https://benknoble.github.io/frosthaven-manager">Frosthaven
Manager</a>, I want to quickly and
accurately compare two generated pictures (called
<a href="https://docs.racket-lang.org/pict/index.html"><code class="language-plaintext highlighter-rouge">pict</code></a>s in Racket parlance) for
equality. This must be accurate and fast to solve a user-experience problem:
interacting with onscreen elements of the Frosthaven Manager causes unrelated
items to flicker. I initially solved this in commit <a href="https://github.com/benknoble/frosthaven-manager/commit/8e6da623b613d286a8d24765c37307ccadba4981">8e6da62 (rich-text-view:
skip updates when content hasn’t changed,
2024-02-04)</a>
by comparing new content with old content to avoid re-rendering the same stuff.
But since pixel-for-pixel equivalent <code class="language-plaintext highlighter-rouge">pict</code>s may differ according to <code class="language-plaintext highlighter-rouge">equal?</code>, I
need a transformation <code class="language-plaintext highlighter-rouge">f</code> such that <code class="language-plaintext highlighter-rouge">(equal? (f p) (f q))</code> is true for
equivalent <code class="language-plaintext highlighter-rouge">pict</code>s <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>.</p>

<p>I believe such <code class="language-plaintext highlighter-rouge">pict</code>s are currently compared for pointer equality only (that
is, using <code class="language-plaintext highlighter-rouge">eq?</code> semantics) because a <code class="language-plaintext highlighter-rouge">pict</code> is a non-transparent structure. In
addition it is documented to contain something that is roughly like a procedure.
Procedures are compared for pointer equality, too; <code class="language-plaintext highlighter-rouge">(equal? (λ (x) x) (λ (x)
x))</code> does not hold.</p>

<p>A brief documentation search produced two promising candidates:</p>
<ol>
  <li>The procedure
<a href="https://docs.racket-lang.org/pict/Rendering.html#%28def._%28%28lib._pict%2Fmain..rkt%29._pict-~3eargb-pixels%29%29"><code class="language-plaintext highlighter-rouge">pict-&gt;argb-pixels</code></a>
returns the byte-vector corresponding to a bitmap of the picture.
Byte-vectors can be compared for equality. While I expect that bitmaps lose
fidelity compared to the internal representation, for the images used by the
Frosthaven Manager the fidelity of the bitmap is sufficient. Below, I refer
to this as the “bytes” method of comparison and the “bytes” transformer.</li>
  <li>The class <a href="https://docs.racket-lang.org/draw/record-dc_.html"><code class="language-plaintext highlighter-rouge">record-dc%</code></a>
behaves like a normal drawing context except that it records drawing actions.
These recorded actions can be replayed to another context or extracted into a
serializable format. This format is, coincidentally, suitable for comparison
by <code class="language-plaintext highlighter-rouge">equal?</code> directly. Unlike <code class="language-plaintext highlighter-rouge">pict-&gt;argb-pixels</code>, using a <code class="language-plaintext highlighter-rouge">record-dc%</code>
requires a little extra code:
    <div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">([</span><span class="nf">dc</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">record-dc%</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">draw-pict</span> <span class="nv">p</span> <span class="nv">dc</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">get-recorded-datum</span><span class="p">)))</span>
</code></pre></div>    </div>
    <p>I refer to this as the “record-dc” method of comparison and the “record-dc”
transformer.</p>
  </li>
</ol>

<h2 id="hypotheses">Hypotheses</h2>

<p>Recall that I have 2 requirements for the equality comparison: it must be
<em>accurate</em> (I don’t want to skip a needed redraw or perform an unnecessary one)
and <em>fast</em> (it can’t delay the rest of the application noticeably). As I thought
about the methods I was considering, I added an extra desideratum: because these
transformations will generate values that will be garbage post-comparison, the
results should not be wasteful with memory and therefore trigger more frequent
garbage collection that could result in an unresponsive application.
Fortunately, the application mostly operates at human timescales and has “idle”
time. Unfortunately, I cannot control the collector (or the duration of the
“idle” time) to guarantee that GC pauses only occur when they would go
completely unnoticed.</p>

<p>With these factors in mind, I formed the following hypotheses:</p>
<ol>
  <li>The bytes method and the record-dc method perform at roughly equal speeds.</li>
  <li>The record-dc method uses more memory.</li>
</ol>

<p>Hypotheses (1) is supported. In a shocking twist, it appears that the bytes
method uses marginally more memory (but this is “eyeball” statistics: I have not
performed a statistical test; I do not have a p-value; this does not generalize
beyond my dataset).</p>

<p>I arrived at these hypotheses by noting that both methods perform a similar
transformation: draw the picture and extract some comparable information. I
expected the bytes method to perform slightly faster on the assumption that
byte-vector comparison is fast and that the comparable values from the record-dc
transformer would be large enough in memory to slow down comparison. This latter
expectation is not supported by my data; indeed, the inverse (that the record-dc
method is faster) is.</p>

<h2 id="experimental-method">Experimental Method</h2>

<p>I constructed a benchmarking program that could be run in a matrix of modes. A
parameter \(N\) controls the number of iterations of each mode; what follows
describes a single iteration for each mode. The four modes are:</p>
<ol>
  <li>A time benchmark using the bytes method.</li>
  <li>A time benchmark using the memory method.</li>
  <li>A memory benchmark using the bytes method.</li>
  <li>A memory benchmark using the memory method.</li>
</ol>

<p>Since each iteration executes independent of the method, I will describe each
benchmark mode in terms of a general method \(M\).</p>

<p>Each benchmark used a table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons with 582 entries. This
resulted in 1164 applications of transformers per run. Each benchmark was run a
minimum of 10 times by <code class="language-plaintext highlighter-rouge">hyperfine</code>.</p>

<h3 id="time-benchmarks">Time Benchmarks</h3>

<p>The time benchmark iterates the table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons \(N\) times; for
each, it compares two <code class="language-plaintext highlighter-rouge">pict</code>s (outputting timing information of the entire
comparison, which includes the use of the transformers, using the <code class="language-plaintext highlighter-rouge">time</code> form)
and checks that the result of the comparison is as expected.</p>

<p>Since <code class="language-plaintext highlighter-rouge">hyperfine</code> ran the time benchmarks 10 times with \(N=1\), this results in
5820 data-points for each method for each of real, cpu, and gc time, for a grand
total of 11640 points.</p>

<h3 id="memory-benchmarks">Memory Benchmarks</h3>

<p>The memory benchmark iterates the table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons \(N\) times. For
each iteration of the table, we perform the ritualistic GC dance (call
<code class="language-plaintext highlighter-rouge">collect-garbage</code> 3 times) and measure current memory use. Then we construct the
objects that would be compared using the transformer under benchmark. Finally,
we print the difference of current memory use (after constructing the objects)
and original memory use (after garbage collection).</p>

<p>I cannot guarantee that GC does not occur during the iteration of the table,
which would skew results. An earlier version of the memory benchmark only
collected garbage before iterating the entire table and likely had to GC midway.
The current version may still GC midway, but it is far less likely now.</p>

<p>Since <code class="language-plaintext highlighter-rouge">hyperfine</code> ran the time benchmarks 10 times with \(N=1\), this results in
5820 data-points for each method for a grand total of 11640 points.</p>

<h2 id="results">Results</h2>

<p>Pretty pictures first. These are box and whisker plots that show mean, IQR, and
outliers.</p>

<p><img src="/assets/img/pict-bench-time.svg" alt="Time spent comparing picts" /></p>

<p>The time chart is segmented by where the time was spent. In real and cpu time,
the record-dc averages 2ms faster. Most gc times are 0.</p>

<p><img src="/assets/img/pict-bench-memory.svg" alt="Memory use by pict transformers for comparison" /></p>

<p>The memory chart shows that the record-dc averages less than 250KiB less memory
use, which is easier to see on a chart with no outliers.</p>

<p><img src="/assets/img/pict-bench-memory2.svg" alt="Memory use by pict transformers for comparison without outliers" /></p>

<p>Here are the <code class="language-plaintext highlighter-rouge">hyperfine</code> outputs at various commits.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit 00366fdb3712bf4359c5a7dc551de2a0fc33e716
hyperfine 'racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes' 'racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc'
Benchmark 1: racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes
  Time (mean ± σ):     10.036 s ±  0.044 s    [User: 9.491 s, System: 0.285 s]
  Range (min … max):    9.962 s … 10.086 s    10 runs

Benchmark 2: racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc
  Time (mean ± σ):      8.798 s ±  0.049 s    [User: 8.283 s, System: 0.267 s]
  Range (min … max):    8.717 s …  8.851 s    10 runs

Summary
  racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc ran
    1.14 ± 0.01 times faster than racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes
</code></pre></div></div>

<p>This demonstrates that the record-dc method is slightly faster than the bytes
method.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit a327c06ceb84b69daa6732ba698ffe6acc22e512
hyperfine 'racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes
  Time (mean ± σ):     10.493 s ±  0.064 s    [User: 9.948 s, System: 0.286 s]
  Range (min … max):   10.383 s … 10.586 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
  Time (mean ± σ):      9.213 s ±  0.053 s    [User: 8.700 s, System: 0.265 s]
  Range (min … max):    9.130 s …  9.303 s    10 runs

Summary
  racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc ran
    1.14 ± 0.01 times faster than racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes

commit 2fb05847453641fcfa400dfa34d2fa67beb7096b
hyperfine 'racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes
  Time (mean ± σ):     39.261 s ±  0.418 s    [User: 38.181 s, System: 0.544 s]
  Range (min … max):   38.926 s … 40.364 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc
  Time (mean ± σ):     26.965 s ±  0.514 s    [User: 26.161 s, System: 0.378 s]
  Range (min … max):   26.271 s … 28.015 s    10 runs

Summary
  racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc ran
    1.46 ± 0.03 times faster than racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes

commit 4767dced4be0a77f4aab62f69f114d713fb19d7f
hyperfine 'racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes
  Time (mean ± σ):     267.591 s ±  5.458 s    [User: 266.095 s, System: 0.851 s]
  Range (min … max):   258.180 s … 274.836 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
  Time (mean ± σ):     269.610 s ±  2.811 s    [User: 267.713 s, System: 1.014 s]
  Range (min … max):   265.525 s … 274.013 s    10 runs

Summary
  racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes ran
    1.01 ± 0.02 times faster than racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
</code></pre></div></div>

<p>These only demonstrate the speed (or lack thereof) of various versions of the
memory benchmarks. The last run produced the data-points described in
<a href="#experimental-method">Experimental Method</a>.</p>

<h2 id="analysis">Analysis</h2>

<p>I find it hard to believe that constructing the comparison objects for 2 <code class="language-plaintext highlighter-rouge">pict</code>s
used 500–750KiB of memory regardless of method; that seems like too much. On the
other hand, I don’t know Racket’s memory model well.</p>

<p>It is clear that, for this sample, the record-dc method is more performant on
all axes I considered.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I’ll be adding record-dc method code to Frosthaven Manager soon.</p>

<h3 id="appendix-machine-information">Appendix: Machine Information</h3>

<ul>
  <li>OS: macOS 12.7.2 21G1974 x86_64</li>
  <li>Kernel: 21.6.0</li>
  <li>CPU: Intel i7-4870HQ (8) @ 2.50GHz</li>
  <li>GPU: Intel Iris Pro, AMD Radeon R9 M370X</li>
  <li>Memory: 16384MiB</li>
</ul>

<p>Benchmarks were run while the machine was under low load.</p>

<h3 id="appendix-full-benchmark-program">Appendix: Full Benchmark Program</h3>

<p><a href="https://github.com/benknoble/pict-equal-bench">The code is available on GitHub.</a></p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket/base</span>

<span class="p">(</span><span class="k">require</span> <span class="nv">pict</span>
         <span class="nv">racket/draw</span>
         <span class="nv">racket/class</span>
         <span class="nv">racket/match</span>
         <span class="nv">rackunit</span>
         <span class="nv">frosthaven-manager/elements</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/ring1</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test1</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/drag-down</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test2</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/speartip</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test3</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/unbreakable-wall</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test4</span><span class="p">]))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pequal-bytes?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">pict-&gt;argb-pixels</span> <span class="nv">p</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">pict-&gt;argb-pixels</span> <span class="nv">q</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">([</span><span class="nf">dc</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">record-dc%</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">draw-pict</span> <span class="nv">p</span> <span class="nv">dc</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">get-recorded-datum</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pequal-dc?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">q</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">checks</span>
  <span class="p">(</span><span class="nb">append</span>
   <span class="p">(</span><span class="nb">list</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="no">#f</span><span class="p">))</span>
   <span class="p">(</span><span class="nf">for*/list</span> <span class="p">([</span><span class="nf">element1</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">fire</span> <span class="nv">ice</span> <span class="nv">earth</span> <span class="nv">air</span> <span class="nv">light</span> <span class="nv">dark</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">element2</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">fire</span> <span class="nv">ice</span> <span class="nv">earth</span> <span class="nv">air</span> <span class="nv">light</span> <span class="nv">dark</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">procedure1</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">element-pics-infused</span>
                                 <span class="nv">element-pics-waning</span>
                                 <span class="nv">element-pics-unfused</span>
                                 <span class="nv">element-pics-consume</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">procedure2</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">element-pics-infused</span>
                                 <span class="nv">element-pics-waning</span>
                                 <span class="nv">element-pics-unfused</span>
                                 <span class="nv">element-pics-consume</span><span class="p">)])</span>
     <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">procedure1</span> <span class="p">(</span><span class="nf">element1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">procedure2</span> <span class="p">(</span><span class="nf">element2</span><span class="p">))</span>
           <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">equal?</span> <span class="nv">procedure1</span> <span class="nv">procedure2</span><span class="p">)</span>
                <span class="p">(</span><span class="nb">equal?</span> <span class="nv">element1</span> <span class="nv">element2</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">run-time-bench</span> <span class="nv">n</span> <span class="nv">pequal?</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">_i</span> <span class="p">(</span><span class="nf">in-range</span> <span class="nv">n</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">check</span> <span class="p">(</span><span class="nf">in-list</span> <span class="nv">checks</span><span class="p">)])</span>
      <span class="p">(</span><span class="nf">match-define</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">expected</span><span class="p">)</span> <span class="nv">check</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="k">time</span> <span class="p">(</span><span class="nf">pequal?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span> <span class="nv">expected</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">run-memory-bench</span> <span class="nv">n</span> <span class="nv">constructor</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">_i</span> <span class="p">(</span><span class="nf">in-range</span> <span class="nv">n</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">check</span> <span class="p">(</span><span class="nf">in-list</span> <span class="nv">checks</span><span class="p">)])</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="k">define</span> <span class="nv">old</span> <span class="p">(</span><span class="nb">current-memory-use</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">match-define</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">_expected</span><span class="p">)</span> <span class="nv">check</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">constructor</span> <span class="nv">p</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">constructor</span> <span class="nv">q</span><span class="p">)</span>
      <span class="p">(</span><span class="k">define</span> <span class="nv">new</span> <span class="p">(</span><span class="nb">current-memory-use</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">println</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">new</span> <span class="nv">old</span><span class="p">)))))</span>

<span class="p">(</span><span class="nf">module+</span> <span class="nv">main</span>
  <span class="p">(</span><span class="k">require</span> <span class="nv">racket/cmdline</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">constructor</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">comparator</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">bench</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="mi">10</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">arg</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:once-any</span>
   <span class="p">[(</span><span class="nf">"--bytes"</span><span class="p">)</span> <span class="s">"Benchmark using bytes"</span>
                <span class="p">(</span><span class="nf">constructor</span> <span class="nv">pict-&gt;argb-pixels</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">comparator</span> <span class="nv">pequal-bytes?</span><span class="p">)]</span>
   <span class="p">[(</span><span class="nf">"--record-dc"</span><span class="p">)</span> <span class="s">"Benchmark using record-dc%"</span>
                <span class="p">(</span><span class="nf">constructor</span> <span class="nv">pict-&gt;recorded-datum</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">comparator</span> <span class="nv">pequal-dc?</span><span class="p">)]</span>
   <span class="nt">#:once-any</span>
   <span class="p">[(</span><span class="nf">"--time"</span><span class="p">)</span> <span class="s">"Benchmark timing"</span>
               <span class="p">(</span><span class="nf">bench</span> <span class="nv">run-time-bench</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">arg</span> <span class="nv">comparator</span><span class="p">)]</span>
   <span class="p">[(</span><span class="nf">"--memory"</span><span class="p">)</span> <span class="s">"Benchmark memory"</span>
                 <span class="p">(</span><span class="nf">bench</span> <span class="nv">run-memory-bench</span><span class="p">)</span>
                 <span class="p">(</span><span class="nf">arg</span> <span class="nv">constructor</span><span class="p">)]</span>
   <span class="nt">#:once-each</span>
   <span class="p">[(</span><span class="nf">"-n"</span><span class="p">)</span> <span class="nv">N</span> <span class="s">"Number of iterations [10]"</span> <span class="p">(</span><span class="nf">n</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">N</span><span class="p">))]</span>
   <span class="nt">#:args</span> <span class="p">()</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nf">bench</span><span class="p">)</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">arg</span><span class="p">)</span> <span class="p">((</span><span class="nf">arg</span><span class="p">)))</span>
     <span class="p">(</span><span class="nb">raise-user-error</span> <span class="s">"Missing arguments"</span><span class="p">))</span>
   <span class="p">((</span><span class="nf">bench</span><span class="p">)</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">((</span><span class="nf">arg</span><span class="p">)))))</span>
</code></pre></div></div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="performance" /><summary type="html"><![CDATA[I get a brief glimpse of the performance characteristics of two methods for comparing picts for equality.]]></summary></entry><entry><title type="html">A Strategy to Change Core Data Structures in Programs</title><link href="https://benknoble.github.io/blog/2024/02/13/data-structure/" rel="alternate" type="text/html" title="A Strategy to Change Core Data Structures in Programs" /><published>2024-02-13T00:00:00+00:00</published><updated>2024-02-13T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/02/13/data-structure</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/02/13/data-structure/"><![CDATA[<p>This relates to the refactoring rule “Make the change easy, then make
the easy change” from Kent Beck. He warns that the first step may be hard. I
present one strategy to make the first step easier for data structure
changes.</p>

<p>It sounds so simple when you say it out loud: change either the data structure
or the data-processing programs, one at a time.</p>

<h2 id="motivation">Motivation</h2>

<p>Imagine you have a data structure that maps decks of cards to numbers as a core
piece of a program. This represents some way of constructing a mixed deck by
drawing cards from each of the decks. Naturally you have some programs that
manipulate this data. You might have</p>
<ul>
  <li>a program to convert the mapping into a mixed deck</li>
  <li>a program to update the mapping</li>
  <li>a program to display the mapping in a graphical interface</li>
  <li>etc.</li>
</ul>

<p>Now suppose you need to make a change to support enhancing specific cards in the
decks.</p>

<p>You could make this change by adding a program to update the mapping by finding
the deck, converting it to a new deck with the enhanced card, and swapping the
key (keeping the old value). Let’s say that poses several challenges and has
some negative trade-offs.</p>

<p>Another way to solve the problem is to split your data structure into 2 pieces:</p>
<ul>
  <li>a mapping from card <em>types</em> to numbers (how many cards of that type in the
mixed deck)</li>
  <li>a mapping from card <em>types</em> to decks (what deck to draw from)
See, each relation in the original mapping had an implicit 3rd component: the
type of cards in the relationship. With this split, the programs above need
changes. The program to enhance cards need only update the second mapping to
point to an enhanced deck, though, and is simpler to reason about.</li>
</ul>

<p>How do you make this change incrementally (with small, focused commits) and keep
your tests passing?</p>

<p>In case the benefits of this approach aren’t obvious:</p>
<ul>
  <li>Small focused commits makes review easier. Large commits are hard to reason
about.</li>
  <li>Passing tests at all commits increases my confidence that I’m not breaking the
system as I make changes.</li>
  <li>I also have to keep less in my head at a time, and have a cleaner pause point
if I need to take a break or to deal with an interruption.</li>
</ul>

<h2 id="the-2-part-strategy">The 2-part Strategy</h2>

<ol>
  <li>Change either the data structure <em>or</em> the contract of all the programs that
manipulate it. Add adapters as necessary.</li>
  <li>Change the other.</li>
</ol>

<p>Changing everything at once is hard. <a href="https://github.com/benknoble/frosthaven-manager/commit/11494ba86888ef84901def135c26656410abcbc8">In a recent merge, I changed the programs
first and then split the
data</a>.
The full diff looks quite large, but <a href="https://github.com/benknoble/frosthaven-manager/compare/feca028...3c56606">the individual commits in that
range</a>
are quite focused.</p>

<p>Let’s say you change the contract of the programs first. This means accepting
arguments for the split data structures and manipulating those. It also requires
adapting the old data structure into the new ones somehow, so you’ll end up with
code to convert old to new at the call-site. And everything should still work,
though you probably haven’t written the enhancement program yet.</p>

<p>Now you can change the data structure, which allows you to throw away the
adapter code at call-sites because the new structures line up with the existing
contracts.</p>

<p>Finally, you can write the easy program you wanted to for enhancement.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="refactor" /><category term="advice" /><category term="racket" /><category term="frosthaven-manager" /><summary type="html"><![CDATA[This relates to the refactoring rule “Make the change easy, then make the easy change” from Kent Beck. He warns that the first step may be hard. I present one strategy to make the first step easier for data structure changes.]]></summary></entry><entry><title type="html">Solving Boggle</title><link href="https://benknoble.github.io/blog/2021/10/27/boggle/" rel="alternate" type="text/html" title="Solving Boggle" /><published>2021-10-27T00:00:00+00:00</published><updated>2021-10-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/10/27/boggle</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/10/27/boggle/"><![CDATA[<p>I solve Boggle in several languages. The following post is a literate program
written in Scribble.</p>

<p><a href="https://benknoble.github.io/scribblings/2021-10-27-boggle/2021-10-27-boggle.html">View full size</a></p>
<iframe class="scribbled" src="https://benknoble.github.io/scribblings/2021-10-27-boggle/2021-10-27-boggle.html" title="Scribbled blog post"></iframe>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="literate-programming" /><category term="prog-langs" /><category term="prolog" /><category term="racket" /><category term="racklog" /><summary type="html"><![CDATA[I solve Boggle in several languages. The following post is a literate program written in Scribble.]]></summary></entry><entry><title type="html">Learning is not (usually) time wasted</title><link href="https://benknoble.github.io/blog/2021/07/09/time-wasted-learning/" rel="alternate" type="text/html" title="Learning is not (usually) time wasted" /><published>2021-07-09T00:00:00+00:00</published><updated>2021-07-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/07/09/time-wasted-learning</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/07/09/time-wasted-learning/"><![CDATA[<p>Way back in January, YouTube subjected me to an advertisement from Exam Labs.
What follows is a direct quote: “Looking for a job in tech? Don’t waste hundreds
of hours learning.”</p>

<p>Exam Labs, if you read this—you do technology a disservice. You need only
examine the recent cyber attacks and the various flaws in our technology to
understand that solving problems without adequate understanding ends in
disaster.</p>

<p>I have no idea what your business model is (I have not linked to you or visited
your website—I do not wish to give you undeserved web points in the form of
traffic). I suspect, based on the quote and name, that it does your clients a
disservice. Depriving anyone of the opportunity to learn is a disservice.</p>

<p>Assuming you charge a fee to pass exams (be they certifying or collegiate), you
do society a disservice. Money cannot buy skill, cannot buy expertise, cannot
build technology. Sending the message that money can buy a job reinforces
structures built only in the name of inequity.</p>

<h2 id="learning-is-a-crucial-technology-skill">Learning is a crucial technology skill</h2>

<p>If you disagree with this header, well, I cannot see why. When was the last time
you sat down to work with a piece of technology and learned nothing in the
process? When did you last use a new piece of technology without learning about
it?</p>

<p>It should be obvious that learning is a crucial skill in <em>all</em> jobs—in all of
life, really. I won’t belabor this point.</p>

<p>Becoming an expert does not mean you stop learning. Invention and discovery are
educational activities. Expertise often means you know how to learn quickly in a
domain (in addition to being able to sift through and connect relevant bits of
information). Expertise in one domain often translates to others; expertise in
learning always translates.</p>

<p>The hundreds of hours Exam Labs (falsely) equated with learning are hundreds of
hours spent becoming an expert in anything (see, for example, <em>The Art of
Learning</em> by Joshua Waitzkin). Developing a skill takes time.</p>

<h2 id="how-else-will-you-acquire-fundamental-technology-skills">How else will you acquire fundamental technology skills?</h2>

<p>Most jobs are in technology these days. Most of us learn on the job—we have
to. That is the nature of adapting to fluid situations, the nature of solving
problems, the nature of creative human beings.</p>

<p>“On the job” is not a good time to learn the fundamentals unless the job is
“trainee” or “student” or similar.</p>

<p>You may be hired for your strengths in a core business domain. You are very
likely to be hired for your fundamental skills and ability to learn the core
business domain. There you may apply your fundamental skills alongside your
unique skills.</p>

<h2 id="not-everything-is-google-able">Not everything is Google-able</h2>

<p>Yes, I know StackOverflow exists. I help people solve problems on affiliated
sites almost daily. I cannot often Google the answer to the question. Even
when I can, the results invariably mean I have to combine separate pieces of
knowledge into a cohesive whole. This requires learning those pieces.</p>

<p>Ever tried to solve a problem before? Did you first study the problem, or dive
in with no knowledge of it? (Most of us have probably done both.) Which approach
lead to a better solution (for some definition of better)?</p>

<h2 id="learning-looks-different-for-everyone">Learning looks different for everyone</h2>

<p>I’m not suggesting that we all get 4-year degrees in Computer Science (how
elitist that would be). Nor am I suggesting we all get 4-year degrees! Education
does not need to mean various lower schools to high school to college. How many
of our passions are self-taught, self-discovered?</p>

<p>Experimentation is a form of learning I practice regularly. Using something
breeds intimate knowledge of it.</p>

<p><em>No</em> learning, however, is not learning. Shortcut learning is often not
learning (or at least, not learning the right skills).</p>

<h2 id="learning-does-not-equal-hundreds-of-hours">Learning does not equal hundreds of hours</h2>

<p>Learning something adjacent to my expertise is often a matter of minutes or a
few hours.</p>

<p>Learning something completely new to me can range from days to a lifetime.</p>

<p>This false equivalence suggests that learning, because it requires so much time,
must be a waste. This is only fallacious. Plenty of things (sleep, hobbies,
cleaning, conversation) require large amounts of time—they are not a waste.</p>

<p>Admittedly, one does not become a black belt in mere days.</p>

<h2 id="i-dont-want-to-work-with-anyone-who-always-skips-learning">I don’t want to work with anyone who always skips learning</h2>

<p>And why should I? The habit of skipped learning is arrogant: it says, “I know
everything I need.”</p>

<p>I must emphasize that skipped school is not always skipped learning:
it may be learning a different trade, a different way. Early Americans had time
off school for the harvest (or at least, so I was taught—I find it hard to
rely on my education of American History in the details).</p>

<p>I must also emphasize that skipping learning occasionally is acceptable. For
example: A new feature in a framework you’ve mastered may not be relevant to you
immediately. Skip it and get the job done. (You may want to revisit it later,
though.) It is the habit that says, “Learning is beneath me” that I find
deplorable.</p>

<p>Do not skip the fundamentals. They are so-called for a reason. One does not build
a tower on sand.</p>

<p>Do not skip the problem. One does not solve the unknown.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="learning" /><category term="rants" /><category term="time" /><summary type="html"><![CDATA[Way back in January, YouTube subjected me to an advertisement from Exam Labs. What follows is a direct quote: “Looking for a job in tech? Don’t waste hundreds of hours learning.”]]></summary></entry><entry><title type="html">Feedburner burned</title><link href="https://benknoble.github.io/announcement/2021/04/14/no-more-subscribe/" rel="alternate" type="text/html" title="Feedburner burned" /><published>2021-04-14T00:00:00+00:00</published><updated>2021-04-14T00:00:00+00:00</updated><id>https://benknoble.github.io/announcement/2021/04/14/no-more-subscribe</id><content type="html" xml:base="https://benknoble.github.io/announcement/2021/04/14/no-more-subscribe/"><![CDATA[<p><a href="https://support.google.com/feedburner/answer/10483501">Feedburner gets rid of email
subscriptions</a>, and I
must follow suit. Fortunately, I was the only subscriber, so no one needs to
take any action. You can still get the RSS feed from the footer, and comments
are still working.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Announcement&quot;]" /><category term="blog" /><summary type="html"><![CDATA[Feedburner gets rid of email subscriptions, and I must follow suit. Fortunately, I was the only subscriber, so no one needs to take any action. You can still get the RSS feed from the footer, and comments are still working.]]></summary></entry><entry><title type="html">2021 Resolutions</title><link href="https://benknoble.github.io/blog/2021/01/12/new-years-resolutions/" rel="alternate" type="text/html" title="2021 Resolutions" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-01-12T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/01/12/new-years-resolutions</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/01/12/new-years-resolutions/"><![CDATA[<p>I haven’t done (or kept) New Year’s Resolutions in a long time. <a href="https://theangrygm.com/adios-2020-guten-tag-2021/">This
article</a> from the <a href="https://theangrygm.com/">Angry GM</a> inspired me to do them differently.</p>

<h2 id="what-am-i-doing">What am I doing?</h2>

<p>Angry, in typically sardonic fashion, writes</p>

<blockquote>
  <p>In short, I completely understand that there is zero value in setting aside a
specific date to take stock of your life. There’s no point in examining the
good and the bad over the past year. Nothing to be gained from identifying the
stuff in your life worth a little gratitude and definitely no reason to
acknowledge there are things you’re not happy about. No good comes from asking
yourself what you could personally do differently to change the things you’re
not happy about. And, in the end, you’re just going to fail, so why even
bother setting specific, actionable goals.</p>
</blockquote>

<p>And it’s this last bit that really gets me: how often have I discussed
goal-setting frameworks (SMART, from Boy Scouts of America; a myriad of
Health/fitness classes; the list goes on)? And how many of them emphasize the
<em>specific</em>-ness and the <em>actionable</em>-ness of goals? (Hint: all of them.)</p>

<p>Worse, how often have I set goals and not relied on the frameworks I have in
front of me?</p>

<p>To that end, I am setting resolutions a bit differently this year. And, in the
vein of Angry, I am making them public. As Angry says:</p>

<blockquote>
  <p>I’m just using myself as an example. […] Look around, figure out what’s wrong,
figure out what’s within your power to change—there is always <strong>something</strong>
you can change, even if it’s you—and then resolve to change it. And then, you
know, actually make the f$&amp;%ing change. Or die trying.</p>
</blockquote>

<p>Here we go. What you’re seeing is the raw 2021 resolutions document (powered by
my <a href="https://github.com/benknoble/wiki-md">wiki system</a>). I’ll update it from time to time, but it’s a bit manual at
the moment (well, manual in-as-much as I open this post’s source, navigate to
this line:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sr">/\V{% comment %} Do not edit below this line {% endcomment %}/</span><span class="p">+</span><span class="m">2</span><span class="p">,</span>$ <span class="k">delete</span> <span class="p">|</span> <span class="k">read</span> <span class="p">~</span><span class="sr">/.wiki/</span>projects<span class="sr">/resolutions/</span><span class="m">2021</span><span class="p">.</span>md
</code></pre></div></div>

<p>and run <code class="language-plaintext highlighter-rouge">:exec getline('.')</code> in vim).</p>

<h1 id="finish-a-50-mile-ride-before-i-graduate">Finish a 50 mile ride before I graduate</h1>

<p><em>Completion date:</em> May 1, 2020</p>

<h2 id="plan">Plan</h2>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Early January: Clean Machine checkup</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />January: short (&lt;5 mile) rides</li>
  <li class="task-list-item"><del>[ ] February: longer (10-15 mile?) rides (need to do some more short ones first)</del></li>
  <li class="task-list-item"><del>[ ] March: shorter rides (5-10 mile?)</del></li>
  <li class="task-list-item"><del>[ ] March: able to ride to Mapleview</del></li>
  <li class="task-list-item"><del>[ ] April: able to ride to Jordan Lake</del></li>
  <li class="task-list-item"><del>[ ] May: combined March + April</del></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />June: Fitness center rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />July: Fitness center &amp; local rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: Fitness center &amp; local rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />September: Fitness center &amp; local rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: Fitness center &amp; local rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: Fitness center &amp; local rides</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />December: Fitness center &amp; local rides</li>
</ul>

<h1 id="play-or-run-a-game-of-dd-or-other-rpg-at-least-once-a-month">Play or run a game of D&amp;D (or other RPG) at least once a month</h1>

<h2 id="plan-1">Plan</h2>

<ul class="task-list">
  <li><del>[ ] Early January: re-read/note <em>Game Angry</em></del></li>
  <li><del>[ ] Late January: acquire <em>The Fall of Silverpine Watch</em> and run it</del></li>
  <li><del>[ ] February: find a game</del></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />March: acquire <em>The Fall of Silverpine Watch</em> and run it (partial)</li>
  <li class="task-list-item"><del>[ ] March: find a game</del></li>
  <li class="task-list-item"><del>[ ] April: find a game</del></li>
  <li class="task-list-item"><del>[ ] May: find a game</del></li>
  <li class="task-list-item"><del>[ ] June: find a game</del></li>
  <li class="task-list-item"><del>[ ] July: find a game</del></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />August: find a game</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />September: find a game</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />October: find a game</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />November: find a game</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />December: Start a game</li>
</ul>

<h1 id="take-a-project-bullet-and-spike-it-plandesign-it-or-scrapcomplete-it-at-least-every-week">Take a project bullet and spike it, plan/design it, or scrap/complete it at least every week</h1>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />new bullets can be added, but don’t start a new bullet until the current one
is finished!</li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><summary type="html"><![CDATA[I haven’t done (or kept) New Year’s Resolutions in a long time. This article from the Angry GM inspired me to do them differently.]]></summary></entry><entry><title type="html">The State of Dis-union</title><link href="https://benknoble.github.io/blog/2021/01/11/state-of-dis-union/" rel="alternate" type="text/html" title="The State of Dis-union" /><published>2021-01-11T00:00:00+00:00</published><updated>2021-01-11T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/01/11/state-of-dis-union</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/01/11/state-of-dis-union/"><![CDATA[<p>While Ben has other articles planned for upcoming technical topics, we feel that
now, in the wake of the January 6th terrorist attack on the US Capitol by US
citizens, is a time for reflection on a scary political landscape and a time for
the explicit condemnation of white supremacy.</p>

<h2 id="on-the-attack">On the attack</h2>

<p>While there have been many actions in the last 4 years that threatened the
safety of Americans, this was the most personal for us. We don’t wish to
invalidate the experiences of others.</p>

<p>Wednesday morning, we were shocked, scared, and frustrated by the breaking news
that Americans had breached the US Capitol, seat of the US government and symbol
of the shifting presidency.</p>

<p>While we acknowledge the extreme polarization of the United States, we never
imagined that a sitting President could actively incite such extreme violence.
Worse, before the 2020 election, we never believed that election results could
come under such intense and baseless accusations of fraud. We certainly never
imagined that such accusations (a) would come from the President and (b) would
lead to such unrest.</p>

<p>We feel called to actively condemn</p>

<ul>
  <li>racism,</li>
  <li>white supremacy,</li>
  <li>violence, especially in the name of silencing others,</li>
  <li>ignorance of white privilege and autonomy,</li>
  <li>and the use of the presidential platform to spread misinformation and
encourage violence</li>
</ul>

<h2 id="on-the-response-to-the-attack">On the response to the attack</h2>

<p>The response to this attack blatantly displayed the white privilege enjoyed by
rioters. The increased surge of <a href="https://blacklivesmatter.com">Black Lives
Matter</a> protesters this summer saw the peace of
demonstrators meet with violent suppression from multiple parties, including the
police and extremists. In contrast, the response to what can only be called a
terrorist attack on January 6th overwhelmingly appears to lack appropriate
action. Whereas one group is met with unnecessary aggression, another is met
with none of the expected.</p>

<p>We are shocked and outraged by the response to this attack. We would regret any
loss of life for any reason, but we do believe in the responsibility of law
enforcement to secure the safety of our nation’s government.</p>

<p>We cannot remain too surprised, however, for America as a nation has always
valued the lives of its white citizens over those of its
<a href="https://www.nytimes.com/article/what-is-bipoc.html">people of color</a> counterparts.</p>

<h2 id="on-our-stance-as-privileged-white-citizens">On our stance as privileged white citizens</h2>

<p>We recognize that from the first our reactions are informed by our unique
cultural, social, political, and spatiotemporal identities. This necessarily
includes our whiteness. In even writing that this has been the “most personal”
feeling threat to us, we are forced to concede that many other events have
likely felt far more personal to those whom we wish to support.</p>

<p>We recognize that discussions of race often make white people uncomfortable;
this includes ourselves. We are actively working to normalize these
conversations between ourselves and within our friend groups. We believe that
this a way toward better communication and mutual trust.</p>

<p>Now more than ever, acting as a white ally for people of color requires actively
condemning attempts to silence their voices, suppress their rights, or subjugate
their bodies. It is not enough that we remain silent behind the front lines; nor
is it right that we speak for others. It is time to lift our voices in support
of theirs and to glorify their right to those voices.</p>

<p>We recognize that this requires much learning. Savannah, as a Sociology major
and Social &amp; Economic Justice minor, and her many teachers, professors and
practitioners, are a testament to the wealth of resources available to educate
us. With that in mind, as we embark on a renewed journey of empathy and
understanding, we would like to leave a list of suggested books for the
interested.</p>

<h2 id="suggested-reading-from-savannah">Suggested reading from Savannah</h2>

<ul>
  <li><a href="https://www.robindiangelo.com">White Fragility by Robin DiAngelo</a></li>
  <li><a href="http://knopfdoubleday.com/book/37354/women-race-class/">Women, Race &amp; Class by Angela Davis</a></li>
  <li><a href="https://scholar.princeton.edu/matthewdesmond/">Evicted by Matthew Desmond</a></li>
  <li><a href="https://www.haymarketbooks.org/books/780-freedom-is-a-constant-struggle">Freedom is a Constant Struggle by Angela Davis</a></li>
  <li><a href="https://newjimcrow.com/about-the-author">The New Jim Crow by Michelle Alexander</a></li>
  <li><a href="https://eji.org/bryan-stevenson/">Just Mercy by Bryan Stevenson</a></li>
  <li><a href="https://www.ibramxkendi.com">How to be an Antiracist by Ibram X. Kendi</a></li>
  <li><a href="https://www.jasonwritesbooks.com">Stamped: Racism, Antiracism, and You by Jason Reynolds and Ibram X. Kendi</a></li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="equal rights" /><category term="learning" /><category term="safety" /><category term="race" /><summary type="html"><![CDATA[While Ben has other articles planned for upcoming technical topics, we feel that now, in the wake of the January 6th terrorist attack on the US Capitol by US citizens, is a time for reflection on a scary political landscape and a time for the explicit condemnation of white supremacy.]]></summary></entry><entry><title type="html">Please *do* generate man-pages</title><link href="https://benknoble.github.io/blog/2020/12/07/man-pages-please/" rel="alternate" type="text/html" title="Please *do* generate man-pages" /><published>2020-12-07T00:00:00+00:00</published><updated>2020-12-07T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2020/12/07/man-pages-please</id><content type="html" xml:base="https://benknoble.github.io/blog/2020/12/07/man-pages-please/"><![CDATA[<p>The recent trend of not including man-pages with command-line “apps” (“tools” or
“programs” are better words!) irks me.</p>

<h2 id="where-is-this-coming-from">Where is this coming from?</h2>

<p>Many places. Specifically:</p>

<ul>
  <li>personal observation of the trend that many command-line programs don’t
support <code class="language-plaintext highlighter-rouge">man &lt;program&gt;</code></li>
  <li>the <a href="https://clig.dev/">otherwise-full-of-solid-advice <em>Command Line
Guidelines</em></a>, which says</li>
</ul>

<blockquote>
  <p><strong>Don’t bother with man pages</strong>. We believe that if you’re following these
guidelines for help and documentation, you won’t need man pages. Not enough
people use man pages, and they don’t work on Windows. If your CLI framework
and package manager make it easy to output man pages, go for it, but otherwise
your time is best spent improving web docs and built-in help text.</p>

  <p><em>Citation: <a href="https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46">12 Factor CLI Apps</a>.</em></p>
</blockquote>

<p>(Emphasis in original)</p>

<ul>
  <li>and the “original” <a href="https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46">12 Factor CLI
Apps</a> from Heroku:</li>
</ul>

<blockquote>
  <p>Unless you already know your users will want man pages, I wouldn’t bother also
outputting them as they just aren’t used often enough anymore. Novice
developers are unaware of them and they don’t work on Windows. Offline support
isn’t necessary if you already have in-CLI help. Still, man page support is
coming to oclif because in a framework I think it makes sense. It can be
solved once for all oclif CLIs to reap the benefits.</p>
</blockquote>

<h2 id="whats-wrong-with-no-man-pages">What’s wrong with no man-pages?</h2>

<p>Let’s start with “what’s <em>right</em> about no man-pages?”. My answer: absolutely
nothing. It’s laziness (and maybe a lack of good tooling). But if asciidoc and
other markup languages can convert to man-pages, it’s time your program did too.</p>

<p>Now, what’s actually wrong with not having them? Well, to answer that question,
I need to talk about how I use them.</p>

<p>I use man-pages for <em>reference</em>. Many of the best-written man-pages become
well-known, to the point where I can quickly navigate to the appropriate
section. Man-pages are nearly uniformly laid out for a reason.</p>

<p>I use man-pages for <em>convenience</em>. They are perfect when I just want to
double-check a flag without breaking my flow (<code class="language-plaintext highlighter-rouge">--help</code> isn’t awful, but half the
time it takes me too many invocations to get the right help!). Opening a
web-browser is the epitome of breaking that flow: I actually left my work
context (the terminal, where the program is going to run), and I have to flip
between browser and terminal. Not hard on a wide screen, but on my laptop it’s
not ideal. With a man-page, I know I can fire up a tmux pane or vim-split (thank
you, <code class="language-plaintext highlighter-rouge">:Man</code>) to browse without disturbing my current context. Man-pages are
nearly uniformly laid out for a reason.</p>

<p>Just to emphasize this, <code class="language-plaintext highlighter-rouge">:Man</code> ships with vim. In any vim, I can run that
command (possibly prefaced by <code class="language-plaintext highlighter-rouge">:runtime ftplugin/man.vim</code>) and get a man-page.
Conversely, it is harder to get the output of <code class="language-plaintext highlighter-rouge">--help</code> and friends where I want
it. Some options:</p>

<figure class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">" 1. put it directly in the buffer</span>
<span class="p">:</span><span class="k">read</span> <span class="p">!</span>program <span class="p">--</span><span class="k">help</span>
<span class="c">" clutters the buffer… so,</span>
<span class="c">" 2. new buffer</span>
<span class="p">:</span><span class="k">new</span> <span class="p">|</span> <span class="k">read</span> <span class="p">!</span>program <span class="p">--</span><span class="k">help</span>
<span class="c">" too much typing…</span>
<span class="c">" 3. a plugin, such as Clam</span>
<span class="p">:</span>Clam program <span class="p">--</span><span class="k">help</span>
<span class="c">" not portable, and still extra typing (though only by 6 characters)</span></code></pre></figure>

<blockquote>
  <p>Aside: this is a pain-point for me when I start working with certain
languages. With C, <code class="language-plaintext highlighter-rouge">K</code> and <code class="language-plaintext highlighter-rouge">keywordprg=:Man</code> is usually good enough (and tags
make up the difference). With Rust &amp; Python, it’s been a hack-filled journey
to get decent in-editor documentation support (and for Rust I almost always
have to open a web-browser, even if it’s with a hot-key). For my workhorse
SML, the only docs are web-browsed or local HTML pages. For lots of other
languages, there’s just not much. Is it too much to ask programming-language
designers to support local, text-based documentation in a program-consumable
format? It doesn’t have to be a man-page, but <em>something</em>.</p>
</blockquote>

<p>I use man-pages for <em>search-ability</em> and general text-manipulation. I have
configured <code class="language-plaintext highlighter-rouge">MANPAGER</code> to use vim, so I have a powerful set of tools to deal
with programs and their documentation. I even have maps for <code class="language-plaintext highlighter-rouge">-</code> and <code class="language-plaintext highlighter-rouge">_</code> to start
searching for short (<code class="language-plaintext highlighter-rouge">-x</code>) and long (<code class="language-plaintext highlighter-rouge">--x…</code>) flags, which makes for a quick
browse (when formatted appropriately). I can’t do that with <code class="language-plaintext highlighter-rouge">--help</code> as easily
(<code class="language-plaintext highlighter-rouge">grep</code>ping doesn’t usually cut it), and even <code class="language-plaintext highlighter-rouge">less</code> as a pager has pretty poor
search ability. Say it with me: Man-pages are nearly uniformly laid out for a
reason.</p>

<p>Personally, I use man-pages to <em>learn</em>. When I’m not sure how something works, I
can usually figure out from a good <code class="language-plaintext highlighter-rouge">man thing</code>. This isn’t really a selling
point, but it is a part of many workflows. “Man” stands for “manual,” after all:
or do people not read those anymore?</p>

<p>All this to say that what’s wrong with no man-pages is a lack of these things,
particularly convenience and non-workflow-breaking-documentation.</p>

<h2 id="no-man-page-is-better-than-a-bad-one">No man-page is better than a bad one</h2>

<p>I’m looking at you <a href="https://cli.github.com"><code class="language-plaintext highlighter-rouge">gh</code></a>. Your documentation, frankly,
is atrocious. Only a sentence at worst that doesn’t actually tell me what you
do! And the flag documentation is frankly so ambiguous that I’ve written
commands with mutually exclusive flags set because it wasn’t at all clear that
only one was allowed. (<code class="language-plaintext highlighter-rouge">gh repo fork --clone false --remote true</code> seems
reasonable, no?).</p>

<p>So, don’t provide a man-page if it’s poor. But maybe find a way to write some
good documentation that could be converted to a man-page (or vice-versa)?</p>

<h2 id="if-not-a-man-page">If not a man-page…</h2>

<p>Well, something like vim’s <code class="language-plaintext highlighter-rouge">:help</code> is <em>fantastic</em>. It’s not for every program,
but any seriously interactive (especially full-screen) program should consider
something of the sort. It helps that the system is extendable and plain text,
too.</p>

<h2 id="a-few-considered-counter-arguments">A few considered counter-arguments</h2>

<ul>
  <li>
    <p>“Doesn’t work on Windows”: valid point. But what does? (Joking aside, surely
there’s <em>something</em> that works as a documentation format for the Windows
terminal besides HTML?)</p>
  </li>
  <li>
    <p>“Novices aren’t aware”: so educate them. Part of CLIG’s shtick was to educate
users when they make a mistake with your command. It’s as easy as keeping
<code class="language-plaintext highlighter-rouge">--help</code> brief with a pointer to “see <code class="language-plaintext highlighter-rouge">man program</code> for more details”.</p>
  </li>
</ul>

<p>Following up on that, I don’t consider <code class="language-plaintext highlighter-rouge">--help</code> to the end-all-be-all of
documentation, as you’ve probably noticed. I only type <code class="language-plaintext highlighter-rouge">--help</code> when I’m sure it
will be quick and useful: generally, a usage summary and a “Top 5” common
options/invocations. Sometimes it’s to re-assure myself that the command does
what I think it does, like when I use one of the more obscure git commands. When
I want the whole book, I go to the man-page. Too-long <code class="language-plaintext highlighter-rouge">--help</code> is “saying too
much” in the words of CLIG.</p>

<ul>
  <li>
    <p>“Offline support isn’t necessary if you already have in-CLI help”: false. (Or
at least, I disagree.) Solution proposed: generate man-pages from in-CLI help or
vice-versa. I favor the latter, actually, but I’m probably in the minority on
that. I find that it’s nicer to write documentation in a textual format rather
than in strings in code, especially in some languages. (Newlines? Continuations?
Leading spaces? Ugh. Format it for me—I don’t want to have to care.)</p>
  </li>
  <li>
    <p>“otherwise your time is best spent improving web docs and built-in help text”:
see above solution. They could all be one and the same (or at least tied
together: sure, a tutorial might not be a good candidate for a man-page, at
least for smaller programs. But it could link to an HTML version of the page
that lives in my terminal.).</p>
  </li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="rants" /><category term="design" /><category term="docs" /><category term="productivity" /><category term="open-source" /><category term="shell" /><summary type="html"><![CDATA[The recent trend of not including man-pages with command-line “apps” (“tools” or “programs” are better words!) irks me.]]></summary></entry><entry><title type="html">Excel for Mac cannot simultaneously edit files with the same basename</title><link href="https://benknoble.github.io/blog/2020/09/29/excel-duplicate-files/" rel="alternate" type="text/html" title="Excel for Mac cannot simultaneously edit files with the same basename" /><published>2020-09-29T00:00:00+00:00</published><updated>2020-09-29T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2020/09/29/excel-duplicate-files</id><content type="html" xml:base="https://benknoble.github.io/blog/2020/09/29/excel-duplicate-files/"><![CDATA[<p>Yes, you read that right: you can’t open (e.g.) <code class="language-plaintext highlighter-rouge">Documents/budget.xlsx</code> <em>and</em>
<code class="language-plaintext highlighter-rouge">Work/budget.xlsx</code> at the same time.</p>

<h2 id="what-the-f">What the f@#$?</h2>

<p>Yeah, that was my reaction, too. At first, it doesn’t make any sense.</p>

<p>Here’s the best explanation I have, as an educated programmer: the basenames
(that would be the <code class="language-plaintext highlighter-rouge">budget.xlsx</code> part—I haven’t tested differing extensions
yet) are probably stored in a duplicate-disallowing structure. Normally, we’d
call that a set. I suspect they’re probably actually keys in a map of filenames
to in-memory buffers of contents or data or some-such. The keys of a map must be
a set, so that would also track.</p>

<h2 id="fix-it">Fix it!</h2>

<p>I wish I could. Stupid closed-source bloatware… I mean, sure, it’s a nice tool
for spreadsheets.</p>

<p>Ironically, the fix is probably easy: use absolute paths as the entries in
whatever this set is. I cannot fathom a single reason not to do so.</p>

<p>This might not solve the problem if two documents have the same absolute path on
two different file-systems (e.g., my hard drive and a network-mounted file-share
or some other storage medium), but we could either</p>

<ul>
  <li>include the medium name in the entry, or</li>
  <li>include the mount point in the entry.</li>
</ul>

<p>Again, what the f@#$.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="rants" /><category term="ms-excel" /><summary type="html"><![CDATA[Yes, you read that right: you can’t open (e.g.) Documents/budget.xlsx and Work/budget.xlsx at the same time.]]></summary></entry><entry><title type="html">Stop, sed i!</title><link href="https://benknoble.github.io/blog/2020/08/06/stop-sed-i/" rel="alternate" type="text/html" title="Stop, sed i!" /><published>2020-08-06T00:00:00+00:00</published><updated>2020-08-06T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2020/08/06/stop-sed-i</id><content type="html" xml:base="https://benknoble.github.io/blog/2020/08/06/stop-sed-i/"><![CDATA[<p>Right tool for the job people, right tool for the job :roll_eyes:</p>

<h2 id="what-am-i-talking-about">What am I talking about?</h2>

<p>I’m referring to all the use of <code class="language-plaintext highlighter-rouge">sed -i</code> spread wantonly on the internet, <em>sans</em>
appropriate caveats.</p>

<blockquote>
  <p>Background: most implementations of the <code class="language-plaintext highlighter-rouge">-i</code> flag allow <code class="language-plaintext highlighter-rouge">sed</code> to edit files in
place; by default, it edits standard in and writes to standard out, so you end
up having to do <code class="language-plaintext highlighter-rouge">&lt;file sed ... &gt;file.new &amp;&amp; mv file.new file</code>. Trying to
redirect back into the file (<code class="language-plaintext highlighter-rouge">&lt;file sed ... &gt;file</code>) fails because the file is
truncated before <code class="language-plaintext highlighter-rouge">sed</code> gets to read it!</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">-i</code> flag is <a href="https://pubs.opengroup.org/onlinepubs/9699919799/">not specified by
POSIX</a>, which makes it
non-portable. This isn’t such a big deal, <em>except</em> that different <code class="language-plaintext highlighter-rouge">sed</code>s require
different arguments! GNU <code class="language-plaintext highlighter-rouge">sed</code> edits in place, no argument provided. BSD <code class="language-plaintext highlighter-rouge">sed</code>,
such as the one on macOS, requires a suffix:</p>

<ul>
  <li>if the suffix is non-empty, it places the original file at <code class="language-plaintext highlighter-rouge">file.suffix</code> and
the new contents in <code class="language-plaintext highlighter-rouge">file</code>;</li>
  <li>if the suffix is empty, no backup is made.</li>
</ul>

<p>So now, every <code class="language-plaintext highlighter-rouge">sed -i</code> solution to a problem needs to <em>at least</em></p>

<ul>
  <li>mention non portability, and</li>
  <li>mention two different implementations and how they handle it.</li>
</ul>

<p>I don’t know about you, but I wonder if the solution to editing files in place
is a lot simpler… :thinking:</p>

<h2 id="sed-for-streams-ed-for-files"><code class="language-plaintext highlighter-rouge">sed</code> for streams, <code class="language-plaintext highlighter-rouge">ed</code> for files</h2>

<p><code class="language-plaintext highlighter-rouge">sed</code> stands for “stream editor.” It was designed based on the text-editor
<code class="language-plaintext highlighter-rouge">ed</code>’s commands! <code class="language-plaintext highlighter-rouge">ed</code> is built to edit files.</p>

<ul>
  <li>If you need to edit a file in place, use POSIX <code class="language-plaintext highlighter-rouge">ed</code> (or the improved
POSIX-specified <code class="language-plaintext highlighter-rouge">ex</code>);</li>
  <li>if you need to transform a stream, <code class="language-plaintext highlighter-rouge">sed</code> is an option.</li>
</ul>

<p>I cannot emphasize this enough. Trying to use <code class="language-plaintext highlighter-rouge">sed -i</code> in any kind of portable
anything is likely to break; worse was the thought that <code class="language-plaintext highlighter-rouge">sed</code> should ever be
used for editing files! Use a text-editor: if you thought “I’m automating, I
don’t want to run a text-editor to automate,” well, remember:</p>

<ul>
  <li>it is entirely possible to automate (read: script) <code class="language-plaintext highlighter-rouge">ed</code> and <code class="language-plaintext highlighter-rouge">ex</code>, and</li>
  <li>people today fire up entire web browsers in their desktop applications in
order to automate things—running a tiny text-editor is the least of your
worries.</li>
</ul>

<h2 id="addendum-scripting-ed">Addendum: scripting ed</h2>

<p><code class="language-plaintext highlighter-rouge">ed</code> takes commands on standard in. It can be made silent with <code class="language-plaintext highlighter-rouge">-s</code>, and the
argument is a file to edit. I ignore <code class="language-plaintext highlighter-rouge">-p</code> for now because it isn’t useful for
scripting/automation. So, to script <code class="language-plaintext highlighter-rouge">ed</code>, generate a list of commands and pipe
it in!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">printf</span> <span class="s1">'%s\n'</span> g/abc/d w q | ed <span class="nt">-s</span> file
</code></pre></div></div>

<p>That’s the most portable, but <code class="language-plaintext highlighter-rouge">bash</code> users can probably do</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ed <span class="nt">-s</span> file <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
g/abc/d
w
q
</span><span class="no">EOF
</span></code></pre></div></div>

<p>There is quite a bit of flexibility here; the left-hand side could actually be
another <em>program</em> that generates <code class="language-plaintext highlighter-rouge">ed</code> commands on standard out! It turns out,
this is what <code class="language-plaintext highlighter-rouge">diff</code> does: in its default output mode, we have</p>

<blockquote>
  <p>These lines resemble <code class="language-plaintext highlighter-rouge">ed</code> subcommands to convert <code class="language-plaintext highlighter-rouge">file1</code> into <code class="language-plaintext highlighter-rouge">file2</code>. The
line numbers before the action letters shall pertain to <code class="language-plaintext highlighter-rouge">file1</code>; those after
shall pertain to <code class="language-plaintext highlighter-rouge">file2</code>. Thus, by exchanging <code class="language-plaintext highlighter-rouge">a</code> for <code class="language-plaintext highlighter-rouge">d</code> and reading the line
in reverse order, one can also determine how to convert <code class="language-plaintext highlighter-rouge">file2</code> into <code class="language-plaintext highlighter-rouge">file1</code>.
As in <code class="language-plaintext highlighter-rouge">ed</code>, identical pairs (where <code class="language-plaintext highlighter-rouge">num1=num2</code>) are abbreviated as a single
number.</p>
</blockquote>

<p>And when we ask for the <code class="language-plaintext highlighter-rouge">-e</code> output mode:</p>

<blockquote>
  <p>With the <code class="language-plaintext highlighter-rouge">-e</code> option, a script shall be produced that shall, when provided as
input to <code class="language-plaintext highlighter-rouge">ed</code>, along with an appended <code class="language-plaintext highlighter-rouge">w</code> (write) command, convert <code class="language-plaintext highlighter-rouge">file1</code>
into <code class="language-plaintext highlighter-rouge">file2</code>.</p>
</blockquote>

<p>So now, you can probably write a <code class="language-plaintext highlighter-rouge">patch</code> command :smile: you parse the output
from <code class="language-plaintext highlighter-rouge">diff</code>, with maybe slight modification, and then pass it as input to <code class="language-plaintext highlighter-rouge">ed</code>!</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="shell" /><category term="sed" /><category term="rants" /><category term="posix" /><summary type="html"><![CDATA[Right tool for the job people, right tool for the job :roll_eyes:]]></summary></entry></feed>