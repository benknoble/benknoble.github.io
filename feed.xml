<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://benknoble.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benknoble.github.io/" rel="alternate" type="text/html" /><updated>2024-08-02T20:01:06+00:00</updated><id>https://benknoble.github.io/feed.xml</id><title type="html">Junk Drawer</title><subtitle>For all those little papers scattered across your desk</subtitle><author><name>benknoble</name></author><entry><title type="html">What everyone should know about git commit</title><link href="https://benknoble.github.io/blog/2024/08/02/git-commit/" rel="alternate" type="text/html" title="What everyone should know about git commit" /><published>2024-08-02T00:00:00+00:00</published><updated>2024-08-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/08/02/git-commit</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/08/02/git-commit/"><![CDATA[<p>These tips make it easier to write better commit messages.</p>

<ol>
  <li>Stop using <code class="language-plaintext highlighter-rouge">-m</code> (configure a proper editor)</li>
  <li>Write while looking at the diff with <code class="language-plaintext highlighter-rouge">-v</code></li>
</ol>

<h2 id="stop-using-git-commit--m">Stop using <code class="language-plaintext highlighter-rouge">git commit -m</code></h2>

<p>Using <code class="language-plaintext highlighter-rouge">-m</code> encourages short commit messages that don’t give meaningful
information. Did you know that omitting <code class="language-plaintext highlighter-rouge">-m</code> gives you a chance to write your
commit in your favorite editor? I think many people assume that <code class="language-plaintext highlighter-rouge">-m</code> is the only
way to avoid being dropped in to Vi (oh, the horror… <a href="/about/">I guess</a>…), but you can <a href="https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config">make Git use any editor you
want</a>.
Now you have room to write those <a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">standard formatted commit
messages</a>.</p>

<p>The <code class="language-plaintext highlighter-rouge">-m</code> flag is convenient for <code class="language-plaintext highlighter-rouge">wip</code>-style save-my-progress commits that you’ll
rebase and reword. You will reword them, won’t you?</p>

<h2 id="use--v-to-see-your-changes-in-the-commit-message-template">Use <code class="language-plaintext highlighter-rouge">-v</code> to see your changes in the commit message template</h2>

<p>You’re writing your commit message and you want to review the changes to make
sure you commented on everything. What do you do?</p>

<ul>
  <li>I run <a href="https://github.com/benknoble/Dotfiles/blob/2ba059a73eb38b96225cc770f8e7d4d05b970306/links/vim/after/ftplugin/gitcommit.vim#L16"><code class="language-plaintext highlighter-rouge">:DiffGitCached</code> with
<code class="language-plaintext highlighter-rouge">\v</code></a>,
personally. Or <code class="language-plaintext highlighter-rouge">:Git --paginate diff --cached</code>.</li>
  <li>Use your terminal to do <code class="language-plaintext highlighter-rouge">git diff --cached</code>.</li>
  <li>Scroll to the bottom, because you used <code class="language-plaintext highlighter-rouge">--verbose</code>.</li>
</ul>

<p>See that last one? If you need to, turn on <code class="language-plaintext highlighter-rouge">commit.verbose</code>; then Git will
include the diff in your commit message template for you to refer to.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><summary type="html"><![CDATA[These tips make it easier to write better commit messages.]]></summary></entry><entry><title type="html">The case against squashing to merge via GitHub</title><link href="https://benknoble.github.io/blog/2024/08/02/github-squash/" rel="alternate" type="text/html" title="The case against squashing to merge via GitHub" /><published>2024-08-02T00:00:00+00:00</published><updated>2024-08-02T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/08/02/github-squash</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/08/02/github-squash/"><![CDATA[<p>Squash and merge is a bad default action, and it grates when it’s the <em>only</em>
permitted merge option.</p>

<p>Squash and merge collapses even carefully crafted PRs and commits into a giant
blob (pun intended). All the juicy information we know how to unlock with tools
like <code class="language-plaintext highlighter-rouge">git log</code> and <code class="language-plaintext highlighter-rouge">git blame</code> is now gone, made useless by the squash. It even
hurts <code class="language-plaintext highlighter-rouge">git bisect</code>: pinpointing a squashed merge is unlikely to help if you
still have to wade through 6000 lines of changes instead of 600 or 60. Even if
you can recover the original branch using GitHub’s <code class="language-plaintext highlighter-rouge">refs/pull/N/head</code> namespace,
which isn’t guaranteed on other vendors, it can still be harmful to hit the
squash fence.</p>

<p>Worse, squashing to merge traps you in a vicious cycle. In an ideal world, good
commits help us fall into a virtuous cycle of success: they provide more
information so that our tools are more useful, which encourages us to use our
tools more, which reveals more opportunities to pack information into commits,
and so on. Meanwhile, squashing everything by default traps us in the antithesis
of this cycle—commit messages are useless if they’ll be squashed, so they become
useless in a self-fulfilling prophecy, encouraging squash and merge ad nauseum.
We remove incentives to use our information-gathering tools; not using them
blinds us to their power, keeping them from being useful.</p>

<p>No other investment that we make pays off as long as good commits. Good commits
pay dividends for the entire lifetime of a project and become more valuable the
longer the project lives. This might as well be an exponential curve of payoff.
Nothing is free, but the expected value of any single commit dwarfs the cost of
the minutes involved in crafting its message. Squash and merge as a default
eliminates those benefits and any incentives to reap them. Outside of a few
narrow use cases, I recommend against it.</p>

<p>Discuss with your teams and projects: decide what’s right for you. Don’t default
to squash and merge because it seems easy or commonplace. One of the trade-offs
is giving up useful commits (unless whoever merges takes the time to craft a
good squash message, which in many circles is rare thanks to GitHub defaults).
If you intentionally choose this trade-off, you probably needing to be getting
equivalent dividends from whatever the other trade-offs are. The benefits of
commits are hard to measure up against.</p>

<p>One case squash might be useful: squashing messy external contributions gives
maintainers an expedient way to accept otherwise good code and bring the commit
up to project standards. Ideally this is paired with resources for the
contributor to learn how to do better next time, including both Git knowledge
and project standards knowledge. Mentoring a new contributor through the process
to fix the commits themselves is a valuable and laudable task, but it is costly.</p>

<p>On the other hand, moving slowly is not so bad as it seems, despite all FAANG
would have you believe.</p>

<p>Don’t forget: GitHub foisted the squash and merge option upon us with bad
defaults to back it up. To do the equivalent in Git requires knowledge of
interactive rebase or the <code class="language-plaintext highlighter-rouge">cherry-pick</code> command. Git knows how to merge and
rebase via commands of the same name and flags to <code class="language-plaintext highlighter-rouge">pull</code>. Squash and merge is a
convenient button when needed, but the need is so infrequent that its only
mention in Git proper is the <code class="language-plaintext highlighter-rouge">squash</code> verb in the lexicon of interactive rebase.</p>

<p>You tread this route at your own peril.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="rants" /><summary type="html"><![CDATA[Squash and merge is a bad default action, and it grates when it’s the only permitted merge option.]]></summary></entry><entry><title type="html">Em-dashes are not spaced hyphens</title><link href="https://benknoble.github.io/blog/2024/06/16/em-dashes/" rel="alternate" type="text/html" title="Em-dashes are not spaced hyphens" /><published>2024-06-16T00:00:00+00:00</published><updated>2024-06-16T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/06/16/em-dashes</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/06/16/em-dashes/"><![CDATA[<p>Please use an em-dash—like this one—for parenthetical asides or for a gentler
colon. <s>Do not use spaced hyphens - like this - they are wrong.</s></p>

<p>I don’t know where this trend came from or how to stop it. I suspect</p>

<ul>
  <li>Poor education for effective punctuation and grammar means fewer people know
about the <a href="https://practicaltypography.com/hyphens-and-dashes.html">different kinds of
dashes</a>.</li>
  <li>Keyboard and editor interfaces hide away <a href="https://practicaltypography.com/type-composition.html">various typographic
characters</a>, including
en- and em- dashes, making them less discoverable.</li>
  <li>In the twist of self-reinforcing trends, publicly visible uses make this
mistake more acceptable.</li>
</ul>

<p>I can’t top Butterick on explanations, so please review <a href="https://practicaltypography.com/hyphens-and-dashes.html">Hyphens and
Dashes</a> for the
different kinds and uses. I’m going to mention some input methods he omitted:</p>

<ul>
  <li>On an iPhone keyboard, holding the hyphen gives you options for dashes of
different lengths, including en- and em- dashes.</li>
  <li>(Programmers) In
<a href="https://jekyllrb.com/docs/configuration/markdown/#kramdown">Jekyll</a>- or
<a href="https://kramdown.gettalong.org/syntax.html#typographic-symbols">Kramdown</a>-
processed Markdown, the code <code class="language-plaintext highlighter-rouge">---</code> becomes an em-dash and <code class="language-plaintext highlighter-rouge">--</code> becomes an
en-dash, thanks to <a href="https://practicaltypography.com/typewriter-habits.html">Typewriter
Habits</a>. Note that
they must appear within text not to be confused with the horizontal rule
shorthand.</li>
  <li>(Programmers) In Vim, the digraphs <code class="language-plaintext highlighter-rouge">-N</code> and <code class="language-plaintext highlighter-rouge">-M</code> (enter with
<kbd>Ctrl</kbd>+<kbd>k</kbd>) produce en- and em- dashes, respectively.</li>
</ul>

<h2 id="collected-examples">Collected examples</h2>

<p>I accept submissions.</p>

<ul>
  <li>
    <p>A <a href="https://web.archive.org/web/20240530222028/https://fortellergames.com/blogs/news/short-and-long-term-app-plans">Foreteller Companion App post</a> reads:</p>

    <blockquote>
      <ul>
        <li>Growing concerns on regulations and legal ramifications - which trickle down into new policies to adhere to and shorter deadlines to implement, which puts our product development on hold</li>
        <li>App Store presence doesn’t help our niche audience - while ASO is important in most industries, we have qualitative data that shows overwhelmingly our installs come from direct installs from links, QRs, conventions</li>
      </ul>
    </blockquote>
  </li>
</ul>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="rants" /><category term="typography" /><summary type="html"><![CDATA[Please use an em-dash—like this one—for parenthetical asides or for a gentler colon. Do not use spaced hyphens - like this - they are wrong.]]></summary></entry><entry><title type="html">Re: The Functional Programming Hiring Problem</title><link href="https://benknoble.github.io/blog/2024/06/16/fp-hiring/" rel="alternate" type="text/html" title="Re: The Functional Programming Hiring Problem" /><published>2024-06-16T00:00:00+00:00</published><updated>2024-06-16T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/06/16/fp-hiring</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/06/16/fp-hiring/"><![CDATA[<p>The identified problem may be missing the mark.</p>

<p><a href="https://blog.janissary.xyz/posts/hiring-functional-programming">Noah Snelson articulates a common theme of functional programming (FP)
discussions</a>:
the (dis)advantages of hiring engineers for less-well-known FP languages. I
personally appreciated the time Snelson spent crafting their article, but I’ve
got one issue with it: I think they missed a class of candidates.</p>

<p>Snelson believes that when hiring for languages such as the fictional Gooby, you
have 3 pools of applicants:</p>

<ol>
  <li>The résumé-spammers.</li>
  <li>Bright undergrads recently converted to the “One True Way.”</li>
  <li>Senior engineers who only care about Gooby.</li>
</ol>

<p>I agree that these are 3 types of potential Gooby applicants! I disagree that
there’s a meaningful difference between converted undergraduates and senior
engineers <em>in the context of the article’s problems.</em></p>

<h2 id="are-these-senior-engineers-behaving-like-senior-engineers">Are these senior engineers behaving like senior engineers?</h2>

<p>The senior engineers certainly have more Gooby expertise than the converted
undergraduates. Snelson’s characterizations reveal that these engineers are
still drinking the Kool-Aid, though:</p>

<ul>
  <li>They “<em>insist</em> on using a functional language at every moment possible”
(emphasis original).</li>
  <li>They “threaten to quit if their next project wasn’t written in their language
of choice.”</li>
  <li>They appeal to the authority of
<a href="https://en.wikipedia.org/wiki/Benevolent_dictator_for_life">BDFL</a>s “as a kind
of trump-card argument in technical discussions.”</li>
</ul>

<p>This does not, in my mind, a senior engineer make.</p>

<h2 id="another-kind-of-engineer">Another kind of engineer</h2>

<p>All the noise of technical obsession obscures the missing 4th class of
applicants: those who have the nuance of thought we expect from leaders. Those
who understand that <a href="/about/#me">simple questions have complex answers</a>.</p>

<p>The obsessed-senior problem is not particular to FP, either. Languages that
encourage imperative or OO style  have the same type of zealots (JavaScript,
Java, C, C++, etc.). Rust has its own zealotry and is markedly harder to
classify. <a href="https://cs.brown.edu/courses/cs173/2012/Videos/2012-09-05/2012-09-05.m4v">Shriram Krishnamurthi argues that such classifications are not a
useful concept: the features of a language and how they interact provides a
better discussion
frame.</a>
(I recommend the <a href="https://cs.brown.edu/courses/csci1730/2012/Videos/">whole video
series</a>).</p>

<p>This raises the question: if you’re selecting for problematic “senior”
engineers, are you selecting right? The problems of zealotry are correctly
identified (my personal experience agrees), but maybe “not selecting for
zealots” doesn’t mean “not selecting for language experts.” Selecting for senior
Gooby engineers does not require relaxing criteria for critical thinking.</p>

<p>If your hiring process filters for “personnel issues” of the kind Snelson
describes, then fix the hiring process. Look for candidates who consider
multiple angles and respond “it depends.”</p>

<p>Snelson concludes by citing Cromwell and a Tumblr user as a reminder that
sometimes we are wrong. Ironically, the Tumblr post’s “it depends” aligns with
exactly my argument: hire developers who understand and appreciate nuance. <em>They
are probably still deep experts of some domain</em>. Nuance typically comes from
expertise.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="fp" /><summary type="html"><![CDATA[The identified problem may be missing the mark.]]></summary></entry><entry><title type="html">Re: Beautiful Python Monsters</title><link href="https://benknoble.github.io/blog/2024/06/15/beautiful-python-monsters/" rel="alternate" type="text/html" title="Re: Beautiful Python Monsters" /><published>2024-06-15T00:00:00+00:00</published><updated>2024-06-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/06/15/beautiful-python-monsters</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/06/15/beautiful-python-monsters/"><![CDATA[<p>Making flaky tests pass cries out for functional-programming idioms.</p>

<p>While reading <a href="https://treyhunner.com/2024/06/a-beautiful-python-monstrosity/">A beautiful Python
monstrosity</a>, I
was struck by several thoughts. Perhaps performance tests shouldn’t be automated
with the same tools as unit tests? Is there a better way to write flaky tests?</p>

<h2 id="automatic-performance-tests">Automatic performance tests</h2>

<p>A unit test doesn’t seem to be the best way to describe a performance test. More
likely, we want to set up a benchmarking harness, run the programs, and measure
various performance indicators. <a href="https://github.com/drym-org/qi/blob/070ffc5e0d2e3a581a1bc11acd391e980dbdd328/.github/workflows/benchmarks.yml">This can be done automatically in a build
pipeline</a>,
for example.</p>

<p>If these measurements are collected on each run we can perform analyses. For
example:</p>

<ul>
  <li>Graph each run (with suitable titles) or make a <a href="https://drym-org.github.io/qi/benchmarks/">trend
analysis</a>.</li>
  <li>Perform <a href="https://chelseatroy.com/2021/02/26/data-safety-for-programmers/">statistical
tests</a>
between runs to see if the change was meaningful.</li>
</ul>

<p>All of this can also be automated. I wouldn’t write any of it as a unit test,
however.</p>

<p>The examples in the original post also seem to concentrate on algorithmic (time)
complexity; this can be done with statistical tests, too, given a wealth of
data. It’s not something I want to run as part of the (local) unit tests,
though. If it’s important enough to block PRs, put it in the build pipeline (and
I should be capable of running it locally; it shouldn’t be on by default,
though).</p>

<h2 id="flaky-tests">Flaky tests</h2>

<p>An orthogonal concept: How do we make flaky tests less flaky? We should engineer
the tests to be less reliant on flakiness, but automatically repeating the tests
is a reasonable hack in the meantime.</p>

<p>Here’s my transcribed Racket <code class="language-plaintext highlighter-rouge">repeat-flaky</code> procedure, which doesn’t require
decorators or other ideas:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">repeat-flaky</span> <span class="nv">test</span> <span class="p">[</span><span class="nf">n</span> <span class="mi">10</span><span class="p">])</span>
  <span class="p">(</span><span class="nf">match</span> <span class="nv">n</span>
    <span class="p">[</span><span class="nf">0</span> <span class="p">(</span><span class="nf">test</span><span class="p">)]</span>
    <span class="p">[(</span><span class="nf">?</span> <span class="nv">positive?</span> <span class="nv">m</span><span class="p">)</span>
     <span class="p">(</span><span class="k">with-handlers</span> <span class="p">([</span><span class="nb">exn:fail?</span> <span class="p">(</span><span class="k">λ</span> <span class="p">(</span><span class="nf">_exn</span><span class="p">)</span> <span class="p">(</span><span class="nf">repeat-flaky</span> <span class="nv">test</span> <span class="p">(</span><span class="nb">sub1</span> <span class="nv">n</span><span class="p">)))])</span>
       <span class="p">(</span><span class="nf">test</span><span class="p">))]))</span>

<span class="c1">;; Example:</span>
<span class="p">(</span><span class="nf">repeat-flaky</span> <span class="p">(</span><span class="nf">thunk</span> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">random</span> <span class="mi">1</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">random</span> <span class="mi">1</span> <span class="mi">3</span><span class="p">))))</span>
</code></pre></div></div>

<p>The core idea is to pass functions around. Python makes this hard because its
<code class="language-plaintext highlighter-rouge">lambda</code> doesn’t permit arbitrary functions; the decorator over an unnamed
function is essentially recreating higher-order functions receiving anonymous
functions. This is thus the essence of repeating fallible tests; a
generalization allows the <code class="language-plaintext highlighter-rouge">exn:fail?</code> test to be replaced by the client or for
subsequent invocations to know about the caught exception by having it passed as
an optional argument.</p>

<p>The <code class="language-plaintext highlighter-rouge">thunk</code> could be eliminated (from surface syntax) by a macro if desired.</p>

<p>This works without needing <code class="language-plaintext highlighter-rouge">nonlocal</code>, by the way, since the Racket equivalent
of Python’s <code class="language-plaintext highlighter-rouge">a = 1</code> that automatically introduces <code class="language-plaintext highlighter-rouge">a</code> is <code class="language-plaintext highlighter-rouge">(let ([a 1]) …)</code> or
<code class="language-plaintext highlighter-rouge">(define a 1)</code>. This isn’t mutation, it’s binding. Further, if you want to refer
to <code class="language-plaintext highlighter-rouge">a</code> from a higher scope, you do so by writing <code class="language-plaintext highlighter-rouge">a</code> (as long it isn’t
shadowed), even with <code class="language-plaintext highlighter-rouge">set!</code>. Lexical scoping rules give you predictable control
of which identifiers refer to which bindings in each part of the program text.</p>

<p>The ability to properly nest <code class="language-plaintext highlighter-rouge">repeat-flaky</code> makes a lot of the need for mutation
(and thus complicated scope references) go away, though:</p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">repeat-flaky</span>
  <span class="p">(</span><span class="nf">thunk</span>
    <span class="p">(</span><span class="k">define</span> <span class="nv">micro-time</span> <span class="nv">…</span><span class="p">)</span>
    <span class="p">(</span><span class="k">define</span> <span class="nv">tiny-time</span> <span class="nv">…</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">check</span> <span class="nv">…</span> <span class="nv">micro-time</span> <span class="nv">tiny-time</span> <span class="nv">…</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">repeat-flaky</span>
      <span class="p">(</span><span class="nf">thunk</span>
        <span class="p">(</span><span class="k">define</span> <span class="nv">small-time</span> <span class="nv">…</span><span class="p">)</span>
        <span class="c1">;; we have access to micro, tiny here</span>
        <span class="p">(</span><span class="nf">check</span> <span class="nv">…</span> <span class="nv">micro-time</span> <span class="nv">tiny-time</span> <span class="nv">small-time</span> <span class="nv">…</span><span class="p">)))))</span>
</code></pre></div></div>

<p>Each nesting is repeated, however, so this singly-nested flaky test could run up
to 25 times (instead of the original’s 5). This could be a feature, though, and
can be controlled with the optional repeat argument.</p>

<h2 id="conclusions">Conclusions</h2>

<ol>
  <li>Take a hard look at what your goals for performance tests are. The original
post wanted them to predictably, consistently pass and fail like unit tests
and run quickly. I’m not sure that’s the best methodology for comparing
performance or for testing algorithmic time complexity.</li>
  <li>The essence of repeating fallible tests can be implemented by higher order
functions. An abuse of Python’s decorators allows Python to pass unnamed
functions to higher-order functions, working around a language deficiency.
Python’s <code class="language-plaintext highlighter-rouge">lambda</code> is not.</li>
</ol>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="python" /><category term="racket" /><category term="fp" /><summary type="html"><![CDATA[Making flaky tests pass cries out for functional-programming idioms.]]></summary></entry><entry><title type="html">Extracting Ourselves from GitHub = Git</title><link href="https://benknoble.github.io/blog/2024/04/30/extracting-ourselves-from-github-equals-git/" rel="alternate" type="text/html" title="Extracting Ourselves from GitHub = Git" /><published>2024-04-30T00:00:00+00:00</published><updated>2024-04-30T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/04/30/extracting-ourselves-from-github-equals-git</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/04/30/extracting-ourselves-from-github-equals-git/"><![CDATA[<p>It’s time to remind ourselves that GitHub and Git are not synonyms.</p>

<p>A word of caution: this may all seem like pedantry to you, dear developer, who
wants to write some code, get paid, and move on. That’s fine. Software
development is for many just a job. What makes this pedantry worthwhile is the
essence of dictionaries: speaking a common language enables more effective
communication. Communication is critical to productivity.</p>

<p>I thus invite you to think of this article as an introductory language crash
course. “Git &amp; GitHub 101,” if you will.</p>

<h2 id="a-brief-history-lesson">A Brief History Lesson</h2>

<p>Git was first released in April 2005 with commit <a href="https://github.com/git/git/commit/e83c516331">e83c516331 (Initial revision
of “git”, the information manager from hell,
2005-04-07)</a>. Version 1.0 followed
by the end of that same year.</p>

<p>I won’t recount the history of Git’s invention here. There are plenty of other
places for that:</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Git#History">https://en.wikipedia.org/wiki/Git#History</a></li>
  <li><a href="https://www.linuxjournal.com/content/git-origin-story">https://www.linuxjournal.com/content/git-origin-story</a></li>
  <li><a href="https://lore.kernel.org/lkml/Pine.LNX.4.58.0504060800280.2215@ppc970.osdl.org/T/#u">Kernel SCM saga thread</a>, with <a href="https://lore.kernel.org/lkml/Pine.LNX.4.58.0504072127250.28951@ppc970.osdl.org/">the very first mention</a></li>
</ul>

<p>I will briefly mention that predecessors such as
<a href="https://en.wikipedia.org/wiki/Source_Code_Control_System">SCSS</a> go back all the
way to the 1960s and 70s, and the design of SCSS,
<a href="https://en.wikipedia.org/wiki/Revision_Control_System">RCS</a>,
<a href="https://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>, and <a href="https://en.wikipedia.org/wiki/Apache_Subversion">Apache
Subversion</a> played a role in
shaping Git and its peers<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. See also <a href="https://en.wikipedia.org/wiki/Version_control#History">a brief history of version
control</a>.</p>

<p>Finally, GitHub didn’t emerge until 2008. It, too was shaped by its peers,
notably such <a href="https://en.wikipedia.org/wiki/Forge_(software)">forges</a> as
<a href="https://en.wikipedia.org/wiki/SourceForge">SourceForge</a>.</p>

<p>The differences between a forge and a version control system are the primary
concern of this article, using Git and GitHub as the exemplaries. That we
categorize Git and GitHub differently should make it clear they are distinct
entities.</p>

<h2 id="common-mistakes">Common Mistakes</h2>

<p>This section covers some of the most common mistakes I see working with
developers every day, roughly in order of commonality and importance.</p>

<ul>
  <li>Git is not GitHub. This is the point of the whole article: don’t say one when
you mean the other. If you’re not sure which you mean, find out if it exists as
a major concept in the <a href="https://git-scm.com/doc">documentation for Git</a>; that’s
usually a good <a href="https://en.wikipedia.org/wiki/Philosophical_razor">razor</a> to
separate one from the other.</li>
  <li>There is no such thing as a “Git issue.” GitHub has
<a href="https://docs.github.com/en/issues">Issues</a>, and many other forges have
bug-tracking features. Some projects even use tools outside of software forges
to track bugs. <em>Bug tracking is not a Git feature or principle: Git is for
version control.</em></li>
  <li>Corollary: GitHub issue references are not permanent. Referring to <code class="language-plaintext highlighter-rouge">#1234</code> in
a commit or elsewhere may conveniently create a link in GitHub, but if you ever
switch systems that won’t be helpful. I thus advise using the full link
<code class="language-plaintext highlighter-rouge">https://github.com/&lt;org&gt;/&lt;project&gt;/issue/1234</code> <em>and</em> including the relevant
context with the link.</li>
  <li>Git has no notion of pull requests. This one is, admittedly, an easy mistake
to make: Git has a command called
<a href="https://git-scm.com/docs/git-request-pull"><code class="language-plaintext highlighter-rouge">request-pull</code></a> to “Generate a
request asking your upstream project to pull changes into their tree.” That is
essentially what a GitHub Pull Request is: a request for one repository to pull
changes from another repository’s accessible branch. On GitHub, a PR is forced
to specify a destination branch, too, but in distributed workflows it may be
that multiple upstream branches should pull from the source branch.</li>
  <li>GitHub is not Git. I already said this, but let’s take a different angle: I
think GitHub’s enormous market share confuses people. There are actually <em>many</em>
different ways to host Git repositories so that they are accessible for
development, open-source or otherwise. For example, <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols">Pro Git describes some
aspects of hosting a Git
server</a>, in
addition to the builtin visualizer
<a href="https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb">GitWeb</a>, the GitHub
competitor <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-GitLab">GitLab</a>,
and other <a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Third-Party-Hosted-Options">third-party
options</a>
like <a href="https://about.gitea.com">Gitea</a> and <a href="https://sourcehut.org">SourceHut</a>.
Some projects, including Git, do most development on mailing lists and don’t use
most of the major forge features. Many of the options mentioned here are
open-source themselves and can also be self-hosted.</li>
</ul>

<h2 id="forks-and-branches">Forks and Branches</h2>

<p>I see many, many developers confuse these two terms, and I’m going to attempt
the impossible: to disambiguate them. I suspect that most of the confusion is
due to age: many of my peers didn’t experience the history that gives these
terms such specific meanings, and most don’t read the documentation or historic
notes that explain them. So, for your benefit, dear reader, I’ve done what
research I need to extricate these terms and point you towards more details.
Here are the fruits of that labor (roughly in order of importance?).</p>

<p>Most importantly: Forks and branches are entirely orthogonal concepts. A
<a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a>
is a kind of
<a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefrefaref">reference</a>,
also called a <code class="language-plaintext highlighter-rouge">ref</code> in Git’s documentation. Git’s documentation actually
considers a branch an entire history of commits; in practice, we typically mean
the reference <code class="language-plaintext highlighter-rouge">my-feature</code> when we talk about the branch <code class="language-plaintext highlighter-rouge">my-feature</code>, not the
list of commits produced by <code class="language-plaintext highlighter-rouge">git rev-list my-feature</code>.</p>

<p>A fork… well, here’s where it gets tricky. I’m going to walk you through a
useful set of working definitions, then tease apart some history and nuance.</p>

<h3 id="different-kinds-of-forks">Different Kinds of Forks</h3>

<p>I’m going to distinguish 3 kinds of forks: forks, Forks, and divergent forks.</p>

<ul>
  <li>A fork is a URL<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> that points to a related<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> repository. In a non-bare
local fork, we typically keep track of other forks as remotes. Notice that I’ve
referred to a “local fork”: a clone is “just another fork.”</li>
  <li>A Fork is a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks">GitHub
feature</a>
for making contributions easier (more on this later). GitHub says a Fork is “a
new repository that shares code” with the “upstream” repository. This is close
to what a fork is, actually, and most Forks are useful forks, too. A few
clarifications are in order. First, GitHub said the Fork and its upstream
repository share code, but actually they share a common commit history. Second,
GitHub relegates Forks to 2nd-class status by not enabling certain other
features in its UI or otherwise for Forks.</li>
  <li>A divergent fork is my term for distinguishing forks that take a social stance
on what repository is considered canonical. More on this later, but if you’re
thinking “OpenTofu forked Terraform,” I’d call that a “divergent fork” in this
article. In practice, the open source community just calls these forks, and I
need the “divergent” label only to usefully distinguish these kinds of forks for
this article.</li>
</ul>

<p>To recap: every copy of a repository is a fork. GitHub provides a way to create
special forks for contribution via their platform that I call Forks. Some
projects diverge meaningfully from a shared history, and these are also called
forks.</p>

<p>The distinction between a fork and a divergent fork is that one is technical and
the other is social. We’ll cover the social area later.</p>

<h3 id="history-of-the-term-fork">History of the Term “fork”</h3>

<p><a href="https://en.wikipedia.org/wiki/Fork_(software_development)">The word “fork” goes back to at least 1980</a>. Over time, it has
been used for a variety of purposes, including things that are closer to what
Git calls a branch or repository. In the Jargon File, it is explicitly about
divergent forks (with a serious negative connotation): historically, divergent
forks were seen as fragmenting the ecosystem, which was A Bad Thing™. In modern
open source development, the proliferation and competition of related ideas and
works via distributed development is widely considered a good thing, and
divergent forks are generally not frowned upon unless they are antagonistic.</p>

<p>It is telling that the only mentions of the word “fork” in Git’s documentation
are in documents describing GitHub interactions: there is nothing technically
inherent about the concept of forks (or Forks) in Git’s design. This is part of
what makes Git distributed: all that matters is copies of the commit history and
how to refer to them.</p>

<h3 id="contributing-to-a-project-forks-and-branches">Contributing to a Project: forks and branches</h3>

<p>There are two kinds of contributions: those for yourself and those for others.</p>

<p>A contribution for yourself (where license permits) only requires a copy of the
source code (and typically its history). That is, you need a fork. Then you edit
the code. Committing is not even strictly necessary.</p>

<p>To share that contribution with others, you need to either</p>
<ul>
  <li>Make a branch of history available somewhere that other interested parties can
pull from</li>
  <li>Send others a patch series, such as from <code class="language-plaintext highlighter-rouge">git format-patch</code></li>
</ul>

<p>In the end, you are taking your work and sending it to others with a request
that they pull from your line of work. A Fork is a convenient place to make
branches available to others, and that is what makes GitHub Forks a useful
feature for contributing to projects. But you still want a line of commit
history somewhere; this typically resides in a branch.</p>

<h3 id="the-social-aspect">The Social Aspect</h3>

<p>Git treats all forks the same: they are equally unprivileged. Only social
processes privilege some forks as canonical over others.</p>

<p>For example, it is widely agreed that Torvalds’s Linux kernel repository is
canonical. There is nothing in Git that enforces this, only social convention!
Similar arguments apply to the GitHub mirrors git/git and gitster/git, along
with the divergent fork microsoft/git.</p>

<p>Following this to its conclusion, when <a href="https://opentofu.org">OpenTofu.org</a> says</p>

<blockquote>
  <p>Open Tofu is a fork of Terraform</p>
</blockquote>

<p>what they roughly mean is</p>

<blockquote>
  <p>We have a Git repository that contains some shared history with the canonical
Terraform repository. We have technical differences A,B,C and social
differences X,Y,Z; these make us interesting because of MN and you should
consider using our project.</p>
</blockquote>

<p>They might or might not mean they want to supplant an existing canonical
repository as dominant via social process; that is, they <em>may</em> intend to become
the defacto hub for Terraform-like software, but the primary message conveyed is
one of commit history and technical features.</p>

<p>Most Forks and forks have a similar message: “I have something interesting you
should look at. It’s better than other repositories with shared history because
A, so you should use it, too.” A request to other maintainers of other
repositories (forks) to pull in those changes (GitHub: a PR) is a way of saying
“You should pull changes from my fork because they will improve yours.” That is,
<em>collaboration is all social.</em> The technical bits of Git support this kind of
collaboration because they were designed to for Linux kernel development, but
they serve other kinds of social contribution models, too.</p>

<p>Sometimes forks maintain parallel development with each having different
features. Vim and neovim can be viewed this way. Another example is
microsoft/git, which contributed the <code class="language-plaintext highlighter-rouge">scalar</code> tool back to git/git but still has
other microsoft-specific changes. It continues to integrate upstream git/git
changes to maintain feature parity. Packaging software, such as for a Linux
distribution, is similar because of patching: patches might add
platform-specific changes but try to maintain feature parity with the original
code base.</p>

<p>This is all part of what makes Git distributed.</p>

<h2 id="recap">Recap</h2>

<p>In a nutshell, there’s a lot of Git and GitHub that work together, but they are
fundamentally separate objects. Git is primarily a technical tool for
distributed version control; GitHub facilitates some of the social parts of
collaborating on software, but is not the only way to do so. Keeping these
concerns separate allows us to better untangle the nature of forks and branches.
It might seem pedantic, yet sharing common language and understanding helps us
develop better software, together.</p>

<h4 id="footnotes">Footnotes</h4>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Didn’t you know? There’s a whole <a href="https://en.wikipedia.org/wiki/List_of_version-control_software#Distributed_model">family of distributed version control
systems</a>.
There’s even work on new systems being done today. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Any kind of remote can be a fork, really, including other clones over
different storage systems, local or otherwise. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>It’s not strictly necessary for the histories to be related at the
commit-graph level: <code class="language-plaintext highlighter-rouge">git merge</code> accepts <code class="language-plaintext highlighter-rouge">--allow-unrelated-histories</code> for a
reason. Read related in a social, “this is relevant to me” sense. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="git" /><category term="github" /><category term="rants" /><category term="open-source" /><summary type="html"><![CDATA[It’s time to remind ourselves that GitHub and Git are not synonyms.]]></summary></entry><entry><title type="html">Performance of Racket Pict Comparison</title><link href="https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality/" rel="alternate" type="text/html" title="Performance of Racket Pict Comparison" /><published>2024-02-15T00:00:00+00:00</published><updated>2024-02-15T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/02/15/benchmarking-pict-equality/"><![CDATA[<p>I get a brief glimpse of the performance characteristics of two methods for
comparing <code class="language-plaintext highlighter-rouge">pict</code>s for equality.</p>

<h2 id="motivation">Motivation</h2>

<p>For recent work in the <a href="https://benknoble.github.io/frosthaven-manager">Frosthaven
Manager</a>, I want to quickly and
accurately compare two generated pictures (called
<a href="https://docs.racket-lang.org/pict/index.html"><code class="language-plaintext highlighter-rouge">pict</code></a>s in Racket parlance) for
equality. This must be accurate and fast to solve a user-experience problem:
interacting with onscreen elements of the Frosthaven Manager causes unrelated
items to flicker. I initially solved this in commit <a href="https://github.com/benknoble/frosthaven-manager/commit/8e6da623b613d286a8d24765c37307ccadba4981">8e6da62 (rich-text-view:
skip updates when content hasn’t changed,
2024-02-04)</a>
by comparing new content with old content to avoid re-rendering the same stuff.
But since pixel-for-pixel equivalent <code class="language-plaintext highlighter-rouge">pict</code>s may differ according to <code class="language-plaintext highlighter-rouge">equal?</code>, I
need a transformation <code class="language-plaintext highlighter-rouge">f</code> such that <code class="language-plaintext highlighter-rouge">(equal? (f p) (f q))</code> is true for
equivalent <code class="language-plaintext highlighter-rouge">pict</code>s <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>.</p>

<p>I believe such <code class="language-plaintext highlighter-rouge">pict</code>s are currently compared for pointer equality only (that
is, using <code class="language-plaintext highlighter-rouge">eq?</code> semantics) because a <code class="language-plaintext highlighter-rouge">pict</code> is a non-transparent structure. In
addition it is documented to contain something that is roughly like a procedure.
Procedures are compared for pointer equality, too; <code class="language-plaintext highlighter-rouge">(equal? (λ (x) x) (λ (x)
x))</code> does not hold.</p>

<p>A brief documentation search produced two promising candidates:</p>
<ol>
  <li>The procedure
<a href="https://docs.racket-lang.org/pict/Rendering.html#%28def._%28%28lib._pict%2Fmain..rkt%29._pict-~3eargb-pixels%29%29"><code class="language-plaintext highlighter-rouge">pict-&gt;argb-pixels</code></a>
returns the byte-vector corresponding to a bitmap of the picture.
Byte-vectors can be compared for equality. While I expect that bitmaps lose
fidelity compared to the internal representation, for the images used by the
Frosthaven Manager the fidelity of the bitmap is sufficient. Below, I refer
to this as the “bytes” method of comparison and the “bytes” transformer.</li>
  <li>The class <a href="https://docs.racket-lang.org/draw/record-dc_.html"><code class="language-plaintext highlighter-rouge">record-dc%</code></a>
behaves like a normal drawing context except that it records drawing actions.
These recorded actions can be replayed to another context or extracted into a
serializable format. This format is, coincidentally, suitable for comparison
by <code class="language-plaintext highlighter-rouge">equal?</code> directly. Unlike <code class="language-plaintext highlighter-rouge">pict-&gt;argb-pixels</code>, using a <code class="language-plaintext highlighter-rouge">record-dc%</code>
requires a little extra code:
    <div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">([</span><span class="nf">dc</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">record-dc%</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">draw-pict</span> <span class="nv">p</span> <span class="nv">dc</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">get-recorded-datum</span><span class="p">)))</span>
</code></pre></div>    </div>
    <p>I refer to this as the “record-dc” method of comparison and the “record-dc”
transformer.</p>
  </li>
</ol>

<h2 id="hypotheses">Hypotheses</h2>

<p>Recall that I have 2 requirements for the equality comparison: it must be
<em>accurate</em> (I don’t want to skip a needed redraw or perform an unnecessary one)
and <em>fast</em> (it can’t delay the rest of the application noticeably). As I thought
about the methods I was considering, I added an extra desideratum: because these
transformations will generate values that will be garbage post-comparison, the
results should not be wasteful with memory and therefore trigger more frequent
garbage collection that could result in an unresponsive application.
Fortunately, the application mostly operates at human timescales and has “idle”
time. Unfortunately, I cannot control the collector (or the duration of the
“idle” time) to guarantee that GC pauses only occur when they would go
completely unnoticed.</p>

<p>With these factors in mind, I formed the following hypotheses:</p>
<ol>
  <li>The bytes method and the record-dc method perform at roughly equal speeds.</li>
  <li>The record-dc method uses more memory.</li>
</ol>

<p>Hypotheses (1) is supported. In a shocking twist, it appears that the bytes
method uses marginally more memory (but this is “eyeball” statistics: I have not
performed a statistical test; I do not have a p-value; this does not generalize
beyond my dataset).</p>

<p>I arrived at these hypotheses by noting that both methods perform a similar
transformation: draw the picture and extract some comparable information. I
expected the bytes method to perform slightly faster on the assumption that
byte-vector comparison is fast and that the comparable values from the record-dc
transformer would be large enough in memory to slow down comparison. This latter
expectation is not supported by my data; indeed, the inverse (that the record-dc
method is faster) is.</p>

<h2 id="experimental-method">Experimental Method</h2>

<p>I constructed a benchmarking program that could be run in a matrix of modes. A
parameter \(N\) controls the number of iterations of each mode; what follows
describes a single iteration for each mode. The four modes are:</p>
<ol>
  <li>A time benchmark using the bytes method.</li>
  <li>A time benchmark using the memory method.</li>
  <li>A memory benchmark using the bytes method.</li>
  <li>A memory benchmark using the memory method.</li>
</ol>

<p>Since each iteration executes independent of the method, I will describe each
benchmark mode in terms of a general method \(M\).</p>

<p>Each benchmark used a table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons with 582 entries. This
resulted in 1164 applications of transformers per run. Each benchmark was run a
minimum of 10 times by <code class="language-plaintext highlighter-rouge">hyperfine</code>.</p>

<h3 id="time-benchmarks">Time Benchmarks</h3>

<p>The time benchmark iterates the table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons \(N\) times; for
each, it compares two <code class="language-plaintext highlighter-rouge">pict</code>s (outputting timing information of the entire
comparison, which includes the use of the transformers, using the <code class="language-plaintext highlighter-rouge">time</code> form)
and checks that the result of the comparison is as expected.</p>

<p>Since <code class="language-plaintext highlighter-rouge">hyperfine</code> ran the time benchmarks 10 times with \(N=1\), this results in
5820 data-points for each method for each of real, cpu, and gc time, for a grand
total of 11640 points.</p>

<h3 id="memory-benchmarks">Memory Benchmarks</h3>

<p>The memory benchmark iterates the table of <code class="language-plaintext highlighter-rouge">pict</code> comparisons \(N\) times. For
each iteration of the table, we perform the ritualistic GC dance (call
<code class="language-plaintext highlighter-rouge">collect-garbage</code> 3 times) and measure current memory use. Then we construct the
objects that would be compared using the transformer under benchmark. Finally,
we print the difference of current memory use (after constructing the objects)
and original memory use (after garbage collection).</p>

<p>I cannot guarantee that GC does not occur during the iteration of the table,
which would skew results. An earlier version of the memory benchmark only
collected garbage before iterating the entire table and likely had to GC midway.
The current version may still GC midway, but it is far less likely now.</p>

<p>Since <code class="language-plaintext highlighter-rouge">hyperfine</code> ran the time benchmarks 10 times with \(N=1\), this results in
5820 data-points for each method for a grand total of 11640 points.</p>

<h2 id="results">Results</h2>

<p>Pretty pictures first. These are box and whisker plots that show mean, IQR, and
outliers.</p>

<p><img src="/assets/img/pict-bench-time.svg" alt="Time spent comparing picts" /></p>

<p>The time chart is segmented by where the time was spent. In real and cpu time,
the record-dc averages 2ms faster. Most gc times are 0.</p>

<p><img src="/assets/img/pict-bench-memory.svg" alt="Memory use by pict transformers for comparison" /></p>

<p>The memory chart shows that the record-dc averages less than 250KiB less memory
use, which is easier to see on a chart with no outliers.</p>

<p><img src="/assets/img/pict-bench-memory2.svg" alt="Memory use by pict transformers for comparison without outliers" /></p>

<p>Here are the <code class="language-plaintext highlighter-rouge">hyperfine</code> outputs at various commits.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit 00366fdb3712bf4359c5a7dc551de2a0fc33e716
hyperfine 'racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes' 'racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc'
Benchmark 1: racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes
  Time (mean ± σ):     10.036 s ±  0.044 s    [User: 9.491 s, System: 0.285 s]
  Range (min … max):    9.962 s … 10.086 s    10 runs

Benchmark 2: racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc
  Time (mean ± σ):      8.798 s ±  0.049 s    [User: 8.283 s, System: 0.267 s]
  Range (min … max):    8.717 s …  8.851 s    10 runs

Summary
  racket bench.rkt --time --record-dc -n 1 &gt;&gt; time-record-dc ran
    1.14 ± 0.01 times faster than racket bench.rkt --time --bytes -n 1 &gt;&gt; time-bytes
</code></pre></div></div>

<p>This demonstrates that the record-dc method is slightly faster than the bytes
method.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit a327c06ceb84b69daa6732ba698ffe6acc22e512
hyperfine 'racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes
  Time (mean ± σ):     10.493 s ±  0.064 s    [User: 9.948 s, System: 0.286 s]
  Range (min … max):   10.383 s … 10.586 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
  Time (mean ± σ):      9.213 s ±  0.053 s    [User: 8.700 s, System: 0.265 s]
  Range (min … max):    9.130 s …  9.303 s    10 runs

Summary
  racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc ran
    1.14 ± 0.01 times faster than racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes

commit 2fb05847453641fcfa400dfa34d2fa67beb7096b
hyperfine 'racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes
  Time (mean ± σ):     39.261 s ±  0.418 s    [User: 38.181 s, System: 0.544 s]
  Range (min … max):   38.926 s … 40.364 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc
  Time (mean ± σ):     26.965 s ±  0.514 s    [User: 26.161 s, System: 0.378 s]
  Range (min … max):   26.271 s … 28.015 s    10 runs

Summary
  racket bench.rkt --memory --record-dc -n 10 &gt;&gt; memory-record-dc ran
    1.46 ± 0.03 times faster than racket bench.rkt --memory --bytes -n 10 &gt;&gt; memory-bytes

commit 4767dced4be0a77f4aab62f69f114d713fb19d7f
hyperfine 'racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes' 'racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc'
Benchmark 1: racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes
  Time (mean ± σ):     267.591 s ±  5.458 s    [User: 266.095 s, System: 0.851 s]
  Range (min … max):   258.180 s … 274.836 s    10 runs

Benchmark 2: racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
  Time (mean ± σ):     269.610 s ±  2.811 s    [User: 267.713 s, System: 1.014 s]
  Range (min … max):   265.525 s … 274.013 s    10 runs

Summary
  racket bench.rkt --memory --bytes -n 1 &gt;&gt; memory-bytes ran
    1.01 ± 0.02 times faster than racket bench.rkt --memory --record-dc -n 1 &gt;&gt; memory-record-dc
</code></pre></div></div>

<p>These only demonstrate the speed (or lack thereof) of various versions of the
memory benchmarks. The last run produced the data-points described in
<a href="#experimental-method">Experimental Method</a>.</p>

<h2 id="analysis">Analysis</h2>

<p>I find it hard to believe that constructing the comparison objects for 2 <code class="language-plaintext highlighter-rouge">pict</code>s
used 500–750KiB of memory regardless of method; that seems like too much. On the
other hand, I don’t know Racket’s memory model well.</p>

<p>It is clear that, for this sample, the record-dc method is more performant on
all axes I considered.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I’ll be adding record-dc method code to Frosthaven Manager soon.</p>

<h3 id="appendix-machine-information">Appendix: Machine Information</h3>

<ul>
  <li>OS: macOS 12.7.2 21G1974 x86_64</li>
  <li>Kernel: 21.6.0</li>
  <li>CPU: Intel i7-4870HQ (8) @ 2.50GHz</li>
  <li>GPU: Intel Iris Pro, AMD Radeon R9 M370X</li>
  <li>Memory: 16384MiB</li>
</ul>

<p>Benchmarks were run while the machine was under low load.</p>

<h3 id="appendix-full-benchmark-program">Appendix: Full Benchmark Program</h3>

<p><a href="https://github.com/benknoble/pict-equal-bench">The code is available on GitHub.</a></p>

<div class="language-racket highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket/base</span>

<span class="p">(</span><span class="k">require</span> <span class="nv">pict</span>
         <span class="nv">racket/draw</span>
         <span class="nv">racket/class</span>
         <span class="nv">racket/match</span>
         <span class="nv">rackunit</span>
         <span class="nv">frosthaven-manager/elements</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/ring1</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test1</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/drag-down</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test2</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/speartip</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test3</span><span class="p">])</span>
         <span class="p">(</span><span class="nf">rename-in</span> <span class="nv">frosthaven-manager/testfiles/aoes/unbreakable-wall</span>
                    <span class="p">[</span><span class="nf">aoe</span> <span class="nv">test4</span><span class="p">]))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pequal-bytes?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">pict-&gt;argb-pixels</span> <span class="nv">p</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">pict-&gt;argb-pixels</span> <span class="nv">q</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">([</span><span class="nf">dc</span> <span class="p">(</span><span class="nf">new</span> <span class="nv">record-dc%</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">draw-pict</span> <span class="nv">p</span> <span class="nv">dc</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">send</span> <span class="nv">dc</span> <span class="nv">get-recorded-datum</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">pequal-dc?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">equal?</span> <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">p</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">pict-&gt;recorded-datum</span> <span class="nv">q</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define</span> <span class="nv">checks</span>
  <span class="p">(</span><span class="nb">append</span>
   <span class="p">(</span><span class="nb">list</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test1</span><span class="p">)</span> <span class="p">(</span><span class="nf">test4</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">test2</span><span class="p">)</span> <span class="p">(</span><span class="nf">test3</span><span class="p">)</span> <span class="no">#f</span><span class="p">))</span>
   <span class="p">(</span><span class="nf">for*/list</span> <span class="p">([</span><span class="nf">element1</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">fire</span> <span class="nv">ice</span> <span class="nv">earth</span> <span class="nv">air</span> <span class="nv">light</span> <span class="nv">dark</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">element2</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">fire</span> <span class="nv">ice</span> <span class="nv">earth</span> <span class="nv">air</span> <span class="nv">light</span> <span class="nv">dark</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">procedure1</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">element-pics-infused</span>
                                 <span class="nv">element-pics-waning</span>
                                 <span class="nv">element-pics-unfused</span>
                                 <span class="nv">element-pics-consume</span><span class="p">)]</span>
               <span class="p">[</span><span class="nf">procedure2</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">element-pics-infused</span>
                                 <span class="nv">element-pics-waning</span>
                                 <span class="nv">element-pics-unfused</span>
                                 <span class="nv">element-pics-consume</span><span class="p">)])</span>
     <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nf">procedure1</span> <span class="p">(</span><span class="nf">element1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">procedure2</span> <span class="p">(</span><span class="nf">element2</span><span class="p">))</span>
           <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nb">equal?</span> <span class="nv">procedure1</span> <span class="nv">procedure2</span><span class="p">)</span>
                <span class="p">(</span><span class="nb">equal?</span> <span class="nv">element1</span> <span class="nv">element2</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">run-time-bench</span> <span class="nv">n</span> <span class="nv">pequal?</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">_i</span> <span class="p">(</span><span class="nf">in-range</span> <span class="nv">n</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">check</span> <span class="p">(</span><span class="nf">in-list</span> <span class="nv">checks</span><span class="p">)])</span>
      <span class="p">(</span><span class="nf">match-define</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">expected</span><span class="p">)</span> <span class="nv">check</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="k">time</span> <span class="p">(</span><span class="nf">pequal?</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span> <span class="nv">expected</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="nf">run-memory-bench</span> <span class="nv">n</span> <span class="nv">constructor</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">_i</span> <span class="p">(</span><span class="nf">in-range</span> <span class="nv">n</span><span class="p">)])</span>
    <span class="p">(</span><span class="nf">for</span> <span class="p">([</span><span class="nf">check</span> <span class="p">(</span><span class="nf">in-list</span> <span class="nv">checks</span><span class="p">)])</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">collect-garbage</span><span class="p">)</span>
      <span class="p">(</span><span class="k">define</span> <span class="nv">old</span> <span class="p">(</span><span class="nb">current-memory-use</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">match-define</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">_expected</span><span class="p">)</span> <span class="nv">check</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">constructor</span> <span class="nv">p</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">constructor</span> <span class="nv">q</span><span class="p">)</span>
      <span class="p">(</span><span class="k">define</span> <span class="nv">new</span> <span class="p">(</span><span class="nb">current-memory-use</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">println</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">new</span> <span class="nv">old</span><span class="p">)))))</span>

<span class="p">(</span><span class="nf">module+</span> <span class="nv">main</span>
  <span class="p">(</span><span class="k">require</span> <span class="nv">racket/cmdline</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">constructor</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">comparator</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">bench</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="mi">10</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define</span> <span class="nv">arg</span> <span class="p">(</span><span class="nb">make-parameter</span> <span class="no">#f</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">command-line</span>
   <span class="nt">#:once-any</span>
   <span class="p">[(</span><span class="nf">"--bytes"</span><span class="p">)</span> <span class="s">"Benchmark using bytes"</span>
                <span class="p">(</span><span class="nf">constructor</span> <span class="nv">pict-&gt;argb-pixels</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">comparator</span> <span class="nv">pequal-bytes?</span><span class="p">)]</span>
   <span class="p">[(</span><span class="nf">"--record-dc"</span><span class="p">)</span> <span class="s">"Benchmark using record-dc%"</span>
                    <span class="p">(</span><span class="nf">constructor</span> <span class="nv">pict-&gt;recorded-datum</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">comparator</span> <span class="nv">pequal-dc?</span><span class="p">)]</span>
   <span class="nt">#:once-any</span>
   <span class="p">[(</span><span class="nf">"--time"</span><span class="p">)</span> <span class="s">"Benchmark timing"</span>
               <span class="p">(</span><span class="nf">bench</span> <span class="nv">run-time-bench</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">arg</span> <span class="nv">comparator</span><span class="p">)]</span>
   <span class="p">[(</span><span class="nf">"--memory"</span><span class="p">)</span> <span class="s">"Benchmark memory"</span>
                 <span class="p">(</span><span class="nf">bench</span> <span class="nv">run-memory-bench</span><span class="p">)</span>
                 <span class="p">(</span><span class="nf">arg</span> <span class="nv">constructor</span><span class="p">)]</span>
   <span class="nt">#:once-each</span>
   <span class="p">[(</span><span class="nf">"-n"</span><span class="p">)</span> <span class="nv">N</span> <span class="s">"Number of iterations [10]"</span> <span class="p">(</span><span class="nf">n</span> <span class="p">(</span><span class="nb">string-&gt;number</span> <span class="nv">N</span><span class="p">))]</span>
   <span class="nt">#:args</span> <span class="p">()</span>
   <span class="p">(</span><span class="k">unless</span> <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nf">bench</span><span class="p">)</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">arg</span><span class="p">)</span> <span class="p">((</span><span class="nf">arg</span><span class="p">)))</span>
     <span class="p">(</span><span class="nb">raise-user-error</span> <span class="s">"Missing arguments"</span><span class="p">))</span>
   <span class="p">((</span><span class="nf">bench</span><span class="p">)</span> <span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">((</span><span class="nf">arg</span><span class="p">)))))</span>
</code></pre></div></div>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="racket" /><category term="performance" /><summary type="html"><![CDATA[I get a brief glimpse of the performance characteristics of two methods for comparing picts for equality.]]></summary></entry><entry><title type="html">A Strategy to Change Core Data Structures in Programs</title><link href="https://benknoble.github.io/blog/2024/02/13/data-structure/" rel="alternate" type="text/html" title="A Strategy to Change Core Data Structures in Programs" /><published>2024-02-13T00:00:00+00:00</published><updated>2024-02-13T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2024/02/13/data-structure</id><content type="html" xml:base="https://benknoble.github.io/blog/2024/02/13/data-structure/"><![CDATA[<p>This relates to the refactoring rule “Make the change easy, then make
the easy change” from Kent Beck. He warns that the first step may be hard. I
present one strategy to make the first step easier for data structure
changes.</p>

<p>It sounds so simple when you say it out loud: change either the data structure
or the data-processing programs, one at a time.</p>

<h2 id="motivation">Motivation</h2>

<p>Imagine you have a data structure that maps decks of cards to numbers as a core
piece of a program. This represents some way of constructing a mixed deck by
drawing cards from each of the decks. Naturally you have some programs that
manipulate this data. You might have</p>
<ul>
  <li>a program to convert the mapping into a mixed deck</li>
  <li>a program to update the mapping</li>
  <li>a program to display the mapping in a graphical interface</li>
  <li>etc.</li>
</ul>

<p>Now suppose you need to make a change to support enhancing specific cards in the
decks.</p>

<p>You could make this change by adding a program to update the mapping by finding
the deck, converting it to a new deck with the enhanced card, and swapping the
key (keeping the old value). Let’s say that poses several challenges and has
some negative trade-offs.</p>

<p>Another way to solve the problem is to split your data structure into 2 pieces:</p>
<ul>
  <li>a mapping from card <em>types</em> to numbers (how many cards of that type in the
mixed deck)</li>
  <li>a mapping from card <em>types</em> to decks (what deck to draw from)
See, each relation in the original mapping had an implicit 3rd component: the
type of cards in the relationship. With this split, the programs above need
changes. The program to enhance cards need only update the second mapping to
point to an enhanced deck, though, and is simpler to reason about.</li>
</ul>

<p>How do you make this change incrementally (with small, focused commits) and keep
your tests passing?</p>

<p>In case the benefits of this approach aren’t obvious:</p>
<ul>
  <li>Small focused commits makes review easier. Large commits are hard to reason
about.</li>
  <li>Passing tests at all commits increases my confidence that I’m not breaking the
system as I make changes.</li>
  <li>I also have to keep less in my head at a time, and have a cleaner pause point
if I need to take a break or to deal with an interruption.</li>
</ul>

<h2 id="the-2-part-strategy">The 2-part Strategy</h2>

<ol>
  <li>Change either the data structure <em>or</em> the contract of all the programs that
manipulate it. Add adapters as necessary.</li>
  <li>Change the other.</li>
</ol>

<p>Changing everything at once is hard. <a href="https://github.com/benknoble/frosthaven-manager/commit/11494ba86888ef84901def135c26656410abcbc8">In a recent merge, I changed the programs
first and then split the
data</a>.
The full diff looks quite large, but <a href="https://github.com/benknoble/frosthaven-manager/compare/feca028...3c56606">the individual commits in that
range</a>
are quite focused.</p>

<p>Let’s say you change the contract of the programs first. This means accepting
arguments for the split data structures and manipulating those. It also requires
adapting the old data structure into the new ones somehow, so you’ll end up with
code to convert old to new at the call-site. And everything should still work,
though you probably haven’t written the enhancement program yet.</p>

<p>Now you can change the data structure, which allows you to throw away the
adapter code at call-sites because the new structures line up with the existing
contracts.</p>

<p>Finally, you can write the easy program you wanted to for enhancement.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="refactor" /><category term="advice" /><category term="racket" /><category term="frosthaven-manager" /><summary type="html"><![CDATA[This relates to the refactoring rule “Make the change easy, then make the easy change” from Kent Beck. He warns that the first step may be hard. I present one strategy to make the first step easier for data structure changes.]]></summary></entry><entry><title type="html">Solving Boggle</title><link href="https://benknoble.github.io/blog/2021/10/27/boggle/" rel="alternate" type="text/html" title="Solving Boggle" /><published>2021-10-27T00:00:00+00:00</published><updated>2021-10-27T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/10/27/boggle</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/10/27/boggle/"><![CDATA[<p>I solve Boggle in several languages. The following post is a literate program
written in Scribble.</p>

<p><a href="https://benknoble.github.io/scribblings/2021-10-27-boggle/2021-10-27-boggle.html">View full size</a></p>
<iframe class="scribbled" src="https://benknoble.github.io/scribblings/2021-10-27-boggle/2021-10-27-boggle.html" title="Scribbled blog post"></iframe>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="literate-programming" /><category term="prog-langs" /><category term="prolog" /><category term="racket" /><category term="racklog" /><summary type="html"><![CDATA[I solve Boggle in several languages. The following post is a literate program written in Scribble.]]></summary></entry><entry><title type="html">Learning is not (usually) time wasted</title><link href="https://benknoble.github.io/blog/2021/07/09/time-wasted-learning/" rel="alternate" type="text/html" title="Learning is not (usually) time wasted" /><published>2021-07-09T00:00:00+00:00</published><updated>2021-07-09T00:00:00+00:00</updated><id>https://benknoble.github.io/blog/2021/07/09/time-wasted-learning</id><content type="html" xml:base="https://benknoble.github.io/blog/2021/07/09/time-wasted-learning/"><![CDATA[<p>Way back in January, YouTube subjected me to an advertisement from Exam Labs.
What follows is a direct quote: “Looking for a job in tech? Don’t waste hundreds
of hours learning.”</p>

<p>Exam Labs, if you read this—you do technology a disservice. You need only
examine the recent cyber attacks and the various flaws in our technology to
understand that solving problems without adequate understanding ends in
disaster.</p>

<p>I have no idea what your business model is (I have not linked to you or visited
your website—I do not wish to give you undeserved web points in the form of
traffic). I suspect, based on the quote and name, that it does your clients a
disservice. Depriving anyone of the opportunity to learn is a disservice.</p>

<p>Assuming you charge a fee to pass exams (be they certifying or collegiate), you
do society a disservice. Money cannot buy skill, cannot buy expertise, cannot
build technology. Sending the message that money can buy a job reinforces
structures built only in the name of inequity.</p>

<h2 id="learning-is-a-crucial-technology-skill">Learning is a crucial technology skill</h2>

<p>If you disagree with this header, well, I cannot see why. When was the last time
you sat down to work with a piece of technology and learned nothing in the
process? When did you last use a new piece of technology without learning about
it?</p>

<p>It should be obvious that learning is a crucial skill in <em>all</em> jobs—in all of
life, really. I won’t belabor this point.</p>

<p>Becoming an expert does not mean you stop learning. Invention and discovery are
educational activities. Expertise often means you know how to learn quickly in a
domain (in addition to being able to sift through and connect relevant bits of
information). Expertise in one domain often translates to others; expertise in
learning always translates.</p>

<p>The hundreds of hours Exam Labs (falsely) equated with learning are hundreds of
hours spent becoming an expert in anything (see, for example, <em>The Art of
Learning</em> by Joshua Waitzkin). Developing a skill takes time.</p>

<h2 id="how-else-will-you-acquire-fundamental-technology-skills">How else will you acquire fundamental technology skills?</h2>

<p>Most jobs are in technology these days. Most of us learn on the job—we have
to. That is the nature of adapting to fluid situations, the nature of solving
problems, the nature of creative human beings.</p>

<p>“On the job” is not a good time to learn the fundamentals unless the job is
“trainee” or “student” or similar.</p>

<p>You may be hired for your strengths in a core business domain. You are very
likely to be hired for your fundamental skills and ability to learn the core
business domain. There you may apply your fundamental skills alongside your
unique skills.</p>

<h2 id="not-everything-is-google-able">Not everything is Google-able</h2>

<p>Yes, I know StackOverflow exists. I help people solve problems on affiliated
sites almost daily. I cannot often Google the answer to the question. Even
when I can, the results invariably mean I have to combine separate pieces of
knowledge into a cohesive whole. This requires learning those pieces.</p>

<p>Ever tried to solve a problem before? Did you first study the problem, or dive
in with no knowledge of it? (Most of us have probably done both.) Which approach
lead to a better solution (for some definition of better)?</p>

<h2 id="learning-looks-different-for-everyone">Learning looks different for everyone</h2>

<p>I’m not suggesting that we all get 4-year degrees in Computer Science (how
elitist that would be). Nor am I suggesting we all get 4-year degrees! Education
does not need to mean various lower schools to high school to college. How many
of our passions are self-taught, self-discovered?</p>

<p>Experimentation is a form of learning I practice regularly. Using something
breeds intimate knowledge of it.</p>

<p><em>No</em> learning, however, is not learning. Shortcut learning is often not
learning (or at least, not learning the right skills).</p>

<h2 id="learning-does-not-equal-hundreds-of-hours">Learning does not equal hundreds of hours</h2>

<p>Learning something adjacent to my expertise is often a matter of minutes or a
few hours.</p>

<p>Learning something completely new to me can range from days to a lifetime.</p>

<p>This false equivalence suggests that learning, because it requires so much time,
must be a waste. This is only fallacious. Plenty of things (sleep, hobbies,
cleaning, conversation) require large amounts of time—they are not a waste.</p>

<p>Admittedly, one does not become a black belt in mere days.</p>

<h2 id="i-dont-want-to-work-with-anyone-who-always-skips-learning">I don’t want to work with anyone who always skips learning</h2>

<p>And why should I? The habit of skipped learning is arrogant: it says, “I know
everything I need.”</p>

<p>I must emphasize that skipped school is not always skipped learning:
it may be learning a different trade, a different way. Early Americans had time
off school for the harvest (or at least, so I was taught—I find it hard to
rely on my education of American History in the details).</p>

<p>I must also emphasize that skipping learning occasionally is acceptable. For
example: A new feature in a framework you’ve mastered may not be relevant to you
immediately. Skip it and get the job done. (You may want to revisit it later,
though.) It is the habit that says, “Learning is beneath me” that I find
deplorable.</p>

<p>Do not skip the fundamentals. They are so-called for a reason. One does not build
a tower on sand.</p>

<p>Do not skip the problem. One does not solve the unknown.</p>]]></content><author><name>D. Ben Knoble</name></author><category term="[&quot;Blog&quot;]" /><category term="learning" /><category term="rants" /><category term="time" /><summary type="html"><![CDATA[Way back in January, YouTube subjected me to an advertisement from Exam Labs. What follows is a direct quote: “Looking for a job in tech? Don’t waste hundreds of hours learning.”]]></summary></entry></feed>